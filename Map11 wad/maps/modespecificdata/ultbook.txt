#PROP_text
type: string = "PROP"
version: u32 = 3
linked: list[string] = {}
entries: map[hash,embed] = {
    0x1b40eee6 = AbilityObject {
        mRootSpell: link = 0x99a36613
        mChildSpells: list[link] = {
            0xcd6148cb
            0x004d7cb8
            0x368a4431
            0x99a36613
            0x3871ec0f
        }
        0x86ddaddb: bool = true
        mName: string = "UltBook_UrgotR"
        mType: u8 = 2
    }
    0x004d7cb8 = SpellObject {
        mScriptName: string = "UltBook_UrgotRRecastChannel"
        mSpell: pointer = SpellDataResource {}
    }
    0x0f95fead = SpellObject {
        mScriptName: string = "UltBook_UrgotRFear"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_UrgotRFear"
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
        }
    }
    0x144c244d = SpellObject {
        mScriptName: string = "UltBook_UrgotRFacing"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4194304
            mAffectsTypeFlags: u32 = 4106
            mAffectsStatusFlags: u32 = 32
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAnimationName: string = ""
            mImgIconName: list[string] = {
                "ASSETS/Characters/Urgot/HUD/Icons2D/Urgot_R.dds"
            }
            mCastTime: f32 = 1.5
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            cannotBeSuppressed: bool = true
            canCastWhileDisabled: bool = true
            canCastOrQueueWhileCasting: bool = true
            mCantCancelWhileWindingUp: bool = true
            mCanMoveWhileChanneling: bool = true
            alwaysSnapFacing: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 8.5
            mLookAtPolicy: u32 = 1
            mClientData: embed = SpellDataResourceClient {
                0x375656dd: hash = 0x368a4431
            }
        }
    }
    0x368a4431 = SpellObject {
        mScriptName: string = "UltBook_UrgotRRecast"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mSpellTags: list[string] = {
                "Trait_ImmobilizingCCSpell"
            }
            mAnimationName: string = ""
            mImgIconName: list[string] = {
                "UltBook_Urgot_Square.dds"
                "UltBook_Urgot_RRecast_Grey.dds"
            }
            cooldownTime: list[f32] = {
                5
                5
                5
                5
                5
                5
                5
            }
            cannotBeSuppressed: bool = true
            canCastWhileDisabled: bool = true
            canCastOrQueueWhileCasting: bool = true
            mChannelIsInterruptedByDisables: bool = false
            mDoesntBreakChannels: bool = true
            mShowChannelBar: bool = false
            bIsToggleSpell: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRangeDisplayOverride: list[f32] = {
                700
                700
                700
                700
                700
                700
                700
            }
            mLookAtPolicy: u32 = 0
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            mTargetingTypeData: pointer = Self {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    0xfea35e52: bool = false
                    mObjectName: string = "UltBook_UrgotRRecast"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_UrgotRRecast_Name"
                        "keyTooltip" = "Spell_UrgotRRecast_Tooltip"
                        "keySummary" = "Spell_UrgotRRecast_Summary"
                    }
                }
            }
        }
        mBuff: pointer = BuffData {}
    }
    0x3871ec0f = SpellObject {
        mScriptName: string = "UltBook_UrgotRRecastMissile"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4194468
            mAffectsTypeFlags: u32 = 4106
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Urgot_RRecast.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            cannotBeSuppressed: bool = true
            canCastWhileDisabled: bool = true
            canCastOrQueueWhileCasting: bool = true
            mCantCancelWhileWindingUp: bool = true
            mDoesntBreakChannels: bool = true
            mShowChannelBar: bool = false
            alwaysSnapFacing: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRadius: list[f32] = {
                210
                210
                210
                210
                210
                210
                210
            }
            castConeDistance: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 80
                movementComponent: pointer = AcceleratingMovement {
                    mAcceleration: f32 = 3000
                    mMinSpeed: f32 = 3000
                    mMaxSpeed: f32 = 3000
                    mInitialSpeed: f32 = 3000
                    mStartBoneName: string = "Root_Body"
                    mTargetBoneName: string = "C_BUFFBONE_GLB_CHEST_LOC"
                }
                heightSolver: pointer = FollowTerrainHeightSolver {}
                verticalFacing: pointer = VeritcalFacingMatchVelocity {}
                behaviors: list[pointer] = {
                    CastOnMovementComplete {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 1
            castFrame: f32 = 8.5
            missileSpeed: f32 = 3000
            mMissileEffectKey: hash = 0x762e63c0
            mLineWidth: f32 = 80
            bHaveHitBone: bool = true
            mHitBoneName: string = "C_BUFFBONE_GLB_CHEST_LOC"
        }
    }
    0x99a36613 = SpellObject {
        mScriptName: string = "UltBook_UrgotR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 4106
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_SwapsIntoImmobilizingCCSpell"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "RBaseDamage"
                    mValues: list[f32] = {
                        0
                        125
                        250
                        375
                        500
                        625
                        750
                    }
                    0x3f95426c: bool = false
                }
                SpellDataValue {
                    mName: string = "RBonusADRatio"
                    mValues: list[f32] = {
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                    }
                    mBaseP: f32 = 0.5
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "RMoveSpeedMod"
                    mValues: list[f32] = {
                        75
                        75
                        75
                        75
                        75
                        75
                        75
                    }
                    mBaseP: f32 = 75
                }
                SpellDataValue {
                    mName: string = "RSlowDuration"
                    mValues: list[f32] = {
                        4
                        4
                        4
                        4
                        4
                        4
                        4
                    }
                    mBaseP: f32 = 4
                }
                SpellDataValue {
                    mName: string = "RSlowMultiplier"
                    mValues: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                    mBaseP: f32 = 1
                }
                SpellDataValue {
                    mName: string = "RFearDuration"
                    mValues: list[f32] = {
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                    }
                    mBaseP: f32 = 1.5
                }
                SpellDataValue {
                    mName: string = "RHealthThreshold"
                    mValues: list[f32] = {
                        25
                        25
                        25
                        25
                        25
                        25
                        25
                    }
                    mBaseP: f32 = 25
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "RChannelTimeReel"
                    mValues: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                    mBaseP: f32 = 1
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "RFearRadius"
                    mValues: list[f32] = {
                        600
                        600
                        600
                        600
                        600
                        600
                        600
                    }
                    mBaseP: f32 = 600
                    mFormula: string = "P + 0"
                }
            }
            0x94572284: map[hash,pointer] = {
                "RCalculatedDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "RBaseDamage"
                        }
                        StatByNamedDataValueCalculationPart {
                            mDataValue: hash = 0xb50a7458
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                    }
                }
            }
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Urgot_Square.dds"
            }
            mCastTime: f32 = 0.5
            cooldownTime: list[f32] = {
                100
                100
                85
                70
                70
                70
                70
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            mCantCancelWhileWindingUp: bool = true
            mSpellRevealsChampion: bool = false
            mShowChannelBar: bool = false
            alwaysSnapFacing: bool = true
            useAnimatorFramerate: bool = true
            mDoesNotConsumeMana: bool = true
            castRange: list[f32] = {
                2500
                2500
                2500
                2500
                2500
                2500
                2500
            }
            castRangeDisplayOverride: list[f32] = {
                2600
                2600
                2600
                2600
                2600
                2600
                2600
            }
            castRadius: list[f32] = {
                210
                210
                210
                210
                210
                210
                210
            }
            castConeDistance: f32 = 100
            luaOnMissileUpdateDistanceInterval: f32 = -8
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 80
                movementComponent: pointer = FixedSpeedMovement {
                    mProjectTargetToCastRange: bool = true
                    mSpeed: f32 = 3200
                    mUseHeightOffsetAtEnd: bool = true
                    mStartBoneName: string = "Root_Body"
                }
                visibilityComponent: pointer = EnterFOWVisibility {}
                heightSolver: pointer = BlendedLinearHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 8.5
            missileSpeed: f32 = 3200
            mMissileEffectKey: hash = 0xfb6c0e87
            mLineWidth: f32 = 80
            0x63060019: link = 0xf5c8b537
            0x92a53e77: list[hash] = {
                0xcecc3fed
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_UrgotR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_UrgotR_SFX_events.bnk"
            }
            mTargetingTypeData: pointer = LocationClamped {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_UrgotR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_UrgotR_Name"
                        "keySummary" = "Spell_UrgotR_Summary"
                        "keyTooltip" = "Spell_UrgotR_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_UrgotR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Urgot"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "RBaseDamage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                2450
                                2450
                                2450
                                2450
                                2450
                                2450
                            }
                            mValueType: u32 = 1
                        }
                    }
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        minimumDisplayedRange: f32 = 2450
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                1550
                                1550
                                1550
                                1550
                                1550
                                1550
                            }
                            mValueType: u32 = 1
                        }
                    }
                    TargeterDefinitionMinimap {
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                2450
                                2450
                                2450
                                2450
                                2450
                                2450
                            }
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_UrgotR"
        }
    }
    0x9d5a8336 = SpellObject {
        mScriptName: string = "UltBook_UrgotRRecastMissileLongDistance"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4194468
            mAffectsTypeFlags: u32 = 4106
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Urgot_RRecast.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            cannotBeSuppressed: bool = true
            canCastWhileDisabled: bool = true
            canCastOrQueueWhileCasting: bool = true
            mCantCancelWhileWindingUp: bool = true
            mDoesntBreakChannels: bool = true
            mShowChannelBar: bool = false
            alwaysSnapFacing: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRadius: list[f32] = {
                210
                210
                210
                210
                210
                210
                210
            }
            castConeDistance: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 80
                movementComponent: pointer = FixedTimeMovement {
                    mTravelTime: f32 = 0.375
                    mStartBoneName: string = "Root_Body"
                    mTargetBoneName: string = "C_BUFFBONE_GLB_CHEST_LOC"
                }
                heightSolver: pointer = FollowTerrainHeightSolver {}
                verticalFacing: pointer = VeritcalFacingMatchVelocity {}
                behaviors: list[pointer] = {
                    CastOnMovementComplete {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 1
            castFrame: f32 = 8.5
            mMissileEffectKey: hash = 0x762e63c0
            mLineWidth: f32 = 80
            bHaveHitBone: bool = true
            mHitBoneName: string = "C_BUFFBONE_GLB_CHEST_LOC"
        }
    }
    0x9f73d12c = SpellObject {
        mScriptName: string = "UltBook_UrgotRSuppress"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_UrgotRSuppress"
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
        }
    }
    0xcd6148cb = SpellObject {
        mScriptName: string = "UltBook_UrgotRReel"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4194304
            mAffectsTypeFlags: u32 = 4106
            mAffectsStatusFlags: u32 = 32
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAnimationName: string = ""
            mImgIconName: list[string] = {
                "ASSETS/Characters/Urgot/HUD/Icons2D/Urgot_R.dds"
            }
            mCastTime: f32 = 1.5
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            cannotBeSuppressed: bool = true
            canCastWhileDisabled: bool = true
            mCantCancelWhileWindingUp: bool = true
            mCanMoveWhileChanneling: bool = true
            alwaysSnapFacing: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 8.5
        }
    }
    0xe68f23b0 = SpellObject {
        mScriptName: string = "UltBook_UrgotRSpellPassive"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_UrgotRFear"
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
        }
    }
    0xf5c8b537 = 0xefc7f35c {
        0x81cd26c4: file = 0x6c34356d88d9ffde
    }
    0x447c8bc2 = AbilityObject {
        mRootSpell: link = 0x02703201
        mChildSpells: list[link] = {
            0x02703201
            0x606a8f61
            0xd02cfdcc
            0xaed3cd68
            0x3a181a02
            0x987f596c
        }
        0x86ddaddb: bool = true
        mName: string = "UltBook_JhinR"
        mType: u8 = 2
    }
    0x02703201 = SpellObject {
        mScriptName: string = "UltBook_JhinR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 22538
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ChannelSpell"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "Damage"
                    mValues: list[f32] = {
                        -25
                        50
                        125
                        200
                        275
                        350
                        425
                    }
                    mBaseP: f32 = -25
                    mFormula: string = "P + 75"
                }
                SpellDataValue {
                    mName: string = "FourthShotMultiplier"
                    mValues: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                    mBaseP: f32 = 2
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "SlowPercent"
                    mValues: list[f32] = {
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                    }
                    mBaseP: f32 = 0.800000012
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "SlowDuration"
                    mValues: list[f32] = {
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                    }
                    mBaseP: f32 = 0.5
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "PercentMissingAmp"
                    mValues: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                    mBaseP: f32 = 3
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "MInimumDelayBetweenShots"
                    mValues: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                    mBaseP: f32 = 1
                    mFormula: string = "P"
                }
            }
            0x94572284: map[hash,pointer] = {
                "DamageCalc" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "Damage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.25
                            mStat: u8 = 2
                        }
                    }
                    0xcbcac618: u8 = 6
                }
                "MaxIncreaseCalc" = GameCalculationModified {
                    mModifiedGameCalculation: hash = "DamageCalc"
                    mMultiplier: pointer = SumOfSubPartsCalculationPart {
                        mSubparts: list[pointer] = {
                            NumberCalculationPart {
                                mNumber: f32 = 1
                            }
                            NamedDataValueCalculationPart {
                                mDataValue: hash = 0xc4f99250
                            }
                        }
                    }
                    0xcbcac618: u8 = 6
                }
            }
            mAnimationName: string = "Channel"
            mAnimationLoopName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Jhin_Square_0.dds"
                "ASSETS/Characters/Jhin/HUD/Icons2D/Jhin_R_Shot.dds"
                "ASSETS/Characters/Jhin/HUD/Icons2D/Jhin_R_Shot4.dds"
            }
            mCastTime: f32 = 1
            cooldownTime: list[f32] = {
                120
                120
                105
                90
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRangeDisplayOverride: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRadius: list[f32] = {
                550
                550
                550
                550
                550
                550
                550
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 5.17000008
            missileSpeed: f32 = 828.5
            0x63060019: link = 0xfcd9ef7b
            0x92a53e77: list[hash] = {
                0x8b17c8e9
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_JhinR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_JhinR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
            }
            mTargetingTypeData: pointer = Cone {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_JhinR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_JhinR_Name"
                        "keySummary" = "Spell_JhinR_Summary"
                        "keyTooltip" = "Spell_JhinR_Tooltip"
                        "keyPickChoiceName" = "game_character_displayname_Jhin"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Damage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                3500
                                3500
                                3500
                                3500
                                3500
                                3500
                            }
                            mValueType: u32 = 1
                        }
                    }
                    TargeterDefinitionMinimap {
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                3500
                                3500
                                3500
                                3500
                                3500
                                3500
                            }
                            mValueType: u32 = 2
                        }
                    }
                    TargeterDefinitionCone {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        coneAngleDegrees: option[f32] = {
                            28
                        }
                        coneRange: option[f32] = {
                            3500
                        }
                        textureConeOverrideName: string = "ASSETS/Characters/Jhin/HUD/Textures/Jhin_R_Cone_indicator.dds"
                    }
                }
            }
        }
    }
    0x3a181a02 = SpellObject {
        mScriptName: string = "UltBook_JhinRSight"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_JhinRSight"
        }
    }
    0x606a8f61 = SpellObject {
        mScriptName: string = "UltBook_JhinRShot"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 20490
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mSpellTags: list[string] = {
                "Trait_ChannelSpell"
                "Trait_Ultimate"
            }
            mCoefficient: f32 = 1
            mAnimationName: string = "Spell2"
            mImgIconName: list[string] = {
                "ASSETS/Characters/Jhin/HUD/Icons2D/Jhin_R_Shot.dds"
                ""
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mAmmoNotAffectedByCDR: bool = true
            mCantCancelWhileWindingUp: bool = true
            mDoesntBreakChannels: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRangeDisplayOverride: list[f32] = {
                3500
                3500
                3500
                3500
                3500
                3500
                3500
            }
            castRadius: list[f32] = {
                210
                210
                210
                210
                210
                210
                210
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 1.98000002
            missileSpeed: f32 = 1200
            mLineWidth: f32 = 80
            0x92a53e77: list[hash] = {
                0x8b17c8e9
            }
            mHitBoneName: string = "C_BUFFBONE_GLB_HEAD_LOC"
            selectionPriority: u32 = 2
            mTargetingTypeData: pointer = Location {}
            mClientData: embed = SpellDataResourceClient {
                0x375656dd: hash = "Characters/Jhin/Spells/JhinRAbility/JhinR"
                0x7d4a0e6e: hash = "Characters/Jhin/Spells/JhinRAbility/JhinR"
            }
        }
    }
    0x987f596c = SpellObject {
        mScriptName: string = "UltBook_JhinRSlow"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_JhinRSlow"
        }
    }
    0xaed3cd68 = SpellObject {
        mScriptName: string = "UltBook_JhinRShotMis4"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 6154
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        30
                        90
                        150
                        245
                        315
                        440
                        565
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        2.25
                        2.5
                        2.75
                        3
                        3.25
                        3.5
                        3.75
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 1.20000005
            mAnimationName: string = "Spell2"
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            mDoesntBreakChannels: bool = true
            mSpellRevealsChampion: bool = false
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                3500
                3500
                3500
                3500
                3500
                3500
                3500
            }
            castRangeDisplayOverride: list[f32] = {
                1175
                1175
                1175
                1175
                1175
                1175
                1175
            }
            castRadius: list[f32] = {
                100
                100
                100
                100
                100
                100
                100
            }
            castConeDistance: f32 = 100
            luaOnMissileUpdateDistanceInterval: f32 = 150
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 80
                movementComponent: pointer = FixedSpeedMovement {
                    mProjectTargetToCastRange: bool = true
                    mSpeed: f32 = 5000
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "C_Barrel_Flag1"
                }
                heightSolver: pointer = BlendedLinearHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 7.53000021
            missileSpeed: f32 = 10000
            mMissileEffectKey: hash = 0x31c4fabb
            mLineWidth: f32 = 80
            mHitEffectOrientType: u32 = 2
            0x92a53e77: list[hash] = {
                0x8b17c8e9
            }
            bHaveHitBone: bool = true
            mHitBoneName: string = "root"
            selectionPriority: u32 = 2
            mTargetingTypeData: pointer = Location {}
            mClientData: embed = SpellDataResourceClient {
                0x375656dd: hash = "Characters/Jhin/Spells/JhinRAbility/JhinR"
            }
        }
    }
    0xd02cfdcc = SpellObject {
        mScriptName: string = "UltBook_JhinRShotMis"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 6154
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        30
                        90
                        150
                        245
                        315
                        440
                        565
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        2.25
                        2.5
                        2.75
                        3
                        3.25
                        3.5
                        3.75
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 1.20000005
            mAnimationName: string = "Spell2"
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            mDoesntBreakChannels: bool = true
            mSpellRevealsChampion: bool = false
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                3500
                3500
                3500
                3500
                3500
                3500
                3500
            }
            castRangeDisplayOverride: list[f32] = {
                1175
                1175
                1175
                1175
                1175
                1175
                1175
            }
            castRadius: list[f32] = {
                100
                100
                100
                100
                100
                100
                100
            }
            castConeDistance: f32 = 100
            luaOnMissileUpdateDistanceInterval: f32 = 150
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 80
                movementComponent: pointer = FixedSpeedMovement {
                    mProjectTargetToCastRange: bool = true
                    mSpeed: f32 = 5000
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "C_Barrel_Flag1"
                }
                heightSolver: pointer = BlendedLinearHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 7.53000021
            missileSpeed: f32 = 10000
            mMissileEffectKey: hash = 0x43b2c586
            mLineWidth: f32 = 80
            mHitEffectOrientType: u32 = 2
            0x92a53e77: list[hash] = {
                0x8b17c8e9
            }
            bHaveHitBone: bool = true
            mHitBoneName: string = "root"
            selectionPriority: u32 = 2
            mTargetingTypeData: pointer = Location {}
            mClientData: embed = SpellDataResourceClient {
                0x375656dd: hash = "Characters/Jhin/Spells/JhinRAbility/JhinR"
            }
        }
    }
    0xfcd9ef7b = 0xefc7f35c {
        0x81cd26c4: file = 0xd5cb8007b4b70b66
    }
    0xcb3f2ce6 = AbilityObject {
        mRootSpell: link = 0x295a4545
        mChildSpells: list[link] = {
            0x295a4545
        }
        0x86ddaddb: bool = true
        mName: string = "UltBook_JarvanIVR"
        mType: u8 = 2
    }
    0x03aa247d = SpellObject {
        mScriptName: string = "UltBook_JarvanIVRAttack"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 7375
            mAlternateName: string = "JarvanIVCataclysm"
            mAnimationName: string = "Spell4"
            mImgIconName: list[string] = {
                "ASSETS/Characters/JarvanIV/HUD/Icons2D/JarvanIV_Cataclysm.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.400000006
            delayTotalTimePercent: f32 = -0.400000006
            canCastWhileDisabled: bool = true
            mCantCancelWhileWindingUp: bool = true
            useAnimatorFramerate: bool = true
            bHaveHitEffect: bool = true
            castRange: list[f32] = {
                800
                800
                800
                800
                800
                800
                800
            }
            castRadius: list[f32] = {
                100
                100
                100
                100
                100
                100
                100
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 30
            missileSpeed: f32 = 0
            0x92a53e77: list[hash] = {
                0xbc80e9ed
            }
            mHitEffectName: string = "globalhit_physical.troy"
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
    }
    0x229d8f37 = 0xefc7f35c {
        0x81cd26c4: file = 0xc39c8671bf6263ec
    }
    0x295a4545 = SpellObject {
        mScriptName: string = "UltBook_JarvanIVR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 4106
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "PositiveEffect_MoveBlock"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "BaseDamage"
                    mValues: list[f32] = {
                        75
                        200
                        325
                        450
                        575
                        700
                        825
                    }
                    mBaseP: f32 = 75
                    mFormula: string = "P + 125"
                }
                SpellDataValue {
                    mName: string = "WallDuration"
                    mValues: list[f32] = {
                        3.5
                        3.5
                        3.5
                        3.5
                        3.5
                        3.5
                        3.5
                    }
                    mBaseP: f32 = 3.5
                    mFormula: string = "P"
                }
            }
            0x94572284: map[hash,pointer] = {
                "DamageCalc" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "baseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 1.79999995
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                    }
                }
            }
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_JarvanIV_Square_0.dds"
            }
            cooldownTime: list[f32] = {
                0
                120
                105
                90
                8
                5
                0
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            useAnimatorFramerate: bool = true
            bIsToggleSpell: bool = true
            castRange: list[f32] = {
                650
                650
                650
                650
                650
                650
                700
            }
            castRadius: list[f32] = {
                210
                210
                210
                210
                210
                210
                210
            }
            castRadiusSecondary: list[f32] = {
                340
                340
                340
                340
                340
                340
                340
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 8
            missileSpeed: f32 = 0
            0x63060019: link = 0x229d8f37
            0x92a53e77: list[hash] = {
                0xbc80e9ed
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_JarvanIVR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_JarvanIVR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_JarvanIVR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_JarvanIVCataclysm_Name"
                        "keySummary" = "Spell_JarvanIVCataclysm_Summary"
                        "keyTooltip" = "Spell_JarvanIVCataclysm_Tooltip"
                        "keyPickChoiceName" = "game_character_displayname_JarvanIV"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "BaseDamage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 2
                        }
                        overrideRadius: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                340
                                340
                                340
                                340
                                340
                                340
                            }
                            mValueType: u32 = 2
                        }
                        textureRadiusOverrideName: string = "ASSETS/Spells/Textures/AOE_brand.dds"
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_JarvanIVCataclysm"
        }
    }
    0xa40a3b91 = AbilityObject {
        mRootSpell: link = 0x3aeb77f1
        mChildSpells: list[link] = {
            0x3aeb77f1
            0x046dee1c
            0x8d6e4692
        }
        mName: string = "UltBook_SkarnerR"
    }
    0x046dee1c = SpellObject {
        mScriptName: string = "UltBook_SkarnerImpaleVO"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_SionWPassive"
        }
    }
    0x1b7a5de6 = 0xefc7f35c {
        0x81cd26c4: file = 0x329426d08fbd6def
    }
    0x3aeb77f1 = SpellObject {
        mScriptName: string = "UltBook_SkarnerR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 4106
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "SkarnerImpale"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ImmobilizingCCSpell"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "RBaseDamage"
                    mValues: list[f32] = {
                        -20
                        20
                        60
                        100
                        140
                        180
                        220
                    }
                    mBaseP: f32 = -20
                    mFormula: string = "P + 40"
                }
                SpellDataValue {
                    mName: string = "RDuration"
                    mValues: list[f32] = {
                        1.75
                        1.75
                        1.75
                        1.75
                        1.75
                        1.75
                        1.75
                    }
                    mBaseP: f32 = 1.75
                }
            }
            0x94572284: map[hash,pointer] = {
                "MagicDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "RBaseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.5
                        }
                    }
                }
                "PhysicalDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.600000024
                            mStat: u8 = 2
                        }
                    }
                }
            }
            mAnimationName: string = "Channel"
            mAnimationLoopName: string = "Channel"
            mAnimationWinddownName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Skarner_Square.dds"
            }
            mCastTime: f32 = 0.25
            cooldownTime: list[f32] = {
                120
                120
                100
                80
                120
                120
                110
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            mCantCancelWhileChanneling: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                350
                350
                350
                350
                350
                350
                350
            }
            castRadius: list[f32] = {
                20
                20
                20
                20
                20
                20
                20
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 7.5
            missileSpeed: f32 = 0
            0x63060019: link = 0x1b7a5de6
            0x92a53e77: list[hash] = {
                0x7476c93c
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_SkarnerR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_SkarnerR_SFX_events.bnk"
            }
            selectionPriority: u32 = 1
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_SkarnerR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_SkarnerImpale_Name"
                        "keySummary" = "Spell_SkarnerImpale_Summary"
                        "keyTooltip" = "Spell_SkarnerImpale_Tooltip"
                        "keyPickChoiceName" = "game_character_displayname_Skarner"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "RBaseDamage"
                                    typeIndex: i32 = 2
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_SkarnerImpale"
        }
    }
    0x8d6e4692 = SpellObject {
        mScriptName: string = "UltBook_SkarnerImpaleBuff"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_SkarnerImpaleBuff"
        }
    }
    0x0508f22d = AbilityObject {
        mRootSpell: link = 0xb743d751
        mChildSpells: list[link] = {
            0xb743d751
        }
        mName: string = "UltBook_ShenR"
    }
    0x2ef3c150 = AbilityObject {
        mRootSpell: link = 0x05b2bc6f
        mChildSpells: list[link] = {
            0x05b2bc6f
            0xfdd6b372
            0x2e7d023d
        }
        mName: string = "UltBook_EvelynnR"
        mType: u8 = 2
    }
    0x05b2bc6f = SpellObject {
        mScriptName: string = "UltBook_EvelynnR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        0
                        125
                        250
                        375
                        500
                        650
                        775
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        1.39999998
                        1.39999998
                        1.39999998
                        1.39999998
                        1.39999998
                        1.39999998
                        1.39999998
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        150
                        150
                        225
                        300
                        300
                        300
                        300
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        5
                        5
                        4
                        3
                        3
                        3
                        3
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0.300000012
                        0.300000012
                        0.300000012
                        0.300000012
                        0.300000012
                        0.300000012
                        0.300000012
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        700
                        700
                        700
                        700
                        700
                        700
                        700
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        30
                        30
                        45
                        60
                        60
                        60
                        60
                    }
                }
                SpellEffectAmount {}
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "CritMultiplier"
                    mValues: list[f32] = {
                        2.4000001
                        2.4000001
                        2.4000001
                        2.4000001
                        2.4000001
                        2.4000001
                        2.4000001
                    }
                    mBaseP: f32 = 2.4000001
                }
            }
            0x94572284: map[hash,pointer] = {
                "Damage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        EffectValueCalculationPart {
                            mEffectIndex: i32 = 1
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.75
                        }
                    }
                }
                "CritDamage" = GameCalculationModified {
                    mModifiedGameCalculation: hash = "Damage"
                    mMultiplier: pointer = NamedDataValueCalculationPart {
                        mDataValue: hash = "CritMultiplier"
                    }
                }
            }
            mCoefficient: f32 = 0.75
            mCoefficient2: f32 = 0.0299999993
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Evelynn_Square.dds"
            }
            mCastTime: f32 = 0.349999994
            cooldownTime: list[f32] = {
                120
                120
                100
                80
                70
                80
                80
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            canCastOrQueueWhileCasting: bool = true
            mCantCancelWhileWindingUp: bool = true
            cantCastWhileRooted: bool = true
            alwaysSnapFacing: bool = true
            useAnimatorFramerate: bool = true
            bHaveHitEffect: bool = true
            mDoesNotConsumeMana: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRadius: list[f32] = {
                350
                350
                350
                350
                350
                350
                350
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 7.5
            missileSpeed: f32 = 1300
            mLineWidth: f32 = 80
            0x63060019: link = 0x2815ff31
            0x92a53e77: list[hash] = {
                0xa25c6133
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_EvelynnR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_EvelynnR_SFX_events.bnk"
            }
            mHitEffectKey: hash = 0x9cd54542
            bHaveHitBone: bool = true
            mHitBoneName: string = "C_BuffBone_Glb_Center_Loc"
            mFloatVarsDecimals: list[i32] = {
                0
                0
                1
                1
                1
                1
                1
                1
                1
                1
                1
                1
                1
                1
                1
                1
            }
            selectionPriority: u32 = 2
            mTargetingTypeData: pointer = LocationClamped {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_EvelynnR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_EvelynnR_Name"
                        "keySummary" = "Spell_EvelynnR_Summary"
                        "keyTooltip" = "Spell_EvelynnR_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_EvelynnR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Evelynn"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Effect%dAmount"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Effect%dAmount"
                                    typeIndex: i32 = 1
                                    multiplier: f32 = 2.4000001
                                    nameOverride: string = "Spell_ListType_EvelynnEmpoweredDamage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            distanceOffset: f32 = 100
                            orientationType: u32 = 3
                        }
                        textureOrientation: u32 = 3
                        constraintPosLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                            orientationType: u32 = 2
                        }
                        overrideRadius: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                450
                                450
                                450
                                450
                                450
                                450
                            }
                            mValueType: u32 = 1
                        }
                        textureRadiusOverrideName: string = "ASSETS/Maps/Particles/UltBook/SemicircleRangeIndicator.dds"
                    }
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            distanceOffset: f32 = -700
                            orientationType: u32 = 3
                        }
                        textureOrientation: u32 = 3
                        constraintPosLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                            orientationType: u32 = 2
                        }
                        overrideRadius: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                50
                                50
                                50
                                50
                                50
                                50
                            }
                            mValueType: u32 = 1
                        }
                    }
                    TargeterDefinitionLine {
                        startLocator: embed = DrawablePositionLocator {
                            orientationType: u32 = 3
                        }
                        endLocator: embed = DrawablePositionLocator {
                            distanceOffset: f32 = -700
                            orientationType: u32 = 3
                        }
                        fallbackDirection: u32 = 3
                        minimumDisplayedRange: f32 = 0
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                20
                                20
                                20
                                20
                                20
                                20
                            }
                            mValueType: u32 = 2
                        }
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                700
                                700
                                700
                                700
                                700
                                700
                            }
                            mValueType: u32 = 2
                        }
                        textureBaseOverrideName: string = "ASSETS/Spells/Textures/Lulu_Q_Skillshot_Base.dds"
                        textureTargetOverrideName: string = "ASSETS/Maps/Particles/UltBook/Lulu_Q_Skillshot_Tip.dds"
                        maxAngle: f32 = 40
                    }
                }
            }
        }
    }
    0x2815ff31 = 0xefc7f35c {
        0x81cd26c4: file = 0xa2c200671b7fb11e
    }
    0x2e7d023d = SpellObject {
        mScriptName: string = "UltBook_EvelynnRTrail"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 16384
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.134599999
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRadius: list[f32] = {
                100
                100
                100
                100
                100
                100
                100
            }
            castConeDistance: f32 = 100
            luaOnMissileUpdateDistanceInterval: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                movementComponent: pointer = FixedTimeMovement {
                    mTravelTime: f32 = 0.200000003
                    mTargetHeightAugment: f32 = 100
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "R_hand"
                }
                verticalFacing: pointer = VeritcalFacingMatchVelocity {}
                behaviors: list[pointer] = {
                    CastOnMovementComplete {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 1
            castFrame: f32 = 9.5
            missileSpeed: f32 = 2500
            mMissileEffectKey: hash = 0x21499901
            mHitEffectOrientType: u32 = 2
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Location {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
    }
    0xfdd6b372 = SpellObject {
        mScriptName: string = "UltBook_EvelynnRThresholdTracker"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_EvelynnEHaste"
        }
    }
    0xc9feadb8 = AbilityObject {
        mRootSpell: link = 0xa88653f1
        mChildSpells: list[link] = {
            0xa88653f1
        }
        0x86ddaddb: bool = true
        mName: string = "UltBook_PykeR"
        mType: u8 = 2
    }
    0x05bb4c89 = 0xefc7f35c {
        0x81cd26c4: file = 0xb10ef673e94b880a
    }
    0x0adebafe = SpellObject {
        mScriptName: string = "UltBook_PykeRSpellPassive"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 16384
            mImgIconName: list[string] = {
                "ASSETS/Characters/Pyke/HUD/Icons2D/PykeR.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.134599999
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRadius: list[f32] = {
                100
                100
                100
                100
                100
                100
                100
            }
            castConeDistance: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                movementComponent: pointer = FixedSpeedMovement {
                    mSpeed: f32 = 3000
                    mTargetHeightAugment: f32 = 100
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "R_hand"
                }
                heightSolver: pointer = FollowTerrainHeightSolver {
                    mHeightOffset: f32 = 100
                }
                verticalFacing: pointer = VeritcalFacingMatchVelocity {}
                behaviors: list[pointer] = {
                    CastOnMovementComplete {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 1
            castFrame: f32 = 9.5
            missileSpeed: f32 = 3000
            mHitEffectOrientType: u32 = 2
            0x92a53e77: list[hash] = {
                0x6427522b
            }
            bHaveHitBone: bool = true
            mHitBoneName: string = "C_BUFFBONE_GLB_CHEST_LOC"
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Location {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
    }
    0xa88653f1 = SpellObject {
        mScriptName: string = "UltBook_PykeR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 8192
            mAlternateName: string = "PykeR"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "RRecastDuration"
                    mValues: list[f32] = {
                        20
                        20
                        20
                        20
                        20
                        20
                        20
                    }
                    mBaseP: f32 = 20
                }
                SpellDataValue {
                    mName: string = "ReducedDamage"
                    mValues: list[f32] = {
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                    }
                    mBaseP: f32 = 0.5
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "DamageCap"
                    mValues: list[f32] = {
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                    }
                    mBaseP: f32 = 0.5
                }
            }
            0x94572284: map[hash,pointer] = {
                "RDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        ByCharLevelBreakpointsCalculationPart {
                            mLevel1Value: f32 = 250
                            mBreakpoints: list[embed] = {
                                Breakpoint {
                                    mLevel: u32 = 7
                                    0x57fdc438: f32 = 40
                                }
                                Breakpoint {
                                    mLevel: u32 = 10
                                    0x57fdc438: f32 = 30
                                }
                                Breakpoint {
                                    mLevel: u32 = 12
                                    0x57fdc438: f32 = 20
                                }
                                Breakpoint {
                                    mLevel: u32 = 17
                                    0x57fdc438: f32 = 10
                                }
                            }
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.800000012
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 1.5
                            mStat: u8 = 26
                        }
                    }
                    0xcbcac618: u8 = 5
                }
                0xb3c26649 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.800000012
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                    }
                    0xcbcac618: u8 = 5
                }
                "RLethalityDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 1.5
                            mStat: u8 = 26
                        }
                    }
                    0xcbcac618: u8 = 5
                }
                "RBaseDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        ByCharLevelBreakpointsCalculationPart {
                            mLevel1Value: f32 = 250
                            mBreakpoints: list[embed] = {
                                Breakpoint {
                                    mLevel: u32 = 7
                                    0x57fdc438: f32 = 40
                                }
                                Breakpoint {
                                    mLevel: u32 = 10
                                    0x57fdc438: f32 = 30
                                }
                                Breakpoint {
                                    mLevel: u32 = 12
                                    0x57fdc438: f32 = 20
                                }
                                Breakpoint {
                                    mLevel: u32 = 17
                                    0x57fdc438: f32 = 10
                                }
                            }
                        }
                    }
                }
                0xba40e56c = GameCalculationModified {
                    mModifiedGameCalculation: hash = "RDamage"
                    mMultiplier: pointer = NamedDataValueCalculationPart {
                        mDataValue: hash = 0x69ebc1b4
                    }
                    tooltipOnly: bool = true
                }
            }
            mCoefficient: f32 = 1.5
            mCoefficient2: f32 = 2
            mAnimationName: string = "None"
            mImgIconName: list[string] = {
                "UltBook_Pyke_Square_0.dds"
            }
            cooldownTime: list[f32] = {
                120
                120
                100
                80
                60
                40
                20
            }
            delayTotalTimePercent: f32 = -1
            mCantCancelWhileWindingUp: bool = true
            cantCastWhileRooted: bool = true
            mDoNotNeedToFaceTarget: bool = true
            castRange: list[f32] = {
                750
                750
                750
                750
                750
                750
                750
            }
            castFrame: f32 = 15
            0x63060019: link = 0x05bb4c89
            0x92a53e77: list[hash] = {
                0x6427522b
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
            }
            mTargetingTypeData: pointer = Location {}
            mSpellCooldownOrSealedQueueThreshold: option[f32] = {
                0.25
            }
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_PykeR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_PykeR_Name"
                        "keySummary" = "Spell_PykeR_Summary"
                        "keyTooltip" = "Spell_PykeR_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_PykeR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Pyke"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                    nameOverride: string = "Spell_ListType_Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                750
                                750
                                750
                                750
                                750
                                750
                            }
                            mValueType: u32 = 1
                        }
                    }
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        overrideRadius: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                250
                                250
                                250
                                250
                                250
                                250
                            }
                            mValueType: u32 = 1
                        }
                        textureRadiusOverrideName: string = "ASSETS/Characters/Pyke/HUD/Textures/Pyke_R_indicator.dds"
                    }
                }
            }
        }
    }
    0xf7e0c427 = SpellObject {
        mScriptName: string = "UltBook_PykeRTrail"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 16384
            mImgIconName: list[string] = {
                "ASSETS/Characters/Pyke/HUD/Icons2D/PykeR.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.134599999
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRadius: list[f32] = {
                100
                100
                100
                100
                100
                100
                100
            }
            castConeDistance: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                movementComponent: pointer = FixedSpeedMovement {
                    mSpeed: f32 = 3000
                    mTargetHeightAugment: f32 = 100
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "R_hand"
                }
                heightSolver: pointer = FollowTerrainHeightSolver {
                    mHeightOffset: f32 = 100
                }
                verticalFacing: pointer = VeritcalFacingMatchVelocity {}
                behaviors: list[pointer] = {
                    CastOnMovementComplete {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 1
            castFrame: f32 = 9.5
            missileSpeed: f32 = 3000
            mHitEffectOrientType: u32 = 2
            0x92a53e77: list[hash] = {
                0x6427522b
            }
            bHaveHitBone: bool = true
            mHitBoneName: string = "C_BUFFBONE_GLB_CHEST_LOC"
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Location {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
    }
    0x221eeaa6 = AbilityObject {
        mRootSpell: link = 0x37d346ed
        mChildSpells: list[link] = {
            0x37d346ed
            0x831208dd
            0x219a92cc
            0xb1643e6f
            0x9c899773
        }
        mName: string = "UltBook_RengarR"
    }
    0x06aa2877 = 0xefc7f35c {
        0x81cd26c4: file = 0x7ed2d2c485d7ccbd
    }
    0x219a92cc = SpellObject {
        mScriptName: string = "UltBook_RengarPassiveEmpowered"
        mSpell: pointer = SpellDataResource {
            mImgIconName: list[string] = {
                "UltBook_Rengar_Square_0.dds"
            }
        }
    }
    0x37d346ed = SpellObject {
        mScriptName: string = "UltBook_RengarR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 9221
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "RengarR"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "StealthDuration"
                    mValues: list[f32] = {
                        8
                        12
                        16
                        20
                        24
                        28
                        32
                    }
                    mBaseP: f32 = 8
                    mFormula: string = "P + 4"
                }
                SpellDataValue {
                    mName: string = "EnemyDetectionRange"
                    mValues: list[f32] = {
                        1600
                        1600
                        1600
                        1600
                        1600
                        1600
                        1600
                    }
                    mBaseP: f32 = 1600
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "SelfVisionRange"
                    mValues: list[f32] = {
                        2000
                        2500
                        3000
                        3500
                        4000
                        4500
                        5000
                    }
                    mBaseP: f32 = 2000
                    mFormula: string = "P + 500"
                }
                SpellDataValue {
                    mName: string = "SelfRevealRange"
                    mValues: list[f32] = {
                        750
                        750
                        750
                        750
                        750
                        750
                        750
                    }
                    mBaseP: f32 = 750
                }
                SpellDataValue {
                    mName: string = "StealthMS"
                    mValues: list[f32] = {
                        30
                        40
                        50
                        60
                        70
                        80
                        90
                    }
                    mBaseP: f32 = 30
                    mFormula: string = "P +10"
                }
                SpellDataValue {
                    mName: string = "FadeTime"
                    mValues: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                    mBaseP: f32 = 2
                }
                SpellDataValue {
                    mName: string = "ArmorShred"
                    mValues: list[f32] = {
                        6
                        12
                        18
                        24
                        30
                        36
                        42
                    }
                    mBaseP: f32 = 6
                    mFormula: string = "P + 6"
                }
                SpellDataValue {
                    mName: string = "ArmorShredDuration"
                    mValues: list[f32] = {
                        4
                        4
                        4
                        4
                        4
                        4
                        4
                    }
                    mBaseP: f32 = 4
                }
                SpellDataValue {
                    mName: string = "LeapRange"
                    mValues: list[f32] = {
                        725
                        725
                        725
                        725
                        725
                        725
                        725
                    }
                    mBaseP: f32 = 725
                }
            }
            0x94572284: map[hash,pointer] = {
                "BonusDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.5
                            mStat: u8 = 2
                        }
                    }
                }
            }
            mCoefficient: f32 = 0.5
            mCoefficient2: f32 = 0.600000024
            mAnimationName: string = "Spell1"
            mImgIconName: list[string] = {
                "UltBook_Rengar_Square_0.dds"
            }
            cooldownTime: list[f32] = {
                110
                110
                90
                70
                70
                70
                70
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = 0.183300003
            mCantCancelWhileWindingUp: bool = true
            bIsToggleSpell: bool = true
            castRange: list[f32] = {
                2500
                2500
                3000
                3500
                2500
                2500
                2500
            }
            castRadius: list[f32] = {
                75
                75
                75
                75
                75
                75
                75
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 0.144999996
            missileSpeed: f32 = 0
            0x63060019: link = 0x06aa2877
            0x92a53e77: list[hash] = {
                0x14fdf9ad
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_RengarR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_RengarR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            mTargetingTypeData: pointer = SelfAoe {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_RengarR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_RengarR_Name"
                        "keySummary" = "Spell_RengarR_Summary"
                        "keyTooltip" = "Spell_RengarR_Tooltip"
                        "keyCost" = "Spell_Cost_NoCost"
                        "keyTooltipExtendedBelowLine" = "Spell_RengarR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Rengar"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "ArmorShred"
                                    typeIndex: i32 = 8
                                    nameOverride: string = "Spell_ListType_ArmorReduction"
                                }
                                TooltipInstanceListElement {
                                    type: string = "StealthDuration"
                                    typeIndex: i32 = 2
                                    nameOverride: string = "Spell_ListType_Duration"
                                }
                                TooltipInstanceListElement {
                                    type: string = "StealthMS"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_MovementSpeed"
                                    Style: u32 = 1
                                }
                                TooltipInstanceListElement {
                                    type: string = "SelfVisionRange"
                                    typeIndex: i32 = 9
                                    nameOverride: string = "Spell_ListType_RengarTrackingRange"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionMinimap {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_RengarR"
        }
    }
    0x831208dd = SpellObject {
        mScriptName: string = "UltBook_RengarRShred"
        mSpell: pointer = SpellDataResource {
            mImgIconName: list[string] = {
                "UltBook_Rengar_Square_0.dds"
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_RengarRShred"
        }
    }
    0x9c899773 = SpellObject {
        mScriptName: string = "UltBook_RengarPassiveBuff"
        mSpell: pointer = SpellDataResource {
            mImgIconName: list[string] = {
                "UltBook_Rengar_Square_0.dds"
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_RengarPassiveBuff"
        }
    }
    0xb1643e6f = SpellObject {
        mScriptName: string = "UltBook_RengarPassiveBuffDash"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 6826
            mAlternateName: string = "RengarPassiveBuffDash"
            mEffectAmount: list[embed] = {
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {
                    value: list[f32] = {
                        800
                        800
                        800
                        800
                        800
                        800
                        800
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mAnimationName: string = ""
            mImgIconName: list[string] = {
                "UltBook_Rengar_Square_0.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            0xd55a37b5: pointer = OverrideAttackTimeData {
                0x20991541: pointer = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NumberCalculationPart {}
                    }
                }
                0x856a86cf: f32 = 0
            }
            castRange: list[f32] = {
                1000
                1000
                1000
                1000
                1000
                1000
                1000
            }
            castConeDistance: f32 = 100
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
    }
    0x1f91d747 = AbilityObject {
        mRootSpell: link = 0x63fea3d9
        mChildSpells: list[link] = {
            0x63fea3d9
            "Characters/Shaco/Spells/HallucinateFullAbility/Hallucinate"
            0x6d74f5b1
        }
        0x86ddaddb: bool = true
        mName: string = "UltBook_ShacoR"
        mType: u8 = 2
    }
    0x072a1c2c = SpellObject {
        mScriptName: string = "UltBook_ShacoRShacoPassive"
        mSpell: pointer = SpellDataResource {
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "PerUnitCD"
                    mValues: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                    mBaseP: f32 = 3
                }
                SpellDataValue {
                    mName: string = "MonsterCritMod"
                    mValues: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                    mBaseP: f32 = 2
                }
                SpellDataValue {
                    mName: string = "APRatio"
                    mValues: list[f32] = {
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                    }
                    mBaseP: f32 = 0.400000006
                }
                SpellDataValue {
                    mName: string = "CloneMult"
                    mValues: list[f32] = {
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                    }
                    mBaseP: f32 = 0.75
                }
                SpellDataValue {
                    mName: string = "ShivSlowAmount"
                    mValues: list[f32] = {
                        -0.400000006
                        -0.400000006
                        -0.400000006
                        -0.400000006
                        -0.400000006
                        -0.400000006
                        -0.400000006
                    }
                    mBaseP: f32 = -0.400000006
                }
                SpellDataValue {
                    mName: string = "ShredDuration"
                    mValues: list[f32] = {
                        4
                        4
                        4
                        4
                        4
                        4
                        4
                    }
                    mBaseP: f32 = 4
                }
                SpellDataValue {
                    mName: string = "ShivExecuteDamagePercent"
                    mValues: list[f32] = {
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                    }
                    mBaseP: f32 = 1.5
                }
            }
            0x94572284: map[hash,pointer] = {
                0x010aedc7 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        StatBySubPartCalculationPart {
                            mSubpart: pointer = SumOfSubPartsCalculationPart {
                                mSubparts: list[pointer] = {
                                    NamedDataValueCalculationPart {
                                        mDataValue: hash = 0xf95948bf
                                    }
                                    StatByCoefficientCalculationPart {
                                        mCoefficient: f32 = 1
                                        mStat: u8 = 8
                                        mStatFormula: u8 = 2
                                    }
                                }
                            }
                            mStat: u8 = 2
                        }
                        StatByNamedDataValueCalculationPart {
                            mDataValue: hash = "APRatio"
                        }
                    }
                }
                0x1b4326a0 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        ByCharLevelInterpolationCalculationPart {
                            mStartValue: f32 = 20
                            mEndValue: f32 = 35
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.150000006
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                    }
                }
                "ShivDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        ByCharLevelInterpolationCalculationPart {
                            mStartValue: f32 = 15
                            mEndValue: f32 = 50
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.100000001
                        }
                    }
                }
                0x3445d362 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 1
                            mStat: u8 = 8
                            mStatFormula: u8 = 1
                        }
                    }
                }
                0x36f2de93 = GameCalculationModified {
                    mModifiedGameCalculation: hash = "ShivDamage"
                    mMultiplier: pointer = NamedDataValueCalculationPart {
                        mDataValue: hash = 0x88b4e632
                    }
                }
            }
            mImgIconName: list[string] = {
                "ASSETS/Characters/Shaco/HUD/Icons2D/Jester_CarefulStrikes.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            castRange: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            0x92a53e77: list[hash] = {
                0x93b4276e
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
            }
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_ShacoRShacoPassive"
                    mFormat: link = "UX/Tooltips/Passive"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_ShacoPassive_Name"
                        "keyTooltip" = "Spell_ShacoPassive_Tooltip"
                        "keySummary" = "Spell_ShacoPassive_Summary"
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_Backstab"
        }
    }
    0x08e10e0f = SpellObject {
        mScriptName: string = "TrapLimiter_UltBook_Shaco"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_TrapLimiter"
        }
    }
    0x33c1eddd = SpellObject {
        mScriptName: string = "UltBook_ShacoRShacoWPlacementMissile"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 3076
            mAlternateName: string = "EzrealMysticShotMissile"
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        15
                        40
                        65
                        90
                        115
                        140
                        165
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        2.25
                        2.5
                        2.75
                        3
                        3.25
                        3.5
                        3.75
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 1.20000005
            mAnimationName: string = "Spell1"
            mImgIconName: list[string] = {
                ""
            }
            cooldownTime: list[f32] = {
                6.5
                6
                5.5
                5
                4.5
                4
                4
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            mProjectTargetToCastRange: bool = true
            castRange: list[f32] = {
                1200
                1200
                1200
                1200
                1200
                1200
                1200
            }
            castRangeDisplayOverride: list[f32] = {
                1175
                1175
                1175
                1175
                1175
                1175
                1175
            }
            castRadius: list[f32] = {
                100
                100
                100
                100
                100
                100
                100
            }
            castConeDistance: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 60
                movementComponent: pointer = FixedSpeedMovement {
                    mSpeed: f32 = 3000
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                    mOffsetInitialTargetHeight: f32 = 100
                }
                heightSolver: pointer = BlendedLinearHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 4
            missileSpeed: f32 = 3000
            mMissileEffectKey: hash = 0xecefc1f4
            mLineWidth: f32 = 60
            0x92a53e77: list[hash] = {
                0x93b4276e
            }
            bHaveHitBone: bool = true
            mHitBoneName: string = "root"
            selectionPriority: u32 = 2
            mTargetingTypeData: pointer = Location {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        hideWithLineIndicator: bool = true
                    }
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        lineStopsAtEndPosition: option[bool] = {
                            false
                        }
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                60
                                60
                                60
                                60
                                60
                                60
                            }
                            mValueType: u32 = 2
                        }
                    }
                }
            }
        }
    }
    0x63fea3d9 = SpellObject {
        mScriptName: string = "UltBook_ShacoR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 9221
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ChannelSpell"
                "Trait_ImmobilizingCCSpell"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {
                    value: list[f32] = {
                        6
                        6
                        6
                        6
                        6
                        6
                        6
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "TeleportRange"
                    mValues: list[f32] = {
                        150
                        150
                        150
                        150
                        150
                        150
                        150
                    }
                    mBaseP: f32 = 150
                }
                SpellDataValue {
                    mName: string = "STBaseDamage"
                    mValues: list[f32] = {
                        0
                        25
                        50
                        75
                        100
                        125
                        150
                    }
                    mFormula: string = "P + 25"
                }
                SpellDataValue {
                    mName: string = "AoEBaseDamage"
                    mValues: list[f32] = {
                        0
                        10
                        20
                        30
                        40
                        50
                        60
                    }
                    mFormula: string = "P + 10"
                }
                SpellDataValue {
                    mName: string = "CloneAADamagePercent"
                    mValues: list[f32] = {
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                    }
                    mBaseP: f32 = 0.600000024
                }
                SpellDataValue {
                    mName: string = "CloneIncomingDamagePercent"
                    mValues: list[f32] = {
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                    }
                    mBaseP: f32 = 0.5
                }
                SpellDataValue {
                    mName: string = "BoxFearDuration"
                    mValues: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                    mBaseP: f32 = 1
                }
                SpellDataValue {
                    mName: string = "ExplosionBaseDamage"
                    mValues: list[f32] = {
                        75
                        150
                        225
                        300
                        375
                        450
                        525
                    }
                    mBaseP: f32 = 75
                    mFormula: string = "P + 75"
                }
                SpellDataValue {
                    mName: string = "BoxArmTime"
                    mValues: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                    mBaseP: f32 = 2
                }
                SpellDataValue {
                    mName: string = "BoxLifetime"
                    mValues: list[f32] = {
                        6
                        6
                        6
                        6
                        6
                        6
                        6
                    }
                    mBaseP: f32 = 6
                }
                SpellDataValue {
                    mName: string = "CloneLifetime"
                    mValues: list[f32] = {
                        18
                        18
                        18
                        18
                        18
                        18
                        18
                    }
                    mBaseP: f32 = 18
                }
            }
            0x94572284: map[hash,pointer] = {
                0x92c7948f = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0x0bde30ee
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.150000006
                        }
                    }
                }
                "AoEDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0x2a9675cc
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.100000001
                        }
                    }
                }
                0x1c015117 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0x391134a0
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.699999988
                        }
                    }
                }
            }
            mAnimationName: string = "Taunt"
            mImgIconName: list[string] = {
                "ASSETS/Characters/Shaco/HUD/Icons2D/Jester_HallucinogenBomb.dds"
            }
            cooldownTime: list[f32] = {
                100
                100
                90
                80
                10
                10
                10
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            mDoNotNeedToFaceTarget: bool = true
            castRange: list[f32] = {
                200
                200
                200
                200
                200
                200
                200
            }
            castRadius: list[f32] = {
                100
                100
                100
                100
                100
                100
                100
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 56.7000008
            missileSpeed: f32 = 0
            0x63060019: link = 0x68eede0c
            0x92a53e77: list[hash] = {
                0x93b4276e
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_ShacoR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_ShacoR_SFX_events.bnk"
            }
            bHaveHitBone: bool = true
            mHitBoneName: string = "R_hand"
            selectionPriority: u32 = 2
            mTargetingTypeData: pointer = LocationClamped {}
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_ShacoR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_HallucinateFull_Name"
                        "keySummary" = "Spell_HallucinateFull_Summary"
                        "keyTooltip" = "Spell_HallucinateFull_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_HallucinateFull_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Shaco"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "ExplosionBaseDamage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_ShacoROnDeathDamage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "STBaseDamage"
                                    typeIndex: i32 = 6
                                    nameOverride: string = "Spell_ListType_ShacoRMiniBoxDamage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    0x68eede0c = 0xefc7f35c {
        0x81cd26c4: file = 0x4a949b1dda21b138
    }
    0x6d74f5b1 = SpellObject {
        mScriptName: string = "UltBook_ShacoRHallucinateGuide"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 36
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "HallucinateGuide"
            mSpellTags: list[string] = {
                "Trait_ChannelSpell"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        75
                        150
                        225
                        300
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        50
                        50
                        50
                        50
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        15
                        15
                        15
                        15
                        15
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        5
                        5
                        5
                        5
                        5
                        5
                        5
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0
                        25
                        50
                        75
                        75
                        75
                        100
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 1
            mCoefficient2: f32 = 0.150000006
            mAnimationName: string = "Spell4"
            mImgIconName: list[string] = {
                "ASSETS/Characters/Shaco/HUD/Icons2D/Jester_HallucinogenBomb_R.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            canCastWhileDisabled: bool = true
            mCantCancelWhileWindingUp: bool = true
            mDoesntBreakChannels: bool = true
            mSpellRevealsChampion: bool = false
            mUseMinimapTargeting: bool = true
            bIsToggleSpell: bool = true
            castRange: list[f32] = {
                20000
                20000
                20000
                20000
                20000
                20000
                20000
            }
            castRadius: list[f32] = {
                250.300003
                250.300003
                250.300003
                250.300003
                250.300003
                250.300003
                250.300003
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 20.7999992
            missileSpeed: f32 = 0
            0x92a53e77: list[hash] = {
                0x93b4276e
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Area {}
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_ShacoRHallucinateGuide"
                    mFormat: link = "UX/Tooltips/InheritedSpell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_HallucinateGuide_Name"
                        "keyTooltip" = "Spell_HallucinateGuide_Tooltip"
                        "keyCost" = "Spell_Cost_NoCost"
                        "keyCooldown" = "Spell_Cooldown_NoCooldown"
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionMinimap {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        textureRadiusOverrideName: string = "ASSETS/Spells/Textures/AOE.dds"
                    }
                }
            }
        }
    }
    0xbf0ca709 = SpellObject {
        mScriptName: string = "UltBook_ShacoRJackInTheBox"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 7375
            mSpellTags: list[string] = {
                "Trait_ImmobilizingCCSpell"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        20
                        35
                        50
                        65
                        80
                        95
                        110
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        100
                        200
                        300
                        400
                        500
                        600
                        700
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0.25
                        0.5
                        0.75
                        1
                        1.25
                        1.5
                        1.75
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        40
                        40
                        40
                        40
                        40
                        40
                        40
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "AoEBaseDamage"
                    mValues: list[f32] = {
                        5
                        10
                        15
                        20
                        25
                        30
                        35
                    }
                    mBaseP: f32 = 5
                    mFormula: string = "P + 5"
                }
                SpellDataValue {
                    mName: string = "STBaseDamage"
                    mValues: list[f32] = {
                        10
                        25
                        40
                        55
                        70
                        85
                        100
                    }
                    mBaseP: f32 = 10
                    mFormula: string = "P + 15"
                }
                SpellDataValue {
                    mName: string = "MinionFearDuration"
                    mValues: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                    mBaseP: f32 = 2
                }
                SpellDataValue {
                    mName: string = "MonsterBonusDamage"
                    mValues: list[f32] = {
                        0
                        10
                        20
                        30
                        40
                        50
                        60
                    }
                    mFormula: string = "P + 10"
                }
            }
            0x94572284: map[hash,pointer] = {
                "AoEDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0x2a9675cc
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.0900000036
                        }
                    }
                }
                0x92c7948f = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0x0bde30ee
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.180000007
                        }
                    }
                }
                0x37fb913e = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        EffectValueCalculationPart {
                            mEffectIndex: i32 = 4
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.0500000007
                        }
                    }
                }
            }
            mCoefficient: f32 = 0.200000003
            mCoefficient2: f32 = 0.0500000007
            mAnimationName: string = "Spell2"
            mImgIconName: list[string] = {
                "ASSETS/Characters/Shaco/HUD/Icons2D/Jester_DeathWard.dds"
            }
            cooldownTime: list[f32] = {
                16
                16
                16
                16
                16
                16
                16
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            castRange: list[f32] = {
                500
                500
                500
                500
                500
                500
                500
            }
            castRadius: list[f32] = {
                600
                600
                600
                600
                600
                600
                600
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 17.5
            missileSpeed: f32 = 1450
            0x92a53e77: list[hash] = {
                0x93b4276e
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Location {}
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_ShacoRJackInTheBox"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_JackInTheBox_Name"
                        "keySummary" = "Spell_JackInTheBox_Summary"
                        "keyTooltip" = "Spell_JackInTheBox_Tooltip"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 5
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "STBaseDamage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Effect%dAmount"
                                    typeIndex: i32 = 3
                                    nameOverride: string = "Spell_ListType_FearDuration"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cost"
                                }
                                TooltipInstanceListElement {
                                    type: string = "MonsterBonusDamage"
                                    nameOverride: string = "Spell_AlphaStrike_BonusMinionMonsterDamage"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                }
            }
        }
    }
    0xbf826385 = SpellObject {
        mScriptName: string = "UltBook_ShacoRTwoShivPoison"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "BaseDamage"
                    mValues: list[f32] = {
                        45
                        70
                        95
                        120
                        145
                        170
                        195
                    }
                    mBaseP: f32 = 45
                    mFormula: string = "P + 25"
                }
                SpellDataValue {
                    mName: string = "ExecuteDamagePercent"
                    mValues: list[f32] = {
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                    }
                    mBaseP: f32 = 1.5
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "ExecuteHealthThreshold"
                    mValues: list[f32] = {
                        0.300000012
                        0.300000012
                        0.300000012
                        0.300000012
                        0.300000012
                        0.300000012
                        0.300000012
                    }
                    mBaseP: f32 = 0.300000012
                }
                SpellDataValue {
                    mName: string = "SlowAmount"
                    mValues: list[f32] = {
                        -0.174999997
                        -0.200000003
                        -0.224999994
                        -0.25
                        -0.275000006
                        -0.300000012
                        -0.324999988
                    }
                    mBaseP: f32 = -0.174999997
                    mFormula: string = "P -.025"
                }
                SpellDataValue {
                    mName: string = "SlowDurationPassive"
                    mValues: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                    mBaseP: f32 = 2
                }
                SpellDataValue {
                    mName: string = "SlowDurationActive"
                    mValues: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                    mBaseP: f32 = 3
                }
            }
            0x94572284: map[hash,pointer] = {
                "TotalDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "baseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.699999988
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.5
                        }
                    }
                }
                0xff4bf141 = GameCalculationModified {
                    mModifiedGameCalculation: hash = "TotalDamage"
                    mMultiplier: pointer = NamedDataValueCalculationPart {
                        mDataValue: hash = 0xdd399966
                    }
                }
            }
            mImgIconName: list[string] = {
                "ASSETS/Characters/Shaco/HUD/Icons2D/Jester_IncrediblyPrecise.dds"
            }
            cooldownTime: list[f32] = {
                8
                8
                8
                8
                8
                8
                8
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            bHaveHitEffect: bool = true
            castRange: list[f32] = {
                625
                625
                625
                625
                625
                625
                625
            }
            castConeDistance: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                movementComponent: pointer = FixedSpeedMovement {
                    mSpeed: f32 = 1500
                    mTargetHeightAugment: f32 = 100
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "L_hand"
                }
                verticalFacing: pointer = VeritcalFacingMatchVelocity {}
                behaviors: list[pointer] = {
                    CastOnMovementComplete {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 1
            castFrame: f32 = 9
            missileSpeed: f32 = 1500
            mMissileEffectKey: hash = 0xb80b8fa9
            mHitEffectOrientType: u32 = 2
            0x92a53e77: list[hash] = {
                0x93b4276e
            }
            mHitEffectKey: hash = 0xe2b9e988
            mAfterEffectKey: hash = 0xf84c052b
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_ShacoRTwoShivPoison"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_TwoShivPoison_Name"
                        "keySummary" = "Spell_TwoShivPoison_Summary"
                        "keyTooltip" = "Spell_TwoShivPoison_Tooltip"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 5
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "BaseDamage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "SlowAmount"
                                    typeIndex: i32 = 4
                                    multiplier: f32 = -100
                                    nameOverride: string = "Spell_ListType_Slow"
                                    Style: u32 = 1
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                }
            }
        }
    }
    0x8a81e4ae = AbilityObject {
        mRootSpell: link = 0x774e5f8f
        mChildSpells: list[link] = {
            0x774e5f8f
        }
        mName: string = "UltBook_DianaR"
    }
    0x0815aaaf = 0xefc7f35c {
        0x81cd26c4: file = 0xb5a0623292d57669
    }
    0x774e5f8f = SpellObject {
        mScriptName: string = "UltBook_DianaR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 14346
            mAlternateName: string = "DianaVortex"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        -0.349999994
                        -0.349999994
                        -0.400000006
                        -0.449999988
                        -0.5
                        -0.550000012
                        -0.600000024
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        4
                        4
                        4
                        4
                        4
                        4
                        4
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "Damage"
                    mValues: list[f32] = {
                        100
                        200
                        300
                        400
                        500
                        600
                        700
                    }
                    mBaseP: f32 = 100
                    mFormula: string = "P + 100"
                }
                SpellDataValue {
                    mName: string = "Delay"
                    mValues: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                    mBaseP: f32 = 1
                }
                SpellDataValue {
                    mName: string = "SlowPotency"
                    mValues: list[f32] = {
                        -0.300000012
                        -0.400000006
                        -0.5
                        -0.600000024
                        -0.699999988
                        -0.800000012
                        -0.899999976
                    }
                    mBaseP: f32 = -0.300000012
                    mFormula: string = "P - 0.10"
                }
                SpellDataValue {
                    mName: string = "SlowDuration"
                    mValues: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                    mBaseP: f32 = 2
                }
                SpellDataValue {
                    mName: string = "SlowTooltip"
                    mValues: list[f32] = {
                        30
                        40
                        50
                        60
                        70
                        80
                        90
                    }
                    mBaseP: f32 = 30
                    mFormula: string = "P + 10"
                }
                SpellDataValue {
                    mName: string = "MultihitAmp"
                    mValues: list[f32] = {
                        10
                        35
                        60
                        85
                        110
                        135
                        160
                    }
                    mBaseP: f32 = 10
                    mFormula: string = "P + 25"
                }
            }
            0x94572284: map[hash,pointer] = {
                "RExplosionDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "Damage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.600000024
                        }
                    }
                }
                "RMultiHitAmplification" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0x8a4eacf3
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.150000006
                        }
                    }
                }
                "MaxDamage" = GameCalculationModified {
                    mModifiedGameCalculation: hash = "RMultiHitAmplification"
                    mMultiplier: pointer = NumberCalculationPart {
                        mNumber: f32 = 5
                    }
                    tooltipOnly: bool = true
                }
            }
            mCoefficient: f32 = 0.600000024
            mAnimationName: string = "Spell3"
            mImgIconName: list[string] = {
                "UltBook_Diana_Square_0.dds"
            }
            cooldownTime: list[f32] = {
                100
                100
                90
                80
                80
                80
                80
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            useAnimatorFramerate: bool = true
            bHaveHitEffect: bool = true
            bIsToggleSpell: bool = true
            castRange: list[f32] = {
                475
                475
                475
                475
                475
                475
                475
            }
            castRadius: list[f32] = {
                475
                475
                475
                475
                475
                475
                475
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 7.5
            missileSpeed: f32 = 0
            0x63060019: link = 0x0815aaaf
            0x92a53e77: list[hash] = {
                0xe3cb23a5
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_DianaR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_DianaR_SFX_events.bnk"
            }
            mHitEffectKey: hash = 0xba94ca1f
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            mTargetingTypeData: pointer = SelfAoe {}
            mSpellCooldownOrSealedQueueThreshold: option[f32] = {
                0.5
            }
            0x03f432a6: u8 = 1
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_DianaR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_DianaR_Name"
                        "keyTooltip" = "Spell_DianaR_Tooltip"
                        "keySummary" = "Spell_DianaR_Summary"
                        "keyPickChoiceName" = "game_character_displayname_Diana"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Damage"
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "SlowTooltip"
                                    nameOverride: string = "Spell_ListType_Slow"
                                    Style: u32 = 1
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "buff_desc_DianaVortex"
        }
    }
    0x0f1158be = AbilityObject {
        mRootSpell: link = 0x2382c3f1
        mChildSpells: list[link] = {
            0x2382c3f1
            0x08c23f87
            0xc6a683a9
        }
        mName: string = "UltBook_RellR"
    }
    0x08c23f87 = SpellObject {
        mScriptName: string = "UltBook_RellR_Damage"
        mBuff: pointer = BuffData {
            mDescription: string = "buff_desc_RellR_Damage"
        }
    }
    0x2382c3f1 = SpellObject {
        mScriptName: string = "UltBook_RellR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 8192
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ImmobilizingCCSpell"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "SelfSlow"
                    mValues: list[f32] = {
                        -0.349999994
                        -0.349999994
                        -0.349999994
                        -0.349999994
                        -0.349999994
                        -0.349999994
                        -0.349999994
                    }
                    mBaseP: f32 = -0.349999994
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "ShieldBase"
                    mValues: list[f32] = {
                        50
                        150
                        250
                        350
                        450
                        550
                        650
                    }
                    mBaseP: f32 = 50
                    mFormula: string = "P + 100"
                }
                SpellDataValue {
                    mName: string = "ShieldPerEnemyBase"
                    mValues: list[f32] = {
                        35
                        50
                        65
                        80
                        95
                        110
                        125
                    }
                    mBaseP: f32 = 35
                    mFormula: string = "P + 15"
                }
                SpellDataValue {
                    mName: string = "ShieldDuration"
                    mValues: list[f32] = {
                        4
                        4
                        4
                        4
                        4
                        4
                        4
                    }
                    mBaseP: f32 = 4
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "DamageReduction"
                    mValues: list[f32] = {
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                    }
                    mBaseP: f32 = 0.400000006
                    mFormula: string = "P + 0.00"
                }
                SpellDataValue {
                    mName: string = "DamageMinBase"
                    mValues: list[f32] = {
                        20
                        35
                        50
                        65
                        80
                        95
                        110
                    }
                    mBaseP: f32 = 20
                    mFormula: string = "P + 15"
                }
                SpellDataValue {
                    mName: string = "BaseDamage"
                    mValues: list[f32] = {
                        25
                        100
                        175
                        250
                        325
                        400
                        475
                    }
                    mBaseP: f32 = 25
                    mFormula: string = "P + 75"
                }
                SpellDataValue {
                    mName: string = "Duration"
                    mValues: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                    mBaseP: f32 = 2
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "BaseDamagePerSecond"
                    mValues: list[f32] = {
                        20
                        60
                        100
                        140
                        180
                        220
                        260
                    }
                    mBaseP: f32 = 20
                    mFormula: string = "P +  40"
                }
            }
            0x94572284: map[hash,pointer] = {
                "Damage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "baseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.300000012
                        }
                    }
                }
                "DamagePerSecond" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0x27fb6084
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.550000012
                        }
                    }
                }
                "TotalDamage" = GameCalculationModified {
                    mModifiedGameCalculation: hash = "DamagePerSecond"
                    mMultiplier: pointer = NamedDataValueCalculationPart {
                        mDataValue: hash = "duration"
                    }
                    tooltipOnly: bool = true
                }
            }
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Rell_Square.dds"
            }
            mCastTime: f32 = 0.25
            cooldownTime: list[f32] = {
                120
                120
                100
                80
                80
                80
                80
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            mCanTriggerChargeSpellWhileDisabled: bool = true
            mCantCancelWhileWindingUp: bool = true
            alwaysSnapFacing: bool = true
            useAnimatorFramerate: bool = true
            bIsToggleSpell: bool = true
            mDoNotNeedToFaceTarget: bool = true
            mHideRangeIndicatorWhenCasting: bool = true
            castRange: list[f32] = {
                200
                200
                200
                200
                200
                200
                200
            }
            0x63060019: link = 0x302ccb1f
            0x92a53e77: list[hash] = {
                0x2a02a5f5
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_RellR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_RellR_SFX_events.bnk"
            }
            mTargetingTypeData: pointer = SelfAoe {}
            0x03f432a6: u8 = 1
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_RellR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_RellR_Name"
                        "keyTooltip" = "Spell_RellR_Tooltip"
                        "keySummary" = "Spell_RellR_Summary"
                        "keyPickChoiceName" = "game_character_displayname_Rell"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                    nameOverride: string = "Spell_ListType_Cooldown"
                                }
                                TooltipInstanceListElement {
                                    type: string = "BaseDamagePerSecond"
                                    nameOverride: string = "Spell_ListType_DamagePerSecond"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                400
                                400
                                400
                                400
                                400
                                400
                            }
                            mValueType: u32 = 1
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "buff_desc_RellR"
        }
    }
    0x302ccb1f = 0xefc7f35c {
        0x81cd26c4: file = 0x329475003d6211e5
    }
    0xc6a683a9 = SpellObject {
        mScriptName: string = "UltBook_RellR_StartPull"
        mBuff: pointer = BuffData {
            mDescription: string = "buff_desc_RellR_StartPull"
        }
    }
    0x81ede021 = AbilityObject {
        mRootSpell: link = 0x0940d411
        mChildSpells: list[link] = {
            0x0940d411
            0x9cff8888
            0x0b0874d9
        }
        mName: string = "UltBook_ZoeR"
    }
    0x0940d411 = SpellObject {
        mScriptName: string = "UltBook_ZoeR"
        mSpell: pointer = SpellDataResource {
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_NonDamaging"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        -0.300000012
                        -0.300000012
                        -0.400000006
                        -0.5
                        -0.600000024
                        -0.699999988
                        -0.699999988
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        1.5
                        1.5
                        2
                        2.5
                        3
                        3.5
                        3.5
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        4
                        4
                        4
                        4
                        4
                        4
                        4
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        100
                        100
                        200
                        300
                        300
                        300
                        300
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 0.600000024
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Zoe_Square.dds"
                ""
            }
            mCastTime: f32 = 0.25
            cooldownTime: list[f32] = {
                11
                11
                8
                5
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            mCantCancelWhileWindingUp: bool = true
            cantCastWhileRooted: bool = true
            mChannelIsInterruptedByDisables: bool = false
            mChannelIsInterruptedByAttacking: bool = false
            mShowChannelBar: bool = false
            useAnimatorFramerate: bool = true
            mDoesNotConsumeCooldown: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRangeDisplayOverride: list[f32] = {
                575
                575
                575
                575
                575
                575
                575
            }
            castRadius: list[f32] = {
                100
                100
                100
                100
                100
                100
                100
            }
            castConeAngle: f32 = 0
            castConeDistance: f32 = 0
            castFrame: f32 = 9
            missileSpeed: f32 = 0
            0x63060019: link = 0xdffb82d6
            0x92a53e77: list[hash] = {
                0x28e4b90c
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_ZoeR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_ZoeR_SFX_events.bnk"
            }
            mTargetingTypeData: pointer = Location {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_ZoeR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_ZoeR_Name"
                        "keySummary" = "Spell_ZoeR_Summary"
                        "keyTooltip" = "Spell_ZoeR_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_ZoeR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Zoe"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        textureRadiusOverrideName: string = "ASSETS/Spells/Textures/AOE.dds"
                    }
                }
            }
        }
    }
    0x0b0874d9 = SpellObject {
        mScriptName: string = "UltBook_ZoeRVFXTrail"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 16384
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.134599999
            bHaveHitEffect: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRadius: list[f32] = {
                100
                100
                100
                100
                100
                100
                100
            }
            castConeDistance: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                movementComponent: pointer = FixedSpeedMovement {
                    mSpeed: f32 = 5000
                    mTargetHeightAugment: f32 = 100
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "R_hand"
                }
                verticalFacing: pointer = VeritcalFacingMatchVelocity {}
                behaviors: list[pointer] = {
                    CastOnMovementComplete {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 1
            castFrame: f32 = 9.5
            missileSpeed: f32 = 12000
            mHitEffectOrientType: u32 = 2
            0x92a53e77: list[hash] = {
                0x28e4b90c
            }
            mHitEffectName: string = "None"
            bHaveHitBone: bool = true
            mHitBoneName: string = "C_BUFFBONE_GLB_CHEST_LOC"
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Location {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
    }
    0x9cff8888 = SpellObject {
        mScriptName: string = "UltBook_ZoeRv7Atk"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "ZoeRv7"
            mAnimationName: string = "None"
            mImgIconName: list[string] = {
                "Annie_Disintegrate.dds"
            }
            mCastTime: f32 = 0.25
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRadius: list[f32] = {
                710
                710
                710
                710
                710
                710
                710
            }
            castConeDistance: f32 = 100
            luaOnMissileUpdateDistanceInterval: f32 = 51
            mMissileSpec: pointer = MissileSpecification {
                movementComponent: pointer = FixedSpeedMovement {
                    mSpeed: f32 = 1400
                    mTargetHeightAugment: f32 = 100
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "spine"
                }
                verticalFacing: pointer = VeritcalFacingMatchVelocity {}
                behaviors: list[pointer] = {
                    CastOnMovementComplete {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 1
            castFrame: f32 = 7.5
            missileSpeed: f32 = 1400
            mMissileEffectKey: hash = 0x28925880
            0x92a53e77: list[hash] = {
                0x28e4b90c
            }
            bHaveHitBone: bool = true
            mHitBoneName: string = "C_BUFFBONE_GLB_CHEST_LOC"
            selectionPriority: u32 = 1
        }
    }
    0xdffb82d6 = 0xefc7f35c {
        0x81cd26c4: file = 0x4f7ca1fa02a8d161
    }
    0x49176541 = AbilityObject {
        mRootSpell: link = 0xfd0e8051
        mChildSpells: list[link] = {
            0xfd0e8051
            0x73ae26b1
            0x6eb04b64
            0x09ae8a17
            0x351c7697
        }
        mName: string = "UltBook_AzirR"
    }
    0x09ae8a17 = SpellObject {
        mScriptName: string = "UltBook_AzirRunCycleManager"
    }
    0x351c7697 = SpellObject {
        mScriptName: string = "UltBook_AzirSoldierRMissile"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 6155
            mAlternateName: string = "AzirQ"
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            mCantCancelWhileWindingUp: bool = true
            mProjectTargetToCastRange: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            luaOnMissileUpdateDistanceInterval: f32 = 51
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 60
                movementComponent: pointer = FixedSpeedMovement {
                    mSpeed: f32 = 1000
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                    mOffsetInitialTargetHeight: f32 = 100
                }
                heightSolver: pointer = BlendedLinearHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            missileSpeed: f32 = 1000
            mMissileEffectKey: hash = 0x433b875d
            mLineWidth: f32 = 60
            0x92a53e77: list[hash] = {
                0x397e7d2c
            }
            mHitBoneName: string = "C_BUFFBONE_GLB_CHEST_LOC"
            mTargetingTypeData: pointer = Area {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                    }
                }
            }
        }
    }
    0x438e8cf6 = 0xefc7f35c {
        0x81cd26c4: file = 0x849ce0a105861de9
    }
    0x6eb04b64 = SpellObject {
        mScriptName: string = "UltBook_AzirRHaste"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_AzirRHaste"
        }
    }
    0x73ae26b1 = SpellObject {
        mScriptName: string = "UltBook_AzirRBump"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_AzirRBump"
        }
    }
    0xfd0e8051 = SpellObject {
        mScriptName: string = "UltBook_AzirR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 15567
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ImmobilizingCCSpell"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        175
                        175
                        325
                        475
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {
                    value: list[f32] = {
                        6
                        6
                        7
                        8
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        5
                        5
                        5
                        5
                        5
                        5
                        5
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "BaseDamage"
                    mValues: list[f32] = {
                        25
                        175
                        325
                        475
                        625
                        775
                        925
                    }
                    mBaseP: f32 = 25
                    mFormula: string = "P + 150"
                }
                SpellDataValue {
                    mName: string = "WallDuration"
                    mValues: list[f32] = {
                        5
                        5
                        5
                        5
                        5
                        5
                        5
                    }
                    mBaseP: f32 = 5
                }
                SpellDataValue {
                    mName: string = "NumberOfSoldiers"
                    mValues: list[f32] = {
                        5
                        6
                        7
                        8
                        9
                        10
                        11
                    }
                    mBaseP: f32 = 5
                    mFormula: string = "P + 1"
                }
            }
            0x94572284: map[hash,pointer] = {
                "TotalDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "baseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.600000024
                        }
                    }
                }
            }
            mCoefficient: f32 = 0.600000024
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Azir_Square.dds"
            }
            mCastTime: f32 = 0.5
            cooldownTime: list[f32] = {
                140
                120
                105
                90
                90
                90
                90
            }
            mCantCancelWhileWindingUp: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRangeDisplayOverride: list[f32] = {
                250
                250
                250
                250
                250
                250
                250
            }
            castFrame: f32 = 15
            0x63060019: link = 0x438e8cf6
            0x92a53e77: list[hash] = {
                0x397e7d2c
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_AzirR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_AzirR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            mTargetingTypeData: pointer = Area {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_AzirR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_AzirR_Name"
                        "keySummary" = "Spell_AzirR_Summary"
                        "keyTooltip" = "Spell_AzirR_Tooltip"
                        "keyPickChoiceName" = "game_character_displayname_Azir"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Effect%dAmount"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Effect%dAmount"
                                    typeIndex: i32 = 3
                                    nameOverride: string = "Spell_ListType_AzirRNumberofSoldiers"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionWall {
                        centerLocator: embed = DrawablePositionLocator {
                            distanceOffset: f32 = 400
                            orientationType: u32 = 3
                        }
                        thickness: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                190
                                190
                                190
                                190
                                190
                                190
                            }
                            mValueType: u32 = 2
                        }
                        length: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                700
                                810
                                930
                                0
                                0
                                0
                            }
                            mValueType: u32 = 2
                        }
                    }
                    TargeterDefinitionLine {
                        startLocator: embed = DrawablePositionLocator {
                            distanceOffset: f32 = -300
                            orientationType: u32 = 3
                        }
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        lineStopsAtEndPosition: option[bool] = {
                            true
                        }
                        minimumDisplayedRange: f32 = 900
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                290
                                345
                                390
                                0
                                0
                                0
                            }
                            mValueType: u32 = 2
                        }
                        textureBaseOverrideName: string = "ASSETS/Characters/Azir/HUD/Textures/LineRangeIndicator.dds"
                        textureTargetOverrideName: string = "ASSETS/Spells/Textures/blank.dds"
                    }
                }
            }
        }
    }
    0xabcaa6a2 = AbilityObject {
        mRootSpell: link = 0xd7fcfec9
        mChildSpells: list[link] = {
            0xd7fcfec9
        }
        mName: string = "UltBook_TryndamereR"
    }
    0x0b74a45b = 0xefc7f35c {
        0x81cd26c4: file = 0x49d77b069c908800
    }
    0xd7fcfec9 = SpellObject {
        mScriptName: string = "UltBook_TryndamereR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 20
            mAffectsTypeFlags: u32 = 9221
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mSpellTags: list[string] = {
                "SpecialCase_StasisLocked"
                "Trait_Ultimate"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        50
                        50
                        75
                        100
                        100
                        100
                        100
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        30
                        30
                        50
                        70
                        70
                        70
                        70
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        5
                        5
                        5
                        5
                        5
                        5
                        5
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "TryndRFuryGain"
                    mValues: list[f32] = {
                        50
                        50
                        75
                        100
                        125
                        150
                        175
                    }
                    mBaseP: f32 = 50
                    mFormula: string = "25+N*25"
                }
                SpellDataValue {
                    mName: string = "TryndRMinHealth"
                    mValues: list[f32] = {
                        30
                        30
                        50
                        70
                        90
                        110
                        130
                    }
                    mBaseP: f32 = 30
                    mFormula: string = "10+N*20"
                }
                SpellDataValue {
                    mName: string = "TryndRDuration"
                    mValues: list[f32] = {
                        5
                        5
                        5
                        5
                        5
                        5
                        5
                    }
                    mBaseP: f32 = 5
                }
            }
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Tryndamere_Square.dds"
            }
            cooldownTime: list[f32] = {
                110
                110
                100
                90
                90
                90
                90
            }
            cannotBeSuppressed: bool = true
            canCastWhileDisabled: bool = true
            mCantCancelWhileWindingUp: bool = true
            castRadius: list[f32] = {
                20
                20
                20
                20
                20
                20
                20
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 4.17999983
            0x63060019: link = 0x0b74a45b
            0x92a53e77: list[hash] = {
                0x60c346c9
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_TryndamereR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_TryndamereR_SFX_events.bnk"
            }
            mTargetingTypeData: pointer = Self {}
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_TryndamereR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_UndyingRage_Name"
                        "keySummary" = "Spell_UndyingRage_Summary"
                        "keyTooltip" = "Spell_UndyingRage_Tooltip"
                        "keyCost" = "Spell_Cost_NoCost"
                        "keyTooltipExtendedBelowLine" = "Spell_UndyingRage_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Tryndamere"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Effect%dAmount"
                                    typeIndex: i32 = 2
                                    nameOverride: string = "Spell_ListType_MinimumHealth"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Effect%dAmount"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_TryndamereFuryGained"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    0x8a0323ff = AbilityObject {
        mRootSpell: link = 0x9eb66429
        mChildSpells: list[link] = {
            0x9eb66429
            0xc9fd6e30
        }
        mName: string = "UltBook_MalzaharR"
    }
    0x0c2a1434 = 0xefc7f35c {
        0x81cd26c4: file = 0x04787cb6d63b6178
    }
    0x9eb66429 = SpellObject {
        mScriptName: string = "UltBook_MalzaharR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 4106
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ChannelSpell"
                "Trait_ImmobilizingCCSpell"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        2
                        2
                        3
                        4
                        4
                        4
                        4
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0
                        120
                        100
                        80
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        5
                        5
                        5
                        5
                        5
                        5
                        5
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        120
                        120
                        120
                        120
                        120
                        120
                        120
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        10
                        10
                        10
                        10
                        10
                        10
                        10
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        125
                        125
                        200
                        275
                        275
                        275
                        275
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        1250
                        1250
                        1250
                        1250
                        1250
                        1250
                        1250
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            0x94572284: map[hash,pointer] = {
                0x5330b2fd = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        ProductOfSubPartsCalculationPart {
                            mPart1: pointer = EffectValueCalculationPart {
                                mEffectIndex: i32 = 3
                            }
                            mPart2: pointer = EffectValueCalculationPart {
                                mEffectIndex: i32 = 1
                            }
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.0250000004
                        }
                    }
                    mDisplayAsPercent: bool = true
                    mMultiplier: pointer = NumberCalculationPart {
                        mNumber: f32 = 0.00999999978
                    }
                    0xcbcac618: u8 = 6
                }
                0xf2cbde43 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        EffectValueCalculationPart {
                            mEffectIndex: i32 = 7
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.800000012
                        }
                    }
                    0xcbcac618: u8 = 6
                }
            }
            mCoefficient: f32 = 0.00499999989
            mCoefficient2: f32 = 0.800000012
            mAnimationName: string = "Channel"
            mAnimationLoopName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Malzahar_Square.dds"
            }
            cooldownTime: list[f32] = {
                140
                140
                110
                80
                80
                80
                80
            }
            delayCastOffsetPercent: f32 = -0.99000001
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            bHaveHitEffect: bool = true
            mDoesNotConsumeMana: bool = true
            castRange: list[f32] = {
                700
                700
                700
                700
                700
                700
                700
            }
            castRadius: list[f32] = {
                280
                280
                280
                280
                280
                280
                280
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 7.5
            missileSpeed: f32 = 0
            0x63060019: link = 0x0c2a1434
            0x92a53e77: list[hash] = {
                0xafc8d2b6
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_MalzharR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_MalzharR_SFX_events.bnk"
            }
            mHitEffectKey: hash = 0x055a79e9
            selectionPriority: u32 = 1
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_MalzaharR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_MalzaharR_Name"
                        "keySummary" = "Spell_MalzaharR_Summary"
                        "keyTooltip" = "Spell_MalzaharR_Tooltip"
                        "keyPickChoiceName" = "game_character_displayname_Malzahar"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Effect%dAmount"
                                    typeIndex: i32 = 7
                                    nameOverride: string = "Spell_ListType_MalzaharNetherGraspDamage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Effect%dAmount"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_MalzaharNullZoneDamage"
                                    Style: u32 = 1
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 2
                        }
                        constraintPosLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 2
                        }
                        constraintRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                280
                                280
                                280
                                280
                                280
                                280
                            }
                            mValueType: u32 = 1
                        }
                    }
                    TargeterDefinitionRange {}
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_MalzaharR"
        }
    }
    0xc9fd6e30 = SpellObject {
        mScriptName: string = "UltBook_MalzaharRSound"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_MalzaharRSound"
        }
    }
    0x1028dec4 = AbilityObject {
        mRootSpell: link = 0x174a05af
        mChildSpells: list[link] = {
            0x174a05af
            0x81d5aa84
            0xcaae8297
        }
        mName: string = "UltBook_CamilleR"
    }
    0x11415946 = AbilityObject {
        mRootSpell: link = 0x19720001
        mChildSpells: list[link] = {
            0x19720001
            0xf7c30601
            0x4ca098f6
            0xa346c1bc
            0x6b4c3b3f
            0x471b8754
        }
        mName: string = "UltBook_ViR"
    }
    0x12598368 = AbilityObject {
        mRootSpell: link = 0xaea150a3
        mChildSpells: list[link] = {
            0xaea150a3
            0xf5576122
            0xf3e00eb0
            0x9c7e1b50
        }
        mName: string = "UltBook_MissFortuneR"
    }
    0xbcdbf766 = AbilityObject {
        mRootSpell: link = 0x4abbf5b9
        mChildSpells: list[link] = {
            0x4abbf5b9
            0x128657b6
        }
        mName: string = "UltBook_GragasR"
    }
    0x128657b6 = SpellObject {
        mScriptName: string = "UltBook_GragasRBoom"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4194308
            mAffectsTypeFlags: u32 = 7183
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        50
                        80
                        110
                        140
                        170
                        200
                        230
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        13
                        12
                        11
                        10
                        9
                        8
                        7
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 0.400000006
            mAnimationName: string = "Spell4"
            mImgIconName: list[string] = {
                "ASSETS/Characters/Gragas/HUD/Icons2D/GragasExplosiveCask.dds"
            }
            cooldownTime: list[f32] = {
                13
                12
                11
                10
                9
                8
                8
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            mCantCancelWhileChanneling: bool = true
            castRange: list[f32] = {
                1300
                1300
                1300
                1300
                1300
                1300
                1300
            }
            castRadius: list[f32] = {
                210
                210
                210
                210
                210
                210
                210
            }
            castConeDistance: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 120
                movementComponent: pointer = FixedTimeMovement {
                    mTravelTime: f32 = 0.550000012
                    mTargetHeightAugment: f32 = 30
                    mOffsetInitialTargetHeight: f32 = 30
                    mStartBoneName: string = "head"
                }
                heightSolver: pointer = GravityHeightSolver {
                    mGravity: f32 = 7000
                }
                verticalFacing: pointer = VeritcalFacingMatchVelocity {}
                behaviors: list[pointer] = {
                    CastOnMovementComplete {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 1
            castFrame: f32 = 30.6000004
            missileSpeed: f32 = 1800
            mMissileEffectKey: hash = 0x9ff1f88e
            mLineWidth: f32 = 120
            0x92a53e77: list[hash] = {
                0x1da39d6d
            }
            bHaveHitBone: bool = true
            mHitBoneName: string = "pelvis"
            mTargetingTypeData: pointer = Location {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        hideWithLineIndicator: bool = true
                    }
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        lineStopsAtEndPosition: option[bool] = {
                            false
                        }
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                120
                                120
                                120
                                120
                                120
                                120
                            }
                            mValueType: u32 = 2
                        }
                    }
                }
            }
        }
    }
    0x4abbf5b9 = SpellObject {
        mScriptName: string = "UltBook_GragasR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4194304
            mAffectsTypeFlags: u32 = 7183
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ImmobilizingCCSpell"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        0
                        200
                        300
                        400
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        900
                        900
                        900
                        900
                        900
                        900
                        900
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "BaseDamage"
                    mValues: list[f32] = {
                        100
                        200
                        300
                        400
                        500
                        600
                        700
                    }
                    mBaseP: f32 = 100
                    mFormula: string = "P + 100"
                }
                SpellDataValue {
                    mName: string = "APRatio"
                    mValues: list[f32] = {
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                    }
                    mBaseP: f32 = 0.800000012
                }
            }
            0x94572284: map[hash,pointer] = {
                0xed325470 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "baseDamage"
                        }
                        StatByNamedDataValueCalculationPart {
                            mDataValue: hash = "APRatio"
                        }
                    }
                }
            }
            mCoefficient: f32 = 0.800000012
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Gragas_Square.dds"
            }
            mCastTime: f32 = 0.25
            cooldownTime: list[f32] = {
                120
                120
                100
                80
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                1050
                1050
                1050
                1050
                1050
                1050
                1050
            }
            castRangeDisplayOverride: list[f32] = {
                1000
                1000
                1000
                1000
                1000
                1000
                1000
            }
            castRadius: list[f32] = {
                350
                350
                350
                350
                350
                350
                350
            }
            castConeDistance: f32 = 100
            castTargetAdditionalUnitsRadius: f32 = 400
            castFrame: f32 = 7.5
            missileSpeed: f32 = 200
            mLineWidth: f32 = 120
            0x63060019: link = 0x8651c6b7
            0x92a53e77: list[hash] = {
                0x1da39d6d
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_GragasR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_GragasR_SFX_events.bnk"
            }
            bHaveHitBone: bool = true
            mHitBoneName: string = "pelvis"
            selectionPriority: u32 = 2
            mTargetingTypeData: pointer = Area {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_GragasR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_GragasR_Name"
                        "keySummary" = "Spell_GragasR_Summary"
                        "keyTooltip" = "Spell_GragasR_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_GragasR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Gragas"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "BaseDamage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        textureRadiusOverrideName: string = "ASSETS/Spells/Textures/AOE.dds"
                    }
                }
            }
        }
    }
    0x8651c6b7 = 0xefc7f35c {
        0x81cd26c4: file = 0xabe19545e7045446
    }
    0xb38eee6a = AbilityObject {
        mRootSpell: link = 0x7b8a2ecb
        mChildSpells: list[link] = {
            0x7b8a2ecb
            0x6b3bee4a
            0xc56c3bf1
            0x8c6213f9
            0x38f222e5
            0x12fd59e5
            0x5e5f546a
            0xddd0ade6
        }
        mName: string = "UltBook_LissandraR"
    }
    0x12fd59e5 = SpellObject {
        mScriptName: string = "UltBook_LissandraRSelf"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 14346
            mAlternateName: string = "LissandraR"
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        50
                        200
                        350
                        500
                        175
                        210
                        360
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 0.550000012
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                ""
            }
            cooldownTime: list[f32] = {
                115
                100
                85
                70
                9
                8
                8
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                675
                675
                675
                675
                675
                675
                675
            }
            castRadius: list[f32] = {
                710
                710
                710
                710
                710
                710
                710
            }
            castRadiusSecondary: list[f32] = {
                615
                615
                615
                615
                615
                615
                615
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 7.5
            missileSpeed: f32 = 1800
            0x92a53e77: list[hash] = {
                0xb71637c1
            }
            bHaveHitBone: bool = true
            mHitBoneName: string = "C_BUFFBONE_GLB_CHEST_LOC"
            mana: list[f32] = {
                100
                100
                100
                75
                80
                80
            }
            selectionPriority: u32 = 1
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 2
                        }
                        overrideRadius: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                615
                                615
                                615
                                615
                                615
                                615
                            }
                            mValueType: u32 = 2
                        }
                        textureRadiusOverrideName: string = "ASSETS/Spells/Textures/AOE_brand.dds"
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_LissandraRSelf"
        }
    }
    0x38f222e5 = SpellObject {
        mScriptName: string = "UltBook_LissandraRRemoval"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 1029
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "LissandraRRemoval"
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        50
                        200
                        350
                        500
                        175
                        210
                        360
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        20
                        30
                        40
                        50
                        45
                        50
                        60
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        1.25
                        1.5
                        1.75
                        2
                        2
                        2
                        2.25
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 0.25
            mAnimationName: string = "Spell2down"
            mImgIconName: list[string] = {
                ""
            }
            cooldownTime: list[f32] = {
                115
                100
                85
                70
                9
                8
                8
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            mSpellRevealsChampion: bool = false
            bIsToggleSpell: bool = true
            castRange: list[f32] = {
                1050
                1050
                1050
                1050
                1050
                1050
                1050
            }
            castRangeDisplayOverride: list[f32] = {
                350
                350
                350
                350
                350
                350
                350
            }
            castRadius: list[f32] = {
                500
                500
                500
                500
                500
                500
                500
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 3
            missileSpeed: f32 = 1600
            mLineWidth: f32 = 120
            0x92a53e77: list[hash] = {
                0xb71637c1
            }
            bHaveHitBone: bool = true
            mHitBoneName: string = "root"
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = SelfAoe {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_LissandraRRemoval"
        }
    }
    0x5e5f546a = SpellObject {
        mScriptName: string = "UltBook_LissandraRSlow"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 6154
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        20
                        65
                        110
                        155
                        200
                        245
                        290
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        20
                        24
                        28
                        32
                        36
                        40
                        44
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 0.400000006
            mCoefficient2: f32 = 0.300000012
            mAnimationName: string = "Spell1"
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            alwaysSnapFacing: bool = true
            bHaveHitEffect: bool = true
            castRange: list[f32] = {
                650
                650
                650
                650
                650
                650
                650
            }
            castRadius: list[f32] = {
                220
                220
                220
                220
                220
                220
                220
            }
            castConeDistance: f32 = 100
            luaOnMissileUpdateDistanceInterval: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 80
                movementComponent: pointer = FixedSpeedMovement {
                    mProjectTargetToCastRange: bool = true
                    mSpeed: f32 = 2000
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                    mStartBoneName: string = "L_hand"
                }
                heightSolver: pointer = BlendedLinearHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 1
            missileSpeed: f32 = 2000
            mMissileEffectName: string = "fizz_seastoneactive_hit_sound.troy"
            mLineWidth: f32 = 80
            0x92a53e77: list[hash] = {
                0xb71637c1
            }
            mHitEffectKey: hash = 0xc825d347
            bHaveHitBone: bool = true
            mParticleStartOffset: vec3 = { 0, 100, 0 }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            mTargetingTypeData: pointer = TargetOrLocation {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_LissandraRSlow"
        }
    }
    0x6b3bee4a = SpellObject {
        mScriptName: string = "UltBook_LissandraRDamage"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 12298
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "LissandraR"
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        50
                        200
                        350
                        500
                        175
                        210
                        360
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        30
                        30
                        30
                        30
                        30
                        30
                        30
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        1.25
                        1.5
                        1.75
                        2
                        2
                        2
                        2.25
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 1
            mAnimationName: string = "Spell3"
            mImgIconName: list[string] = {
                ""
            }
            cooldownTime: list[f32] = {
                140
                120
                100
                80
                9
                8
                8
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            useAnimatorFramerate: bool = true
            bIsToggleSpell: bool = true
            castRange: list[f32] = {
                600
                600
                600
                600
                600
                600
                600
            }
            castRadius: list[f32] = {
                710
                710
                710
                710
                710
                710
                710
            }
            castRadiusSecondary: list[f32] = {
                615
                615
                615
                615
                615
                615
                615
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 7.5
            missileSpeed: f32 = 2000
            0x92a53e77: list[hash] = {
                0xb71637c1
            }
            bHaveHitBone: bool = true
            mHitBoneName: string = "C_BUFFBONE_GLB_CHEST_LOC"
            mana: list[f32] = {
                100
                100
                100
                75
                80
                80
            }
            selectionPriority: u32 = 1
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 2
                        }
                        overrideRadius: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                615
                                615
                                615
                                615
                                615
                                615
                            }
                            mValueType: u32 = 2
                        }
                        textureRadiusOverrideName: string = "ASSETS/Spells/Textures/AOE_brand.dds"
                    }
                }
            }
        }
    }
    0x7b8a2ecb = SpellObject {
        mScriptName: string = "UltBook_LissandraR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 12298
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "LissandraR"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ImmobilizingCCSpell"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "APRatio"
                    mValues: list[f32] = {
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                    }
                    mBaseP: f32 = 0.75
                }
                SpellDataValue {
                    mName: string = "BaseDamage"
                    mValues: list[f32] = {
                        50
                        150
                        250
                        350
                        450
                        550
                        650
                    }
                    mBaseP: f32 = 50
                    mFormula: string = "P + 100"
                }
                SpellDataValue {
                    mName: string = "SlowAmount"
                    mValues: list[f32] = {
                        0
                        -0.300000012
                        -0.449999988
                        -0.75
                        0
                        0
                        0
                    }
                    0x3f95426c: bool = false
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "SlowDuration"
                    mValues: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                    mBaseP: f32 = 3
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "EnemyCastDuration"
                    mValues: list[f32] = {
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                    }
                    mBaseP: f32 = 1.5
                }
                SpellDataValue {
                    mName: string = "SelfCastDuration"
                    mValues: list[f32] = {
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                    }
                    mBaseP: f32 = 2.5
                }
                SpellDataValue {
                    mName: string = "SelfCastFlatHeal"
                    mValues: list[f32] = {
                        50
                        100
                        150
                        200
                        250
                        300
                        350
                    }
                    mBaseP: f32 = 50
                    mFormula: string = "P + 50"
                }
                SpellDataValue {
                    mName: string = "SelfCastMissingHPRatio"
                    mValues: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                    mBaseP: f32 = 1
                }
                SpellDataValue {
                    mName: string = "SelfCastMissingHPPerAbove"
                    mValues: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                    mBaseP: f32 = 1
                }
                SpellDataValue {
                    mName: string = "StartingAoESize"
                    mValues: list[f32] = {
                        292
                        292
                        292
                        292
                        292
                        292
                        292
                    }
                    mBaseP: f32 = 292
                }
                SpellDataValue {
                    mName: string = "PercentMissingHPRatio"
                    mValues: list[f32] = {
                        0.300000012
                        0.300000012
                        0.300000012
                        0.300000012
                        0.300000012
                        0.300000012
                        0.300000012
                    }
                    mBaseP: f32 = 0.300000012
                    mFormula: string = "P + 0"
                }
            }
            0x94572284: map[hash,pointer] = {
                "CalculatedDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "baseDamage"
                        }
                        StatByNamedDataValueCalculationPart {
                            mDataValue: hash = "APRatio"
                        }
                    }
                }
                "HealAmount" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0xa6278d35
                        }
                        StatByNamedDataValueCalculationPart {
                            mDataValue: hash = 0xd361f2ed
                        }
                    }
                }
            }
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Lissandra_Square.dds"
            }
            cooldownTime: list[f32] = {
                120
                120
                100
                80
                80
                80
                80
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                400
                550
                550
                550
                400
                400
                550
            }
            castRadius: list[f32] = {
                690
                690
                690
                690
                690
                690
                690
            }
            castRadiusSecondary: list[f32] = {
                530
                530
                530
                530
                530
                530
                530
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 7.5
            missileSpeed: f32 = 2000
            0x63060019: link = 0xf29fb813
            0x92a53e77: list[hash] = {
                0xb71637c1
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_LissandraR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_LissandraR_SFX_events.bnk"
            }
            bHaveHitBone: bool = true
            mHitBoneName: string = "C_BUFFBONE_GLB_CHEST_LOC"
            selectionPriority: u32 = 1
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_LissandraR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_LissandraR_Name"
                        "keySummary" = "Spell_LissandraR_Summary"
                        "keyTooltip" = "Spell_LissandraR_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_LissandraR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Lissandra"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "BaseDamage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "SlowAmount"
                                    typeIndex: i32 = 2
                                    multiplier: f32 = -100
                                    nameOverride: string = "Spell_ListType_Slow"
                                    Style: u32 = 1
                                }
                                TooltipInstanceListElement {
                                    type: string = "SelfCastFlatHeal"
                                    typeIndex: i32 = 6
                                    nameOverride: string = "Spell_ListType_Healing"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 2
                        }
                        overrideRadius: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                530
                                530
                                530
                                530
                                530
                                530
                            }
                            mValueType: u32 = 2
                        }
                        textureRadiusOverrideName: string = "ASSETS/Maps/Particles/UltBook/AOE_leona_outer.dds"
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_LissandraR"
        }
    }
    0x8c6213f9 = SpellObject {
        mScriptName: string = "UltBook_LissandraREnemy2"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 4106
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "LissandraR"
            mAnimationName: string = "Spell4"
            cooldownTime: list[f32] = {
                9
                9
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            castRange: list[f32] = {
                1500
                1500
                1500
                1500
                1500
                1500
                1500
            }
            castConeDistance: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                movementComponent: pointer = FixedTimeMovement {
                    mTravelTime: f32 = 0.330000013
                    mTargetHeightAugment: f32 = 100
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "spine"
                }
                verticalFacing: pointer = VeritcalFacingMatchVelocity {}
                behaviors: list[pointer] = {
                    CastOnMovementComplete {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 1
            castFrame: f32 = 7.5
            missileSpeed: f32 = 1800
            mMissileEffectName: string = "Lissandra_R_mis.troy"
            0x92a53e77: list[hash] = {
                0xb71637c1
            }
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
    }
    0xc56c3bf1 = SpellObject {
        mScriptName: string = "UltBook_LissandraREnemy"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 4106
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "LissandraR"
            mAnimationName: string = "Channel"
            cooldownTime: list[f32] = {
                9
                9
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.25
            delayTotalTimePercent: f32 = -0.25
            mCantCancelWhileWindingUp: bool = true
            castRange: list[f32] = {
                1500
                1500
                1500
                1500
                1500
                1500
                1500
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 7.5
            missileSpeed: f32 = 1800
            0x92a53e77: list[hash] = {
                0xb71637c1
            }
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
    }
    0xddd0ade6 = SpellObject {
        mScriptName: string = "UltBook_LissandraRSpellShieldCheck"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 4106
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "LissandraR"
            mAnimationName: string = "Spell4"
            cooldownTime: list[f32] = {
                9
                9
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            castRange: list[f32] = {
                1500
                1500
                1500
                1500
                1500
                1500
                1500
            }
            castConeDistance: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                movementComponent: pointer = FixedTimeMovement {
                    mTravelTime: f32 = 0.330000013
                    mTargetHeightAugment: f32 = 100
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "spine"
                }
                verticalFacing: pointer = VeritcalFacingMatchVelocity {}
                behaviors: list[pointer] = {
                    CastOnMovementComplete {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 1
            castFrame: f32 = 7.5
            missileSpeed: f32 = 1800
            mMissileEffectName: string = "Lissandra_R_mis.troy"
            0x92a53e77: list[hash] = {
                0xb71637c1
            }
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
    }
    0xf29fb813 = 0xefc7f35c {
        0x81cd26c4: file = 0x472f0f9b5e6574b4
    }
    0x13fc81c3 = AbilityObject {
        mRootSpell: link = 0x247fe741
        mChildSpells: list[link] = {
            0x247fe741
            0x6b20cc87
        }
        mName: string = "UltBook_ChogathR"
    }
    0x174a05af = SpellObject {
        mScriptName: string = "UltBook_CamilleR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 20490
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mExcludedUnitTags: embed = ObjectTags {
                mTagList: string = "NEXUSBLITZ_EventCharacter"
            }
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "PositiveEffect_MoveBlock"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "RPercentCurrentHPDamage"
                    mValues: list[f32] = {
                        2
                        4
                        6
                        8
                        10
                        12
                        14
                    }
                    mBaseP: f32 = 2
                    mFormula: string = "P + 2"
                }
                SpellDataValue {
                    mName: string = "ROnHitDamage"
                    mValues: list[f32] = {
                        0
                        5
                        10
                        15
                        20
                        25
                        30
                    }
                    mFormula: string = "P + 5"
                }
                SpellDataValue {
                    mName: string = "RDuration"
                    mValues: list[f32] = {
                        1.75
                        2.5
                        3.25
                        4
                        4.75
                        5.5
                        6.25
                    }
                    mBaseP: f32 = 1.75
                    mFormula: string = "P + 0.75"
                }
                SpellDataValue {
                    mName: string = "RCircleRadius"
                    mValues: list[f32] = {
                        425
                        425
                        425
                        425
                        425
                        425
                        425
                    }
                    mBaseP: f32 = 425
                    mFormula: string = "P + 0"
                }
            }
            mAnimationName: string = "Spell4"
            mImgIconName: list[string] = {
                "UltBook_Camille_Square.dds"
            }
            mCastTime: f32 = 0.25
            cooldownTime: list[f32] = {
                140
                140
                115
                90
                0
                0
                70
            }
            mCantCancelWhileWindingUp: bool = true
            mCantCancelWhileChanneling: bool = true
            cantCastWhileRooted: bool = true
            mDoesNotConsumeMana: bool = true
            castRange: list[f32] = {
                475
                475
                475
                475
                475
                475
                475
            }
            castConeDistance: f32 = 100
            missileSpeed: f32 = 1200
            0x63060019: link = 0x3a0632ad
            0x92a53e77: list[hash] = {
                0xba4384d7
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_CamilleR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_CamilleR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_CamilleR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_CamilleR_Name"
                        "keySummary" = "Spell_CamilleR_Summary"
                        "keyTooltip" = "Spell_CamilleR_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_CamilleR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Camille"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "RDuration"
                                    typeIndex: i32 = 3
                                    nameOverride: string = "Spell_ListType_Duration"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                                TooltipInstanceListElement {
                                    type: string = "ROnHitDamage"
                                    typeIndex: i32 = 2
                                    nameOverride: string = "Spell_ListType_BonusDamage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "RPercentCurrentHPDamage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_CamilleCurrentHealthDamage"
                                    Style: u32 = 1
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    0x3a0632ad = 0xefc7f35c {
        0x81cd26c4: file = 0xcd072af6d0e69fc7
    }
    0x81d5aa84 = SpellObject {
        mScriptName: string = "UltBook_CamilleRRange"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_CamilleRRange"
        }
    }
    0xcaae8297 = SpellObject {
        mScriptName: string = "UltBook_CamilleRTether"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 13327
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        75
                        200
                        325
                        450
                        0
                        0
                        125
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        70
                        70
                        70
                        70
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 1.5
            mAnimationName: string = "Spell4"
            cooldownTime: list[f32] = {
                120
                110
                100
                90
                0
                0
                0
            }
            mCantCancelWhileWindingUp: bool = true
            castRange: list[f32] = {
                1150
                1150
                1150
                1150
                1150
                1150
                1150
            }
            castConeDistance: f32 = 100
            missileSpeed: f32 = 1200
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            mana: list[f32] = {
                100
                100
                100
                100
                100
                100
            }
            mTargetingTypeData: pointer = Area {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_CamilleRTether"
        }
    }
    0xf76329df = AbilityObject {
        mRootSpell: link = 0x1ec436b1
        mChildSpells: list[link] = {
            0x1ec436b1
        }
        0x86ddaddb: bool = true
        mName: string = "UltBook_BlitzcrankR"
        mType: u8 = 2
    }
    0x18e3e294 = 0xefc7f35c {
        0x81cd26c4: file = 0xd82d8af517787384
    }
    0x1ec436b1 = SpellObject {
        mScriptName: string = "UltBook_BlitzcrankR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        0
                        50
                        100
                        150
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0
                        150
                        275
                        400
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0.25
                        0.25
                        0.25
                        0.25
                        0.25
                        0.25
                        0.25
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0.0799999982
                        0.0799999982
                        0.0799999982
                        0.0799999982
                        0.0799999982
                        0.0799999982
                        0.0799999982
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        400
                        400
                        400
                        400
                        400
                        400
                        400
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "PassiveBaseDamage"
                    mValues: list[f32] = {
                        0
                        50
                        100
                        150
                        200
                        250
                        300
                    }
                    mFormula: string = "P + 50"
                }
                SpellDataValue {
                    mName: string = "ZapCountdown"
                    mValues: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                    mBaseP: f32 = 1
                }
                SpellDataValue {
                    mName: string = "ActiveRange"
                    mValues: list[f32] = {
                        600
                        600
                        600
                        600
                        600
                        600
                        600
                    }
                    mBaseP: f32 = 600
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "ActiveBaseDamage"
                    mValues: list[f32] = {
                        125
                        250
                        375
                        500
                        625
                        750
                        875
                    }
                    mBaseP: f32 = 125
                    mFormula: string = "P + 125"
                }
                SpellDataValue {
                    mName: string = "MaxStacks"
                    mValues: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                    mBaseP: f32 = 3
                }
            }
            0x94572284: map[hash,pointer] = {
                "ActiveDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "ActiveBaseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 1
                        }
                    }
                    0xcbcac618: u8 = 6
                }
                "PassiveDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0xe8ec14f2
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.300000012
                        }
                    }
                    0xcbcac618: u8 = 6
                }
            }
            mCoefficient: f32 = 0.200000003
            mCoefficient2: f32 = 1
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Blitzcrank_Square.dds"
            }
            cooldownTime: list[f32] = {
                0
                60
                40
                20
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            castRange: list[f32] = {
                600
                600
                600
                600
                600
                600
                600
            }
            castRadius: list[f32] = {
                600
                600
                600
                600
                600
                600
                600
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 10.0500002
            missileSpeed: f32 = 347.799988
            0x63060019: link = 0x18e3e294
            0x92a53e77: list[hash] = {
                0x6200e016
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_BlitzcrankR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_BlitzcrankR_SFX_events.bnk"
            }
            mTargetingTypeData: pointer = SelfAoe {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_BlitzcrankR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_StaticField_Name"
                        "keySummary" = "Spell_StaticField_Summary"
                        "keyTooltip" = "Spell_StaticField_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_StaticField_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Blitzcrank"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Passive Base Damage"
                                    nameOverride: string = "Spell_StaticField_PassiveBase_LevelUp"
                                }
                                TooltipInstanceListElement {
                                    type: string = "ActiveBaseDamage"
                                    nameOverride: string = "Spell_StaticField_ActiveDamage_LevelUp"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                    nameOverride: string = "Spell_StaticField_Cooldown_LevelUp"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_StaticField"
            mTooltipData: pointer = TooltipInstanceBuff {
                mObjectName: string = "UltBook_BlitzcrankR"
                mFormat: link = "UX/Tooltips/Buff"
                mLocKeys: map[string,string] = {
                    "keyName" = "Buff_StaticFieldAbility_Name"
                    "keyTooltip" = "Buff_StaticFieldAbility_Tooltip"
                }
            }
        }
    }
    0x19720001 = SpellObject {
        mScriptName: string = "UltBook_ViR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 4106
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "ViR"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "PositiveEffect_MoveBlock"
                "Trait_ChannelSpell"
                "Trait_ImmobilizingCCSpell"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "RBaseSpeed"
                    mValues: list[f32] = {
                        800
                        800
                        800
                        800
                        800
                        800
                        800
                    }
                    mBaseP: f32 = 800
                }
                SpellDataValue {
                    mName: string = "RStunDuration"
                    mValues: list[f32] = {
                        1.29999995
                        1.29999995
                        1.29999995
                        1.29999995
                        1.29999995
                        1.29999995
                        1.29999995
                    }
                    mBaseP: f32 = 1.29999995
                }
                SpellDataValue {
                    mName: string = "RBaseDamage"
                    mValues: list[f32] = {
                        -25
                        150
                        325
                        500
                        675
                        850
                        1025
                    }
                    mBaseP: f32 = -25
                    mFormula: string = "P + 175"
                }
                SpellDataValue {
                    mName: string = "SecondaryTargetDamageMultiplier"
                    mValues: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                    mBaseP: f32 = 1
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "SecondaryTargetKnockbackDistance"
                    mValues: list[f32] = {
                        350
                        350
                        350
                        350
                        350
                        350
                        350
                    }
                    mBaseP: f32 = 350
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "SecondaryTargetStunDuration"
                    mValues: list[f32] = {
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                    }
                    mBaseP: f32 = 0.75
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "SecondaryTargetKnockbackDuration"
                    mValues: list[f32] = {
                        0.25
                        0.25
                        0.25
                        0.25
                        0.25
                        0.25
                        0.25
                    }
                    mBaseP: f32 = 0.25
                }
            }
            0x94572284: map[hash,pointer] = {
                "Damage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "RBaseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 1.10000002
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                    }
                }
                0x389cfd75 = GameCalculationModified {
                    mModifiedGameCalculation: hash = "Damage"
                    mMultiplier: pointer = NamedDataValueCalculationPart {
                        mDataValue: hash = 0x94fc9996
                    }
                }
            }
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Vi_Square.dds"
            }
            mCastTime: f32 = 0.25
            cooldownTime: list[f32] = {
                120
                120
                100
                80
                60
                60
                60
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            cantCastWhileRooted: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                800
                800
                800
                800
                800
                800
                800
            }
            castRadius: list[f32] = {
                100
                100
                100
                100
                100
                100
                100
            }
            castRadiusSecondary: list[f32] = {
                275
                275
                275
                275
                275
                275
                275
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 7.5
            missileSpeed: f32 = 1400
            0x63060019: link = 0xc2237c17
            0x92a53e77: list[hash] = {
                0xaae07acd
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_ViR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_ViR_SFX_events.bnk"
            }
            selectionPriority: u32 = 1
            0x03f432a6: u8 = 1
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_ViR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_ViR_Name"
                        "keySummary" = "Spell_ViR_Summary"
                        "keyTooltip" = "Spell_ViR_Tooltip"
                        "keyPickChoiceName" = "game_character_displayname_Vi"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "RBaseDamage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_BaseDamage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cost"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 2
                        }
                        overrideRadius: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                275
                                275
                                275
                                275
                                275
                                275
                            }
                            mValueType: u32 = 2
                        }
                        textureRadiusOverrideName: string = "ASSETS/Spells/Textures/AOE_brand.dds"
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_ViR"
        }
    }
    0x471b8754 = SpellObject {
        mScriptName: string = "UltBook_ViRTarget"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_ViRTarget"
        }
    }
    0x4ca098f6 = SpellObject {
        mScriptName: string = "UltBook_ViRHit"
        mSpell: pointer = SpellDataResource {
            mAlternateName: string = "ViR"
            0x92a53e77: list[hash] = {
                0xaae07acd
            }
        }
    }
    0x6b4c3b3f = SpellObject {
        mScriptName: string = "UltBook_ViRMissile"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 7183
            mAlternateName: string = "ViR"
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        35
                        75
                        115
                        155
                        195
                        235
                        275
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0
                        20
                        40
                        60
                        80
                        100
                        120
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 0.600000024
            mCoefficient2: f32 = 0.200000003
            mAnimationName: string = "Spell1"
            mImgIconName: list[string] = {
                "ASSETS/Spells/Icons2D/ZyraQ.dds"
            }
            cooldownTime: list[f32] = {
                7.5
                7
                6.5
                6
                5.5
                5
                5
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            castRange: list[f32] = {
                2000
                2000
                2000
                2000
                2000
                2000
                2000
            }
            castRangeDisplayOverride: list[f32] = {
                825
                825
                825
                825
                825
                825
                825
            }
            castRadius: list[f32] = {
                220
                220
                220
                220
                220
                220
                220
            }
            castConeDistance: f32 = 100
            luaOnMissileUpdateDistanceInterval: f32 = 75
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 85
                movementComponent: pointer = FixedSpeedMovement {
                    mProjectTargetToCastRange: bool = true
                    mSpeed: f32 = 2000
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                    mStartBoneName: string = "root"
                }
                heightSolver: pointer = BlendedLinearHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 7.5
            missileSpeed: f32 = 2000
            mMissileEffectName: string = "Zyra_Dummy_Controller.troy"
            mLineWidth: f32 = 85
            0x92a53e77: list[hash] = {
                0xaae07acd
            }
            bHaveHitBone: bool = true
            mHitBoneName: string = "root"
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            mTargetingTypeData: pointer = Area {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        textureRadiusOverrideName: string = "ASSETS/Spells/Textures/AOE.dds"
                    }
                }
            }
        }
    }
    0xa346c1bc = SpellObject {
        mScriptName: string = "UltBook_ViRKnockback"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_ViRKnockback"
        }
    }
    0xc2237c17 = 0xefc7f35c {
        0x81cd26c4: file = 0xe62d86710242d0bb
    }
    0xf7c30601 = SpellObject {
        mScriptName: string = "UltBook_ViRDunk"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 4106
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "Headbutt"
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        100
                        200
                        300
                        400
                        0
                        0
                        100
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        10
                        20
                        30
                        40
                        0
                        0
                        10
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 1.39999998
            mAnimationName: string = "Spell2"
            mImgIconName: list[string] = {
                "ASSETS/Spells/Icons2D/Minotaur_Headbutt.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                11
                10
                0
            }
            delayCastOffsetPercent: f32 = 0.800000012
            delayTotalTimePercent: f32 = -0.550000012
            mCantCancelWhileWindingUp: bool = true
            mCantCancelWhileChanneling: bool = true
            cantCastWhileRooted: bool = true
            useAnimatorFramerate: bool = true
            bHaveHitEffect: bool = true
            castRange: list[f32] = {
                550
                550
                550
                550
                550
                550
                550
            }
            castRadius: list[f32] = {
                100
                100
                100
                100
                100
                100
                100
            }
            castRadiusSecondary: list[f32] = {
                400
                400
                400
                400
                400
                400
                400
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 33
            missileSpeed: f32 = 0
            0x92a53e77: list[hash] = {
                0xaae07acd
            }
            mHitEffectName: string = "HeadButt_tar.troy"
            bHaveHitBone: bool = true
            mHitBoneName: string = "C_BUFFBONE_GLB_CHEST_LOC"
            selectionPriority: u32 = 1
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 2
                        }
                        overrideRadius: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                400
                                400
                                400
                                400
                                400
                                400
                            }
                            mValueType: u32 = 2
                        }
                        textureRadiusOverrideName: string = "ASSETS/Spells/Textures/AOE_brand.dds"
                    }
                }
            }
        }
    }
    0xe2bbf263 = AbilityObject {
        mRootSpell: link = 0x3af76055
        mChildSpells: list[link] = {
            0x3af76055
            0xcb4cbf2b
            0x19c3afcd
        }
        mName: string = "UltBook_EkkoR"
    }
    0x19c3afcd = SpellObject {
        mScriptName: string = "UltBook_EkkoRInvuln"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_EkkoRInvuln"
        }
    }
    0x3af76055 = SpellObject {
        mScriptName: string = "UltBook_EkkoR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 1029
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mPlatformSpellInfo: embed = PlatformSpellInfo {
                mPlatformEnabled: bool = true
            }
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "PositiveEffect_Teleport"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "Damage"
                    mValues: list[f32] = {
                        0
                        150
                        300
                        450
                        600
                        750
                        900
                    }
                    mFormula: string = "P + 150"
                }
                SpellDataValue {
                    mName: string = "FlatHeal"
                    mValues: list[f32] = {
                        50
                        100
                        150
                        200
                        250
                        300
                        350
                    }
                    mBaseP: f32 = 50
                    mFormula: string = "P + 50"
                }
                SpellDataValue {
                    mName: string = "AoERadius"
                    mValues: list[f32] = {
                        375
                        375
                        375
                        375
                        375
                        375
                        375
                    }
                    mBaseP: f32 = 375
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "PercentHealAmpPerPercentMissingHealth"
                    mValues: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                    mBaseP: f32 = 3
                    mFormula: string = "P "
                }
            }
            0x94572284: map[hash,pointer] = {
                "TotalDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "Damage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 1.5
                        }
                    }
                }
                "TotalBaseHeal" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "FlatHeal"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.600000024
                        }
                    }
                }
            }
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Ekko_Square.dds"
            }
            mCastTime: f32 = 0.25
            cooldownTime: list[f32] = {
                110
                110
                80
                50
                50
                50
                50
            }
            mCantCancelWhileWindingUp: bool = true
            cantCastWhileRooted: bool = true
            mDoesNotConsumeMana: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRangeDisplayOverride: list[f32] = {
                850
                850
                850
                850
                850
                850
                850
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 10
            0x63060019: link = 0xaadb8ba0
            0x92a53e77: list[hash] = {
                0x45bc95ea
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_EkkoR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_EkkoR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            mTargetingTypeData: pointer = Self {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_EkkoR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_EkkoR_Name"
                        "keySummary" = "Spell_EkkoR_Summary"
                        "keyTooltip" = "Spell_EkkoR_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_EkkoR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Ekko"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Damage"
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "FlatHeal"
                                    nameOverride: string = "Spell_ListType_Healing"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 1
                        }
                        overrideRadius: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                375
                                375
                                375
                                375
                                375
                                375
                            }
                            mValueType: u32 = 2
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_EkkoR"
        }
    }
    0xaadb8ba0 = 0xefc7f35c {
        0x81cd26c4: file = 0xbc88d8d5c197eb06
    }
    0xcb4cbf2b = SpellObject {
        mScriptName: string = "UltBook_EkkoRHeal"
    }
    0xc0609a55 = AbilityObject {
        mRootSpell: link = 0x19f76199
        mChildSpells: list[link] = {
            0x19f76199
        }
        mName: string = "UltBook_NasusR"
    }
    0x19f76199 = SpellObject {
        mScriptName: string = "UltBook_NasusR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 9221
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "BonusHealth"
                    mValues: list[f32] = {
                        150
                        300
                        450
                        600
                        750
                        900
                        1050
                    }
                    mBaseP: f32 = 150
                    mFormula: string = "P+150"
                }
                SpellDataValue {
                    mName: string = "AttackRangeIncrease"
                    mValues: list[f32] = {
                        50
                        50
                        50
                        50
                        50
                        50
                        50
                    }
                    mBaseP: f32 = 50
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "AOEDamagePercent"
                    mValues: list[f32] = {
                        0.0199999996
                        0.0299999993
                        0.0399999991
                        0.0500000007
                        0.0599999987
                        0.0700000003
                        0.0799999982
                    }
                    mBaseP: f32 = 0.0199999996
                    mFormula: string = "P+0.01"
                }
                SpellDataValue {
                    mName: string = "InitialResistGain"
                    mValues: list[f32] = {
                        25
                        40
                        55
                        70
                        85
                        100
                        115
                    }
                    mBaseP: f32 = 25
                    mFormula: string = "P+15"
                }
                SpellDataValue {
                    mName: string = "MaxDamageCap"
                    mValues: list[f32] = {
                        240
                        240
                        240
                        240
                        240
                        240
                        240
                    }
                    mBaseP: f32 = 240
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "Duration"
                    mValues: list[f32] = {
                        15
                        15
                        15
                        15
                        15
                        15
                        15
                    }
                    mBaseP: f32 = 15
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "QCDR"
                    mValues: list[f32] = {
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                    }
                    mBaseP: f32 = 0.5
                    mFormula: string = "P"
                }
            }
            0x94572284: map[hash,pointer] = {
                "DamageCalc" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "AoeDamagePercent"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 9.99999975e-05
                        }
                    }
                    mDisplayAsPercent: bool = true
                }
            }
            mCoefficient: f32 = 0.00999999978
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Nasus_Square.dds"
            }
            cooldownTime: list[f32] = {
                120
                120
                120
                120
                120
                120
                120
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            castRange: list[f32] = {
                20
                20
                20
                20
                20
                20
                20
            }
            castRadius: list[f32] = {
                210
                210
                210
                210
                210
                210
                210
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 12.4250002
            missileSpeed: f32 = 779.900024
            0x63060019: link = 0xf307a922
            0x92a53e77: list[hash] = {
                0xf1173c50
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_NasusR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_NasusR_SFX_events.bnk"
            }
            bHaveHitBone: bool = true
            mTargetingTypeData: pointer = Self {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_NasusR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_NasusR_Name"
                        "keySummary" = "Spell_NasusR_Summary"
                        "keyTooltip" = "Spell_NasusR_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_NasusR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Nasus"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "BonusHealth"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_BonusHealth"
                                }
                                TooltipInstanceListElement {
                                    type: string = "AOEDamagePercent"
                                    typeIndex: i32 = 3
                                    multiplier: f32 = 100
                                    nameOverride: string = "Spell_ListType_MaxHealthPercent"
                                    Style: u32 = 1
                                }
                                TooltipInstanceListElement {
                                    type: string = "InitialResistGain"
                                    typeIndex: i32 = 4
                                    nameOverride: string = "Spell_NasusR_BonusResistances"
                                }
                            }
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_NasusR"
        }
    }
    0xf307a922 = 0xefc7f35c {
        0x81cd26c4: file = 0x638571187d5f4145
    }
    0x5b5a5875 = AbilityObject {
        mRootSpell: link = 0xc8141bc1
        mChildSpells: list[link] = {
            0xc8141bc1
            0x8ac1dcce
            0x1a5ea72c
        }
        mName: string = "UltBook_LuluR"
    }
    0x1a5ea72c = SpellObject {
        mScriptName: string = "UltBook_LuluRSlow"
        mSpell: pointer = SpellDataResource {
            0x92a53e77: list[hash] = {
                0x01de9370
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_Slow"
            mShowDuration: bool = false
        }
    }
    0x8ac1dcce = SpellObject {
        mScriptName: string = "UltBook_LuluRBoom"
        mSpell: pointer = SpellDataResource {
            0x92a53e77: list[hash] = {
                0x01de9370
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_Slow"
            mShowDuration: bool = false
        }
    }
    0xc8141bc1 = SpellObject {
        mScriptName: string = "UltBook_LuluR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 1029
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "LuluR"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "PositiveEffect_Boon"
                "Trait_ImmobilizingCCSpell"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "BonusHealth"
                    mValues: list[f32] = {
                        150
                        300
                        450
                        600
                        750
                        900
                        1050
                    }
                    mBaseP: f32 = 150
                    mFormula: string = "P + 150"
                }
                SpellDataValue {
                    mName: string = "SlowPercent"
                    mValues: list[f32] = {
                        15
                        30
                        45
                        60
                        75
                        90
                        105
                    }
                    mBaseP: f32 = 15
                    mFormula: string = "P + 15"
                }
                SpellDataValue {
                    mName: string = "BuffDuration"
                    mValues: list[f32] = {
                        7
                        7
                        7
                        7
                        7
                        7
                        7
                    }
                    mBaseP: f32 = 7
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "AoERadius"
                    mValues: list[f32] = {
                        400
                        400
                        400
                        400
                        400
                        400
                        400
                    }
                    mBaseP: f32 = 400
                    mFormula: string = "P "
                }
                SpellDataValue {
                    mName: string = "KnockbackDuration"
                    mValues: list[f32] = {
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                    }
                    mBaseP: f32 = 0.75
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "KnockbackDistance"
                    mValues: list[f32] = {
                        275
                        275
                        275
                        275
                        275
                        275
                        275
                    }
                    mBaseP: f32 = 275
                    mFormula: string = "P"
                }
            }
            0x94572284: map[hash,pointer] = {
                0xaf6d44aa = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "BonusHealth"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.5
                        }
                    }
                }
            }
            mCoefficient: f32 = 0.5
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Lulu_Square_0.dds"
            }
            mCastTime: f32 = 0.25
            cooldownTime: list[f32] = {
                10
                120
                100
                80
                80
                80
                10
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                900
                900
                900
                900
                900
                900
                900
            }
            castRadius: list[f32] = {
                210
                210
                210
                210
                210
                210
                210
            }
            castRadiusSecondary: list[f32] = {
                385
                385
                385
                385
                385
                385
                385
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 7.5
            missileSpeed: f32 = 0
            0x63060019: link = 0xd7d936c2
            0x92a53e77: list[hash] = {
                0x01de9370
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_LuluR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_LuluR_SFX_events.bnk"
            }
            selectionPriority: u32 = 2
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_LuluR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_LuluR_Name"
                        "keySummary" = "Spell_LuluR_Summary"
                        "keyTooltip" = "Spell_LuluR_Tooltip"
                        "keyPickChoiceName" = "game_character_displayname_Lulu"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "BonusHealth"
                                    nameOverride: string = "Spell_ListType_BonusHealth"
                                }
                                TooltipInstanceListElement {
                                    type: string = "SlowPercent"
                                    nameOverride: string = "Spell_ListType_Slow"
                                    Style: u32 = 1
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 2
                        }
                        overrideRadius: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                385
                                385
                                385
                                385
                                385
                                385
                            }
                            mValueType: u32 = 2
                        }
                        textureRadiusOverrideName: string = "ASSETS/Spells/Textures/AOE_brand.dds"
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_LuluR"
        }
    }
    0xd7d936c2 = 0xefc7f35c {
        0x81cd26c4: file = 0x9130c12d66ccbb7b
    }
    0x5450f6ac = AbilityObject {
        mRootSpell: link = 0x1c9086d3
        mChildSpells: list[link] = {
            0x1c9086d3
            0x7fc4d4c2
            0x39d6c1b6
            0x591e20de
        }
        mName: string = "UltBook_XinZhaoR"
    }
    0x1c9086d3 = SpellObject {
        mScriptName: string = "UltBook_XinZhaoR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 9221
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "XinZhaoR"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ImmobilizingCCSpell"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "BaseDamage"
                    mValues: list[f32] = {
                        -25
                        75
                        175
                        275
                        375
                        475
                        575
                    }
                    mBaseP: f32 = -25
                    mFormula: string = "P + 100"
                }
                SpellDataValue {
                    mName: string = "PercentCurrentHealthDamage"
                    mValues: list[f32] = {
                        0.150000006
                        0.150000006
                        0.150000006
                        0.150000006
                        0.150000006
                        0.150000006
                        0.150000006
                    }
                    mBaseP: f32 = 0.150000006
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "MissileDefenseBaseDuration"
                    mValues: list[f32] = {
                        5
                        5
                        5
                        5
                        5
                        5
                        5
                    }
                    mBaseP: f32 = 5
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "MissileDefenseRadius"
                    mValues: list[f32] = {
                        450
                        450
                        450
                        450
                        450
                        450
                        450
                    }
                    mBaseP: f32 = 450
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "MarkDuration"
                    mValues: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                    mBaseP: f32 = 3
                }
            }
            0x94572284: map[hash,pointer] = {
                "TotalDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "baseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 1
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 1.10000002
                        }
                    }
                    0xcbcac618: u8 = 6
                }
            }
            mCoefficient: f32 = 1
            mAnimationName: string = "Spell6"
            mImgIconName: list[string] = {
                "UltBook_XinZhao_Square_0.dds"
            }
            cooldownTime: list[f32] = {
                120
                120
                110
                100
                100
                100
                100
            }
            delayCastOffsetPercent: f32 = -0.349999994
            delayTotalTimePercent: f32 = -0.349999994
            mCantCancelWhileWindingUp: bool = true
            mDoesNotConsumeMana: bool = true
            castRange: list[f32] = {
                500
                500
                500
                500
                500
                500
                500
            }
            castRadius: list[f32] = {
                210
                210
                210
                210
                210
                210
                210
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 10
            missileSpeed: f32 = 347.799988
            0x63060019: link = 0x632645e5
            0x92a53e77: list[hash] = {
                0x9185cd4f
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_XinZhaoR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_XinZhaoR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            mTargetingTypeData: pointer = SelfAoe {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_XinZhaoR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_XinZhaoR_Name"
                        "keySummary" = "Spell_XinZhaoR_Summary"
                        "keyTooltip" = "Spell_XinZhaoR_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_XinZhaoR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_XinZhao"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "BaseDamage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_XenZhaoParry"
        }
    }
    0x39d6c1b6 = SpellObject {
        mScriptName: string = "UltBook_XinZhaoRLastTargetTracker"
    }
    0x591e20de = SpellObject {
        mScriptName: string = "UltBook_XinZhaoRRangedImmunity"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 9221
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "XenZhaoBattleCry"
            mCoefficient: f32 = 0.400000006
            mCoefficient2: f32 = 0.200000003
            mAnimationName: string = "Spell4"
            cooldownTime: list[f32] = {
                17
                16
                15
                14
                13
                12
                12
            }
            delayCastOffsetPercent: f32 = -0.237499997
            delayTotalTimePercent: f32 = -0.230000004
            mCantCancelWhileWindingUp: bool = true
            castRange: list[f32] = {
                20
                20
                20
                20
                20
                20
                20
            }
            castRadius: list[f32] = {
                210
                210
                210
                210
                210
                210
                210
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 20.2099991
            missileSpeed: f32 = 347.799988
            0x92a53e77: list[hash] = {
                0x9185cd4f
            }
            mFloatVarsDecimals: list[i32] = {
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            mana: list[f32] = {
                40
                40
                40
                40
                40
                40
            }
            mTargetingTypeData: pointer = Self {}
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_XinZhaoRangedImmunity"
        }
    }
    0x632645e5 = 0xefc7f35c {
        0x81cd26c4: file = 0xe6bfa4f285ee7f10
    }
    0x7fc4d4c2 = SpellObject {
        mScriptName: string = "UltBook_XinZhaoRKnockback"
        mBuff: pointer = BuffData {}
    }
    0x9040e2e0 = AbilityObject {
        mRootSpell: link = 0x8e698d4d
        mChildSpells: list[link] = {
            0xa8fa56ef
            0x8e698d4d
            0xff2dc14f
            0x7fac47a6
            0x535e6337
            0x56325c47
            0xd6fb1b92
            0x1d3ec4b8
        }
        0x86ddaddb: bool = true
        mName: string = "UltBook_KaynR"
        mType: u8 = 2
    }
    0x1d3ec4b8 = SpellObject {
        mScriptName: string = "UltBook_KaynRWraithForm"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_KaynRWraithform"
        }
    }
    0x535e6337 = SpellObject {
        mScriptName: string = "UltBook_KaynRHost"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_KaynRHost"
        }
    }
    0x56325c47 = SpellObject {
        mScriptName: string = "UltBook_KaynRRecast"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 4106
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        10
                        10
                        15
                        20
                        8
                        8
                        8
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mImgIconName: list[string] = {
                "UltBook_Kayn_R2_Primary.dds"
            }
            cooldownTime: list[f32] = {
                140
                140
                110
                80
                10
                10
                10
            }
            mCantCancelWhileWindingUp: bool = true
            bIsToggleSpell: bool = true
            mana: list[f32] = {
                100
                100
                100
                100
                100
                100
            }
        }
    }
    0x5d571061 = 0xefc7f35c {
        0x81cd26c4: file = 0x8266ae41e23dc226
    }
    0x7fac47a6 = SpellObject {
        mScriptName: string = "UltBook_KaynREnemyMark"
        mBuff: pointer = BuffData {}
    }
    0x8e698d4d = SpellObject {
        mScriptName: string = "UltBook_KaynR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 4106
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mCastRequirementsTarget: list[pointer] = {
                HasBuffCastRequirement {
                    mBuffName: hash = 0x3b46ab7e
                }
            }
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "PositiveEffect_MoveBlock"
                "Trait_Transformation"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        150
                        150
                        250
                        350
                        350
                        350
                        350
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {
                    value: list[f32] = {
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        300
                        300
                        300
                        300
                        300
                        300
                        300
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        10
                        10
                        10
                        10
                        10
                        10
                        10
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        13
                        13
                        13
                        13
                        13
                        13
                        13
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        70
                        70
                        70
                        70
                        70
                        70
                        70
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        750
                        750
                        750
                        750
                        750
                        750
                        750
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        550
                        550
                        550
                        550
                        550
                        550
                        550
                    }
                }
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "BaseDamage"
                    mValues: list[f32] = {
                        50
                        150
                        250
                        350
                        450
                        550
                        650
                    }
                    mBaseP: f32 = 50
                    mFormula: string = "P + 100"
                }
                SpellDataValue {
                    mName: string = "MinimumInfestTime"
                    mValues: list[f32] = {
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                    }
                    mBaseP: f32 = 0.5
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "InfestDuration"
                    mValues: list[f32] = {
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                    }
                    mBaseP: f32 = 2.5
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "JumpOutDistance"
                    mValues: list[f32] = {
                        300
                        300
                        300
                        300
                        300
                        300
                        300
                    }
                    mBaseP: f32 = 300
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "SlayerMaxHPBaseDamage"
                    mValues: list[f32] = {
                        0.100000001
                        0.100000001
                        0.100000001
                        0.100000001
                        0.100000001
                        0.100000001
                        0.100000001
                    }
                    mBaseP: f32 = 0.100000001
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "SlayerMaxHPDamagerPer100AD"
                    mValues: list[f32] = {
                        0.0013
                        0.0013
                        0.0013
                        0.0013
                        0.0013
                        0.0013
                        0.0013
                    }
                    mBaseP: f32 = 0.0013
                }
                SpellDataValue {
                    mName: string = "SlayerHealPercent"
                    mValues: list[f32] = {
                        0.699999988
                        0.699999988
                        0.699999988
                        0.699999988
                        0.699999988
                        0.699999988
                        0.699999988
                    }
                    mBaseP: f32 = 0.699999988
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "AssassinCastRange"
                    mValues: list[f32] = {
                        750
                        750
                        750
                        750
                        750
                        750
                        750
                    }
                    mBaseP: f32 = 750
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "BaseCastRange"
                    mValues: list[f32] = {
                        550
                        550
                        550
                        550
                        550
                        550
                        550
                    }
                    mBaseP: f32 = 550
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "AssassinJumpOutDistance"
                    mValues: list[f32] = {
                        500
                        500
                        500
                        500
                        500
                        500
                        500
                    }
                    mBaseP: f32 = 500
                    mFormula: string = "P + 0"
                }
            }
            0x94572284: map[hash,pointer] = {
                "Damage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "baseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 1.75
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                    }
                }
                0xfc9607de = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0xcf1733d7
                        }
                        StatByNamedDataValueCalculationPart {
                            mDataValue: hash = 0x1bf14cf3
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                    }
                    mDisplayAsPercent: bool = true
                }
                "HealValue" = GameCalculationModified {
                    mModifiedGameCalculation: hash = 0xfc9607de
                    mMultiplier: pointer = NamedDataValueCalculationPart {
                        mDataValue: hash = 0xb685c4c2
                    }
                }
            }
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Kayn_Square.dds"
                "UltBook_Kayn_R1_Disabled.dds"
            }
            mCastTime: f32 = 0.100000001
            cooldownTime: list[f32] = {
                120
                120
                100
                80
                0
                0
                0
            }
            delayTotalTimePercent: f32 = -1
            mAmmoRechargeTime: list[f32] = {
                12
                12
                11
                10
                9
                8
                1
            }
            mCantCancelWhileWindingUp: bool = true
            cantCastWhileRooted: bool = true
            castRange: list[f32] = {
                550
                550
                550
                550
                550
                550
                550
            }
            castFrame: f32 = 7.5
            0x63060019: link = 0x5d571061
            0x92a53e77: list[hash] = {
                0xf7758043
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_KaynR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_KaynR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
            }
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_KaynR"
                    mFormat: link = "UX/Tooltips/SpellKayn"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_KaynR_Name"
                        "keySummary" = "Spell_KaynR_Summary"
                        "keyTooltip" = "Spell_KaynR_Tooltip"
                        "keyKaynHackType" = "Spell_KaynR_KaynHackType"
                        "keyKaynHackValue" = "Spell_KaynR_KaynHackValue"
                        "keyTooltipExtendedBelowLine" = "Spell_KaynR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Kayn"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    0xa8fa56ef = SpellObject {
        mScriptName: string = "UltBook_KaynRJumpOut"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 32
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Kayn_R2_Primary.dds"
            }
            mChannelDuration: list[f32] = {
                2
                2
                2
                2
                2
                2
                2
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            mChargeUpdateInterval: f32 = 0.100000001
            canCastWhileDisabled: bool = true
            canCastOrQueueWhileCasting: bool = true
            mCantCancelWhileWindingUp: bool = true
            mUseChargeChanneling: bool = true
            mCanMoveWhileChanneling: bool = true
            castRange: list[f32] = {
                450
                450
                450
                450
                450
                450
                450
            }
            castRangeDisplayOverride: list[f32] = {
                500
                500
                500
                500
                500
                500
                500
            }
            mLineWidth: f32 = 100
            mTargetingTypeData: pointer = LocationClamped {}
            mClientData: embed = SpellDataResourceClient {
                0x375656dd: hash = 0x8e698d4d
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        lineStopsAtEndPosition: option[bool] = {
                            true
                        }
                        minimumDisplayedRange: f32 = 300
                    }
                }
                mRightClickSpellAction: u32 = 1
            }
        }
    }
    0xd6fb1b92 = SpellObject {
        mScriptName: string = "UltBook_KaynRSpellPassive"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_KaynRHost"
        }
    }
    0xff2dc14f = SpellObject {
        mScriptName: string = "UltBook_KaynRBodyMarker"
    }
    0xc1257d0f = AbilityObject {
        mRootSpell: link = 0xbb779f95
        mChildSpells: list[link] = {
            0xbb779f95
            0x791aacb5
        }
        0x86ddaddb: bool = true
        mName: string = "UltBook_TalonR"
        mType: u8 = 2
    }
    0x1e0e3bda = SpellObject {
        mScriptName: string = "UltBook_TalonRMisTwo"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 7183
            mAffectsStatusFlags: u32 = 40
            mAlternateName: string = "game_spell_displayname_TalonR"
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        50
                        90
                        130
                        170
                        215
                        260
                        300
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 0.600000024
            mAnimationName: string = "Spell1"
            mImgIconName: list[string] = {
                "ASSETS/Spells/Icons2D/Caitlyn_AceintheHole.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            canCastWhileDisabled: bool = true
            mCantCancelWhileWindingUp: bool = true
            mIsDisabledWhileDead: bool = false
            mProjectTargetToCastRange: bool = true
            castRange: list[f32] = {
                20000
                20000
                20000
                20000
                20000
                20000
                20000
            }
            castRadius: list[f32] = {
                8000
                8000
                8000
                8000
                8000
                8000
                8000
            }
            castConeDistance: f32 = 100
            luaOnMissileUpdateDistanceInterval: f32 = 51
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 140
                movementComponent: pointer = FixedSpeedMovement {
                    mSpeed: f32 = 4000
                    mUseHeightOffsetAtEnd: bool = true
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "R_hand"
                }
                visibilityComponent: pointer = EnterFOWVisibility {}
                heightSolver: pointer = BlendedLinearHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 20
            missileSpeed: f32 = 4000
            mMissileEffectKey: hash = 0x2701eef6
            mMissileEffectEnemyKey: hash = 0x13e58d31
            mLineWidth: f32 = 140
            0x92a53e77: list[hash] = {
                0x25f7f4c6
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = TargetOrLocation {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
    }
    0x23622924 = 0xefc7f35c {
        0x81cd26c4: file = 0x296f95739df6fd60
    }
    0x32c7b0cc = SpellObject {
        mScriptName: string = "UltBook_TalonRStealth"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 8191
            mAlternateName: string = "TalonRStealth"
            mAnimationName: string = "Crit"
            mImgIconName: list[string] = {
                "ASSETS/Characters/Talon/HUD/Icons2D/TalonE.dds"
                "ASSETS/Characters/Talon/HUD/Icons2D/TalonE.dds"
            }
            mCastTime: f32 = 0.100000001
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            canCastWhileDisabled: bool = true
            mCantCancelWhileWindingUp: bool = true
            cantCastWhileRooted: bool = true
            mDisableCastBar: bool = true
            bHaveHitEffect: bool = true
            mUseAutoattackCastTimeData: pointer = UseAutoattackCastTimeData {}
            castRange: list[f32] = {
                1000
                1000
                1000
                1000
                1000
                1000
                1000
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 2
            missileSpeed: f32 = 0
            0x92a53e77: list[hash] = {
                0x25f7f4c6
            }
            mHitEffectKey: hash = 0x59b82773
            mAfterEffectName: string = "globalhit_physical.troy"
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_TalonRStealth"
        }
    }
    0x77a18120 = SpellObject {
        mScriptName: string = "UltBook_TalonRHaste"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 8191
            mAlternateName: string = "TalonRHaste"
            mAnimationName: string = "Crit"
            mImgIconName: list[string] = {
                "ASSETS/Characters/Talon/HUD/Icons2D/TalonR.dds"
                "ASSETS/Characters/Talon/HUD/Icons2D/TalonR.dds"
            }
            mCastTime: f32 = 0.100000001
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            canCastWhileDisabled: bool = true
            mCantCancelWhileWindingUp: bool = true
            cantCastWhileRooted: bool = true
            mDisableCastBar: bool = true
            bHaveHitEffect: bool = true
            mUseAutoattackCastTimeData: pointer = UseAutoattackCastTimeData {}
            castRange: list[f32] = {
                1000
                1000
                1000
                1000
                1000
                1000
                1000
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 2
            missileSpeed: f32 = 0
            0x92a53e77: list[hash] = {
                0x25f7f4c6
            }
            mHitEffectKey: hash = 0x59b82773
            mAfterEffectName: string = "globalhit_physical.troy"
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_TalonRHaste"
        }
    }
    0x791aacb5 = SpellObject {
        mScriptName: string = "UltBook_TalonRToggle"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 8192
            mAlternateName: string = "TalonR"
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        90
                        90
                        135
                        180
                        180
                        180
                        180
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0.400000006
                        0.400000006
                        0.550000012
                        0.699999988
                        0.699999988
                        0.699999988
                        0.699999988
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 1
            mImgIconName: list[string] = {
                "ASSETS/Characters/Talon/HUD/Icons2D/TalonR.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = 0.0434999987
            delayTotalTimePercent: f32 = -0.2333
            mCantCancelWhileWindingUp: bool = true
            castRange: list[f32] = {
                800
                800
                800
                800
                800
                800
                800
            }
            castRadius: list[f32] = {
                210
                210
                210
                210
                210
                210
                210
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 9.56999969
            missileSpeed: f32 = 0
            0x92a53e77: list[hash] = {
                0x25f7f4c6
            }
            bHaveHitBone: bool = true
            mHitBoneName: string = "root"
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            mTargetingTypeData: pointer = Self {}
            mClientData: embed = SpellDataResourceClient {
                0x375656dd: hash = "Characters/Talon/Spells/TalonRAbility/TalonR"
            }
        }
    }
    0xbb779f95 = SpellObject {
        mScriptName: string = "UltBook_TalonR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 8192
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "BaseDamage"
                    mValues: list[f32] = {
                        45
                        90
                        135
                        180
                        225
                        270
                        315
                    }
                    mBaseP: f32 = 45
                    mFormula: string = "P + 45"
                }
                SpellDataValue {
                    mName: string = "MoveSpeed"
                    mValues: list[f32] = {
                        0.25
                        0.400000006
                        0.550000012
                        0.699999988
                        0.850000024
                        1
                        1.14999998
                    }
                    mBaseP: f32 = 0.25
                    mFormula: string = "P + .15"
                }
                SpellDataValue {
                    mName: string = "Duration"
                    mValues: list[f32] = {
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                    }
                    mBaseP: f32 = 2.5
                }
            }
            0x94572284: map[hash,pointer] = {
                "Damage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "baseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 1
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                    }
                }
            }
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Talon_Square_0.dds"
            }
            cooldownTime: list[f32] = {
                100
                100
                80
                60
                60
                60
                60
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            castRange: list[f32] = {
                550
                550
                550
                550
                550
                550
                550
            }
            castRadius: list[f32] = {
                650
                650
                650
                650
                650
                650
                650
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 17
            missileSpeed: f32 = 902
            0x63060019: link = 0x23622924
            0x92a53e77: list[hash] = {
                0x25f7f4c6
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_TalonR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_TalonR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            mTargetingTypeData: pointer = SelfAoe {}
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_TalonR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_TalonR_Name"
                        "keySummary" = "Spell_TalonR_Summary"
                        "keyTooltip" = "Spell_TalonR_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_TalonR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Talon"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "BaseDamage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "MoveSpeed"
                                    typeIndex: i32 = 2
                                    multiplier: f32 = 100
                                    nameOverride: string = "Spell_ListType_MovementSpeed"
                                    Style: u32 = 1
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            orientationType: u32 = 3
                        }
                        overrideRadius: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                600
                                600
                                600
                                600
                                600
                                600
                            }
                            mValueType: u32 = 1
                        }
                        textureRadiusOverrideName: string = "ASSETS/Spells/Textures/AOE_brand.dds"
                    }
                }
            }
        }
    }
    0xe2fea0c4 = SpellObject {
        mScriptName: string = "UltBook_TalonRMisOne"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "game_spell_displayname_TalonR"
            mAnimationName: string = "Attack2"
            mImgIconName: list[string] = {
                "ASSETS/Characters/Talon/HUD/Icons2D/TalonR.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            canCastWhileDisabled: bool = true
            mCantCancelWhileChanneling: bool = true
            mProjectTargetToCastRange: bool = true
            mSpellRevealsChampion: bool = false
            castRange: list[f32] = {
                800
                800
                800
                800
                800
                800
                800
            }
            castRadius: list[f32] = {
                299.299988
                299.299988
                299.299988
                299.299988
                299.299988
                299.299988
                299.299988
            }
            castConeDistance: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 140
                movementComponent: pointer = FixedSpeedMovement {
                    mSpeed: f32 = 2400
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "R_weapon"
                }
                heightSolver: pointer = BlendedLinearHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 15.0749998
            missileSpeed: f32 = 2400
            mMissileEffectKey: hash = 0x931d558f
            mMissileEffectEnemyKey: hash = 0xc1d71b6c
            mLineWidth: f32 = 140
            0x92a53e77: list[hash] = {
                0x25f7f4c6
            }
            bHaveHitBone: bool = true
            mHitBoneName: string = "C_BuffBone_Glb_Center_Loc"
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Location {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        hideWithLineIndicator: bool = true
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        lineStopsAtEndPosition: option[bool] = {
                            false
                        }
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                125
                                125
                                125
                                125
                                125
                                125
                            }
                            mValueType: u32 = 2
                        }
                    }
                }
            }
        }
    }
    0x247fe741 = SpellObject {
        mScriptName: string = "UltBook_ChogathR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "RBaseMonsterDamage"
                    mValues: list[f32] = {
                        1000
                        1000
                        1000
                        1000
                        1000
                        1000
                        1000
                    }
                    mBaseP: f32 = 1000
                }
                SpellDataValue {
                    mName: string = "RBaseDamage"
                    mValues: list[f32] = {
                        125
                        300
                        475
                        650
                        825
                        1000
                        1175
                    }
                    mBaseP: f32 = 125
                    mFormula: string = "P + 175"
                }
                SpellDataValue {
                    mName: string = "RHealthPerStack"
                    mValues: list[f32] = {
                        30
                        60
                        90
                        120
                        150
                        180
                        210
                    }
                    mBaseP: f32 = 30
                    mFormula: string = "P + 30"
                }
                SpellDataValue {
                    mName: string = "RMinionMaxStacks"
                    mValues: list[f32] = {
                        6
                        6
                        6
                        6
                        6
                        6
                        6
                    }
                    mBaseP: f32 = 6
                }
                SpellDataValue {
                    mName: string = "RStoneplateRatio"
                    mValues: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                    mBaseP: f32 = 1
                }
            }
            0x94572284: map[hash,pointer] = {
                "RMonsterDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0x48054a0b
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.5
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.100000001
                            mStat: u8 = 11
                            mStatFormula: u8 = 2
                        }
                    }
                    0xcbcac618: u8 = 6
                }
                "RDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "RBaseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.5
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.100000001
                            mStat: u8 = 11
                            mStatFormula: u8 = 2
                        }
                    }
                    0xcbcac618: u8 = 6
                }
            }
            mCoefficient: f32 = 0.100000001
            mCoefficient2: f32 = 0.5
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Chogath_Square.dds"
            }
            mCastTime: f32 = 0.25
            cooldownTime: list[f32] = {
                70
                80
                80
                80
                10
                10
                70
            }
            mCantCancelWhileWindingUp: bool = true
            castRangeUseBoundingBoxes: bool = true
            bHaveHitEffect: bool = true
            castRange: list[f32] = {
                175
                175
                175
                175
                175
                175
                175
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 5.80000019
            mHitEffectOrientType: u32 = 2
            0x63060019: link = 0x90f51d80
            0x92a53e77: list[hash] = {
                0xf27918ca
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_ChogathR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_ChogathR_SFX_events.bnk"
            }
            mHitEffectKey: hash = 0x6f06f767
            bHaveHitBone: bool = true
            mHitBoneName: string = "C_BuffBone_Glb_Center_Loc"
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
            }
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_ChogathR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_Feast_Name"
                        "keySummary" = "Spell_Feast_Summary"
                        "keyTooltip" = "Spell_Feast_Tooltip"
                        "keyTooltipExtended" = "Spell_Feast_TooltipExtended"
                        "keyPickChoiceName" = "game_character_displayname_Chogath"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "RBaseDamage"
                                    typeIndex: i32 = 2
                                    nameOverride: string = "Spell_ListType_ChampionDamage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "RHealthPerStack"
                                    typeIndex: i32 = 3
                                    nameOverride: string = "Spell_ListType_ChogathRHealthPerStack"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            true
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_Feast"
            0xd7e2c71d: u8 = 8
        }
    }
    0x6b20cc87 = SpellObject {
        mScriptName: string = "UltBook_ChogathR_Internal"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_Vorpal_Spikes_debuff"
        }
    }
    0x90f51d80 = 0xefc7f35c {
        0x81cd26c4: file = 0xdaabff68405e1c99
    }
    0x258b48f8 = AbilityObject {
        mRootSpell: link = 0xa0b02699
        mChildSpells: list[link] = {
            0xa0b02699
        }
        mName: string = "UltBook_JinxR"
    }
    0x269814f3 = VfxSystemDefinitionData {
        complexEmitterDefinitionData: list[pointer] = {
            VfxEmitterDefinitionData {
                rate: embed = ValueFloat {
                    constantValue: f32 = 10
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 1
                    dynamics: pointer = VfxAnimatedFloatVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    1
                                    1.5
                                }
                            }
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[f32] = {
                            1
                        }
                    }
                }
                emitterName: string = "CrownSmoke"
                birthVelocity: embed = ValueVector3 {
                    constantValue: vec3 = { 0, 30, -10 }
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    1
                                    1
                                }
                            }
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    0.100000001
                                    1
                                }
                            }
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    0
                                    1
                                }
                            }
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[vec3] = {
                            { 0, 30, -10 }
                        }
                    }
                }
                birthDrag: embed = ValueVector3 {
                    constantValue: vec3 = { 2, 2, 2 }
                }
                worldAcceleration: embed = IntegratedValueVector3 {
                    constantValue: vec3 = { 0, 60, 0 }
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        times: list[f32] = {
                            0
                        }
                        values: list[vec3] = {
                            { 0, 60, 0 }
                        }
                    }
                }
                shape: embed = VfxShape {
                    birthTranslation: embed = ValueVector3 {
                        constantValue: vec3 = { 0, 45, 0 }
                    }
                    emitOffset: embed = ValueVector3 {
                        constantValue: vec3 = { 30, 0, 0 }
                        dynamics: pointer = VfxAnimatedVector3fVariableData {
                            probabilityTables: list[pointer] = {
                                VfxProbabilityTableData {}
                                VfxProbabilityTableData {
                                    keyTimes: list[f32] = {
                                        0
                                        1
                                    }
                                    keyValues: list[f32] = {
                                        0
                                        1
                                    }
                                }
                                VfxProbabilityTableData {}
                            }
                            times: list[f32] = {
                                0
                            }
                            values: list[vec3] = {
                                { 30, 0, 0 }
                            }
                        }
                    }
                    emitRotationAngles: list[embed] = {
                        ValueFloat {
                            constantValue: f32 = 1
                            dynamics: pointer = VfxAnimatedFloatVariableData {
                                probabilityTables: list[pointer] = {
                                    VfxProbabilityTableData {
                                        keyTimes: list[f32] = {
                                            0
                                            1
                                        }
                                        keyValues: list[f32] = {
                                            0
                                            360
                                        }
                                    }
                                }
                                times: list[f32] = {
                                    0
                                }
                                values: list[f32] = {
                                    1
                                }
                            }
                        }
                        ValueFloat {}
                    }
                    emitRotationAxes: list[vec3] = {
                        { 0, 1, 0 }
                        { 0, 0, 0 }
                    }
                }
                bindWeight: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                blendMode: u8 = 4
                birthColor: embed = ValueColor {
                    constantValue: vec4 = { 0.400000006, 1, 0.650980413, 0.450980395 }
                }
                color: embed = ValueColor {
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            0.200000003
                            0.446394503
                            0.809393406
                            1
                        }
                        values: list[vec4] = {
                            { 0.305882365, 1, 0.850980401, 0 }
                            { 0.248954669, 0.815369666, 0.69404459, 0.661458313 }
                            { 0.145364717, 0.490991145, 0.40577963, 0.968553483 }
                            { 0.12511839, 0.451507449, 0.35932824, 0.729166627 }
                            { 0.113725491, 0.396078438, 0.294117659, 0 }
                        }
                    }
                }
                pass: i16 = 51
                alphaErosionDefinition: pointer = VfxAlphaErosionDefinitionData {
                    erosionDriveCurve: embed = ValueFloat {
                        constantValue: f32 = 0.5
                        dynamics: pointer = VfxAnimatedFloatVariableData {
                            times: list[f32] = {
                                0.150000006
                                0.201722622
                                0.317086041
                                1
                            }
                            values: list[f32] = {
                                0
                                0.283830076
                                0.425444275
                                0.5
                            }
                        }
                    }
                    erosionFeatherOut: f32 = 0.200000003
                    erosionSliceWidth: f32 = 1.20000005
                    erosionMapName: string = "ASSETS/Characters/Mordekaiser/Skins/Base/Particles/Mordekaiser_Base_W_SmokeErode.SRI_Slots.dds"
                    erosionMapChannelMixer: embed = ValueColor {
                        constantValue: vec4 = { 1, 0, 0, 0 }
                    }
                }
                miscRenderFlags: u8 = 1
                particleIsLocalOrientation: flag = true
                isUniformScale: flag = true
                isRandomStartFrame: flag = true
                isGroundLayer: flag = true
                useNavmeshMask: flag = true
                birthRotation0: embed = ValueVector3 {
                    constantValue: vec3 = { 1, 90, 0 }
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    -360
                                    360
                                }
                            }
                            VfxProbabilityTableData {}
                            VfxProbabilityTableData {}
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[vec3] = {
                            { 1, 90, 0 }
                        }
                    }
                }
                birthRotationalVelocity0: embed = ValueVector3 {
                    constantValue: vec3 = { 100, 0, 0 }
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    -1
                                    1
                                }
                            }
                            VfxProbabilityTableData {}
                            VfxProbabilityTableData {}
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[vec3] = {
                            { 100, 0, 0 }
                        }
                    }
                }
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 40, 1, 1 }
                }
                scale0: embed = ValueVector3 {
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        times: list[f32] = {
                            0
                            1
                        }
                        values: list[vec3] = {
                            { 0.5, 0.5, 0.5 }
                            { 1, 2, 2 }
                        }
                    }
                }
                texture: string = "ASSETS/Characters/Mordekaiser/Skins/Base/Particles/Mordekaiser_Base_R_Wispy.SRI_Slots.dds"
                numFrames: u16 = 4
                paletteDefinition: pointer = VfxPaletteDefinitionData {
                    paletteTexture: string = "ASSETS/Characters/Senna/Skins/Base/Particles/Senna_Base_colorGrad.dds"
                    paletteSelector: embed = ValueVector3 {
                        constantValue: vec3 = { 6, 0, 0 }
                    }
                    paletteCount: i32 = 32
                }
                texDiv: vec2 = { 2, 2 }
            }
            VfxEmitterDefinitionData {
                timeBeforeFirstEmission: f32 = 0.200000003
                rate: embed = ValueFloat {
                    constantValue: f32 = 2
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 9
                }
                lifetime: option[f32] = {
                    1
                }
                isSingleParticle: flag = true
                emitterLinger: option[f32] = {
                    1
                }
                emitterName: string = "TimerRay_"
                importance: u8 = 2
                shape: embed = VfxShape {
                    birthTranslation: embed = ValueVector3 {
                        dynamics: pointer = VfxAnimatedVector3fVariableData {
                            probabilityTables: list[pointer] = {
                                VfxProbabilityTableData {}
                                VfxProbabilityTableData {}
                                VfxProbabilityTableData {}
                            }
                            times: list[f32] = {
                                0
                            }
                            values: list[vec3] = {
                                { 0, 0, 0 }
                            }
                        }
                    }
                    emitOffset: embed = ValueVector3 {
                        dynamics: pointer = VfxAnimatedVector3fVariableData {
                            probabilityTables: list[pointer] = {
                                VfxProbabilityTableData {}
                                VfxProbabilityTableData {}
                                VfxProbabilityTableData {}
                            }
                            times: list[f32] = {
                                0
                            }
                            values: list[vec3] = {
                                { 0, 0, 0 }
                            }
                        }
                    }
                    emitRotationAngles: list[embed] = {
                        ValueFloat {}
                        ValueFloat {}
                    }
                    emitRotationAxes: list[vec3] = {
                        { 0, 0, 0 }
                        { 0, 0, 0 }
                    }
                }
                bindWeight: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                primitive: pointer = VfxPrimitiveRay {}
                particleColorTexture: string = "ASSETS/Particles/DefaultColorOverlifetime.TFT_Set4_Act2.dds"
                birthColor: embed = ValueColor {
                    constantValue: vec4 = { 0.310002297, 1, 0.749996185, 0.250003815 }
                }
                color: embed = ValueColor {
                    constantValue: vec4 = { 1, 1, 1, 0.5 }
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            0.0500000007
                            0.899999976
                            1
                        }
                        values: list[vec4] = {
                            { 0, 0, 0, 0 }
                            { 1, 1, 1, 0.5 }
                            { 1, 1, 1, 0.5 }
                            { 1, 1, 1, 0 }
                        }
                    }
                }
                softParticleParams: pointer = VfxSoftParticleDefinitionData {
                    deltaIn: f32 = 200
                }
                miscRenderFlags: u8 = 1
                birthRotation0: embed = ValueVector3 {
                    constantValue: vec3 = { -90, 1, 90 }
                }
                isLocalOrientation: flag = false
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 60, 320, 0 }
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    0.5
                                    0.50999999
                                    1
                                }
                                keyValues: list[f32] = {
                                    -1.5
                                    -1
                                    1
                                    1.5
                                }
                            }
                            VfxProbabilityTableData {}
                            VfxProbabilityTableData {}
                        }
                        times: list[f32] = {
                            0
                            0.600000024
                            1
                        }
                        values: list[vec3] = {
                            { 60, 320, 0 }
                            { 42, 320, 0 }
                            { 30, 320, 0 }
                        }
                    }
                }
                texture: string = "ASSETS/Characters/Karthus/Skins/Base/Particles/common_color-bellcurve.dds"
                birthUvScrollRate: embed = ValueVector2 {
                    constantValue: vec2 = { 0, -0.0500000007 }
                    dynamics: pointer = VfxAnimatedVector2fVariableData {
                        times: list[f32] = {
                            0
                            0.600000024
                            1
                        }
                        values: list[vec2] = {
                            { 0, -0.0125000002 }
                            { 0, -0.0500000007 }
                            { 0, -0.150000006 }
                        }
                    }
                }
                birthUVOffset: embed = ValueVector2 {
                    constantValue: vec2 = { 0, 1 }
                    dynamics: pointer = VfxAnimatedVector2fVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {}
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    0
                                    1
                                }
                            }
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[vec2] = {
                            { 0, 1 }
                        }
                    }
                }
                textureMult: string = "ASSETS/Characters/Viego/Skins/Base/Particles/Viego_Base_BasicGradient.RuinedKing.dds"
                texAddressModeMult: u8 = 3
                particleUVRotateRateMult: embed = IntegratedValueFloat {
                    dynamics: pointer = VfxAnimatedFloatVariableData {
                        times: list[f32] = {
                            0
                        }
                        values: list[f32] = {
                            0
                        }
                    }
                }
            }
            VfxEmitterDefinitionData {
                rate: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 50
                }
                lifetime: option[f32] = {
                    1
                }
                isSingleParticle: flag = true
                emitterName: string = "halo_dark"
                shape: embed = VfxShape {
                    birthTranslation: embed = ValueVector3 {
                        constantValue: vec3 = { 0, 45, -1 }
                    }
                }
                bindWeight: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                primitive: pointer = VfxPrimitiveMesh {
                    mMesh: embed = VfxMeshDefinitionData {
                        mSimpleMeshName: string = "ASSETS/Characters/Viego/Skins/Base/Particles/Viego_Base_P_Timer.RuinedKing.scb"
                    }
                }
                blendMode: u8 = 1
                birthColor: embed = ValueColor {
                    constantValue: vec4 = { 0.0392156877, 0.0901960805, 0.0666666701, 1 }
                }
                color: embed = ValueColor {
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0.899999976
                            1
                        }
                        values: list[vec4] = {
                            { 1, 1, 1, 1 }
                            { 1, 1, 1, 1 }
                        }
                    }
                }
                pass: i16 = -6
                particleIsLocalOrientation: flag = true
                isUniformScale: flag = true
                birthRotationalVelocity0: embed = ValueVector3 {
                    constantValue: vec3 = { 0, 45, 0 }
                }
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 0.800000012, 0, 0 }
                }
                texture: string = "ASSETS/Characters/Viego/Skins/Base/Particles/Viego_Base_R_PraxisWaves.RuinedKing.dds"
                birthUVOffset: embed = ValueVector2 {
                    constantValue: vec2 = { 0.200000003, 0.400000006 }
                }
                texAddressModeBase: u8 = 2
            }
            VfxEmitterDefinitionData {
                rate: embed = ValueFloat {
                    constantValue: f32 = 10
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 1
                    dynamics: pointer = VfxAnimatedFloatVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    1
                                    1.5
                                }
                            }
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[f32] = {
                            1
                        }
                    }
                }
                emitterName: string = "OverallSmoke"
                birthVelocity: embed = ValueVector3 {
                    constantValue: vec3 = { 0, 90, -10 }
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    1
                                    1
                                }
                            }
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    0.100000001
                                    1
                                }
                            }
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    0
                                    1
                                }
                            }
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[vec3] = {
                            { 0, 90, -10 }
                        }
                    }
                }
                birthDrag: embed = ValueVector3 {
                    constantValue: vec3 = { 2, 2, 2 }
                }
                worldAcceleration: embed = IntegratedValueVector3 {
                    constantValue: vec3 = { 0, 60, 0 }
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        times: list[f32] = {
                            0
                        }
                        values: list[vec3] = {
                            { 0, 60, 0 }
                        }
                    }
                }
                shape: embed = VfxShape {
                    birthTranslation: embed = ValueVector3 {
                        constantValue: vec3 = { 0, 45, -5 }
                    }
                    emitOffset: embed = ValueVector3 {
                        constantValue: vec3 = { 10, 0, 0 }
                        dynamics: pointer = VfxAnimatedVector3fVariableData {
                            probabilityTables: list[pointer] = {
                                VfxProbabilityTableData {
                                    keyTimes: list[f32] = {
                                        0
                                        1
                                    }
                                    keyValues: list[f32] = {
                                        -1
                                        1
                                    }
                                }
                                VfxProbabilityTableData {
                                    keyTimes: list[f32] = {
                                        0
                                        1
                                    }
                                    keyValues: list[f32] = {
                                        0
                                        1
                                    }
                                }
                                VfxProbabilityTableData {}
                            }
                            times: list[f32] = {
                                0
                            }
                            values: list[vec3] = {
                                { 10, 0, 0 }
                            }
                        }
                    }
                    emitRotationAngles: list[embed] = {
                        ValueFloat {
                            constantValue: f32 = 1
                            dynamics: pointer = VfxAnimatedFloatVariableData {
                                probabilityTables: list[pointer] = {
                                    VfxProbabilityTableData {
                                        keyTimes: list[f32] = {
                                            0
                                            1
                                        }
                                        keyValues: list[f32] = {
                                            0
                                            360
                                        }
                                    }
                                }
                                times: list[f32] = {
                                    0
                                }
                                values: list[f32] = {
                                    1
                                }
                            }
                        }
                        ValueFloat {}
                    }
                    emitRotationAxes: list[vec3] = {
                        { 0, 1, 0 }
                        { 0, 0, 0 }
                    }
                }
                bindWeight: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                blendMode: u8 = 1
                birthColor: embed = ValueColor {
                    constantValue: vec4 = { 0, 0, 0, 0.719996929 }
                }
                color: embed = ValueColor {
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            0.136752144
                            0.259281397
                            0.402705163
                            0.688034177
                            1
                        }
                        values: list[vec4] = {
                            { 0.305882365, 1, 0.850980401, 0 }
                            { 0.229999244, 0.7400015, 0.62999922, 0.650003791 }
                            { 0.160006106, 0.530006886, 0.450003803, 0.83082521 }
                            { 0.149996191, 0.489997715, 0.409994662, 0.461135149 }
                            { 0.133288667, 0.451507449, 0.35932824, 0.125 }
                            { 0.113725491, 0.396078438, 0.294117659, 0 }
                        }
                    }
                }
                alphaErosionDefinition: pointer = VfxAlphaErosionDefinitionData {
                    erosionDriveCurve: embed = ValueFloat {
                        constantValue: f32 = 0.5
                        dynamics: pointer = VfxAnimatedFloatVariableData {
                            times: list[f32] = {
                                0.150000006
                                0.201722622
                                0.317086041
                                1
                            }
                            values: list[f32] = {
                                0
                                0.283830076
                                0.425444275
                                0.5
                            }
                        }
                    }
                    erosionFeatherOut: f32 = 0.200000003
                    erosionSliceWidth: f32 = 1.20000005
                    erosionMapName: string = "ASSETS/Characters/Mordekaiser/Skins/Base/Particles/Mordekaiser_Base_W_SmokeErode.SRI_Slots.dds"
                    erosionMapChannelMixer: embed = ValueColor {
                        constantValue: vec4 = { 1, 0, 0, 0 }
                    }
                }
                miscRenderFlags: u8 = 1
                particleIsLocalOrientation: flag = true
                isUniformScale: flag = true
                isRandomStartFrame: flag = true
                isGroundLayer: flag = true
                useNavmeshMask: flag = true
                birthRotation0: embed = ValueVector3 {
                    constantValue: vec3 = { 1, 90, 0 }
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    -360
                                    360
                                }
                            }
                            VfxProbabilityTableData {}
                            VfxProbabilityTableData {}
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[vec3] = {
                            { 1, 90, 0 }
                        }
                    }
                }
                birthRotationalVelocity0: embed = ValueVector3 {
                    constantValue: vec3 = { 100, 0, 0 }
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    -1
                                    1
                                }
                            }
                            VfxProbabilityTableData {}
                            VfxProbabilityTableData {}
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[vec3] = {
                            { 100, 0, 0 }
                        }
                    }
                }
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 130, 1, 1 }
                }
                scale0: embed = ValueVector3 {
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        times: list[f32] = {
                            0
                            1
                        }
                        values: list[vec3] = {
                            { 0.5, 0.5, 0.5 }
                            { 1, 2, 2 }
                        }
                    }
                }
                texture: string = "ASSETS/Characters/Mordekaiser/Skins/Base/Particles/Mordekaiser_Base_R_Wispy.SRI_Slots.dds"
                numFrames: u16 = 4
                paletteDefinition: pointer = VfxPaletteDefinitionData {
                    paletteTexture: string = "ASSETS/Characters/Senna/Skins/Base/Particles/Senna_Base_colorGrad.dds"
                    paletteSelector: embed = ValueVector3 {
                        constantValue: vec3 = { 6, 0, 0 }
                    }
                    paletteCount: i32 = 32
                }
                texDiv: vec2 = { 2, 2 }
            }
            VfxEmitterDefinitionData {
                rate: embed = ValueFloat {
                    constantValue: f32 = 2
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                emitterName: string = "darkBG"
                importance: u8 = 2
                shape: embed = VfxShape {
                    birthTranslation: embed = ValueVector3 {
                        dynamics: pointer = VfxAnimatedVector3fVariableData {
                            probabilityTables: list[pointer] = {
                                VfxProbabilityTableData {}
                                VfxProbabilityTableData {}
                                VfxProbabilityTableData {}
                            }
                            times: list[f32] = {
                                0
                            }
                            values: list[vec3] = {
                                { 0, 0, 0 }
                            }
                        }
                    }
                    emitOffset: embed = ValueVector3 {
                        constantValue: vec3 = { 0, 45, -5 }
                    }
                    emitRotationAngles: list[embed] = {
                        ValueFloat {}
                        ValueFloat {}
                    }
                    emitRotationAxes: list[vec3] = {
                        { 0, 0, 0 }
                        { 0, 0, 0 }
                    }
                }
                bindWeight: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                blendMode: u8 = 1
                birthColor: embed = ValueColor {
                    constantValue: vec4 = { 0.0699931309, 0.110002287, 0.0899977088, 0.689997733 }
                }
                color: embed = ValueColor {
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            0.100000001
                            0.544062734
                            0.842419684
                            1
                        }
                        values: list[vec4] = {
                            { 1, 1, 1, 0 }
                            { 1, 1, 1, 1 }
                            { 1, 1, 1, 0.942708313 }
                            { 1, 1, 1, 0.770833373 }
                            { 1, 1, 1, 0 }
                        }
                    }
                }
                lingerColor: embed = ValueColor {
                    constantValue: vec4 = { 0.796078444, 0.796078444, 0.796078444, 1 }
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            1
                        }
                        values: list[vec4] = {
                            { 0.796078444, 0.796078444, 0.796078444, 1 }
                            { 0.796078444, 0.796078444, 0.796078444, 0 }
                        }
                    }
                }
                pass: i16 = -100
                alphaRef: u8 = 0
                miscRenderFlags: u8 = 1
                particleIsLocalOrientation: flag = true
                isUniformScale: flag = true
                isGroundLayer: flag = true
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 300, 1, 1 }
                }
                scale0: embed = ValueVector3 {
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        times: list[f32] = {
                            0
                            1
                        }
                        values: list[vec3] = {
                            { 0.5, 0, 0 }
                            { 0.800000012, 0, 0 }
                        }
                    }
                }
                texture: string = "ASSETS/Characters/Senna/Skins/Base/Particles/Senna_Base_W_BackDrop.dds"
                paletteDefinition: pointer = VfxPaletteDefinitionData {
                    palleteSrcMixColor: embed = ValueColor {
                        constantValue: vec4 = { 0.807843149, 0.517647088, 0.109803922, 0 }
                    }
                    paletteSelector: embed = ValueVector3 {
                        constantValue: vec3 = { 11, 0, 0 }
                    }
                    paletteCount: i32 = 32
                }
            }
            VfxEmitterDefinitionData {
                rate: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 10
                }
                lifetime: option[f32] = {
                    1
                }
                isSingleParticle: flag = true
                emitterName: string = "darkBG1"
                importance: u8 = 2
                shape: embed = VfxShape {
                    birthTranslation: embed = ValueVector3 {
                        dynamics: pointer = VfxAnimatedVector3fVariableData {
                            probabilityTables: list[pointer] = {
                                VfxProbabilityTableData {}
                                VfxProbabilityTableData {}
                                VfxProbabilityTableData {}
                            }
                            times: list[f32] = {
                                0
                            }
                            values: list[vec3] = {
                                { 0, 0, 0 }
                            }
                        }
                    }
                    emitOffset: embed = ValueVector3 {
                        constantValue: vec3 = { 0, 45, -5 }
                    }
                    emitRotationAngles: list[embed] = {
                        ValueFloat {}
                        ValueFloat {}
                    }
                    emitRotationAxes: list[vec3] = {
                        { 0, 0, 0 }
                        { 0, 0, 0 }
                    }
                }
                bindWeight: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                blendMode: u8 = 1
                birthColor: embed = ValueColor {
                    constantValue: vec4 = { 0.0549019612, 0.0509803928, 0.0901960805, 1 }
                }
                color: embed = ValueColor {
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            0.100000001
                            0.544062734
                            0.842419684
                            1
                        }
                        values: list[vec4] = {
                            { 1, 1, 1, 0 }
                            { 1, 1, 1, 1 }
                            { 1, 1, 1, 0.942708313 }
                            { 1, 1, 1, 0.770833373 }
                            { 1, 1, 1, 0 }
                        }
                    }
                }
                lingerColor: embed = ValueColor {
                    constantValue: vec4 = { 0.796078444, 0.796078444, 0.796078444, 1 }
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            1
                        }
                        values: list[vec4] = {
                            { 0.796078444, 0.796078444, 0.796078444, 1 }
                            { 0.796078444, 0.796078444, 0.796078444, 0 }
                        }
                    }
                }
                pass: i16 = -100
                alphaRef: u8 = 0
                miscRenderFlags: u8 = 1
                particleIsLocalOrientation: flag = true
                isUniformScale: flag = true
                isGroundLayer: flag = true
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 120, 1, 1 }
                }
                scale0: embed = ValueVector3 {
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        times: list[f32] = {
                            0
                            1
                        }
                        values: list[vec3] = {
                            { 0.5, 0, 0 }
                            { 0.800000012, 0, 0 }
                        }
                    }
                }
                texture: string = "ASSETS/Characters/Senna/Skins/Base/Particles/Senna_Base_W_BackDrop.dds"
                paletteDefinition: pointer = VfxPaletteDefinitionData {
                    palleteSrcMixColor: embed = ValueColor {
                        constantValue: vec4 = { 0.807843149, 0.517647088, 0.109803922, 0 }
                    }
                    paletteSelector: embed = ValueVector3 {
                        constantValue: vec3 = { 11, 0, 0 }
                    }
                    paletteCount: i32 = 32
                }
            }
            VfxEmitterDefinitionData {
                rate: embed = ValueFloat {
                    constantValue: f32 = 2
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                emitterName: string = "a.Missile_Glow1"
                importance: u8 = 2
                shape: embed = VfxShape {
                    birthTranslation: embed = ValueVector3 {
                        dynamics: pointer = VfxAnimatedVector3fVariableData {
                            probabilityTables: list[pointer] = {
                                VfxProbabilityTableData {}
                                VfxProbabilityTableData {}
                                VfxProbabilityTableData {}
                            }
                            times: list[f32] = {
                                0
                            }
                            values: list[vec3] = {
                                { 0, 0, 0 }
                            }
                        }
                    }
                    emitOffset: embed = ValueVector3 {
                        constantValue: vec3 = { 0, 45, -5 }
                    }
                    emitRotationAngles: list[embed] = {
                        ValueFloat {}
                        ValueFloat {}
                    }
                    emitRotationAxes: list[vec3] = {
                        { 0, 0, 0 }
                        { 0, 0, 0 }
                    }
                }
                bindWeight: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                blendMode: u8 = 4
                birthColor: embed = ValueColor {
                    constantValue: vec4 = { 0.220004573, 0.680003047, 0.480003059, 0.220004573 }
                }
                color: embed = ValueColor {
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            0.100000001
                            0.461538464
                            0.730769217
                            1
                        }
                        values: list[vec4] = {
                            { 1, 1, 1, 0 }
                            { 1, 1, 1, 1 }
                            { 1, 1, 1, 0.833333313 }
                            { 1, 1, 1, 0.510416687 }
                            { 1, 1, 1, 0 }
                        }
                    }
                }
                lingerColor: embed = ValueColor {
                    constantValue: vec4 = { 0.796078444, 0.796078444, 0.796078444, 1 }
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            1
                        }
                        values: list[vec4] = {
                            { 0.796078444, 0.796078444, 0.796078444, 1 }
                            { 0.796078444, 0.796078444, 0.796078444, 0 }
                        }
                    }
                }
                pass: i16 = 100
                disableBackfaceCull: bool = true
                miscRenderFlags: u8 = 1
                particleIsLocalOrientation: flag = true
                isUniformScale: flag = true
                birthRotationalVelocity0: embed = ValueVector3 {
                    constantValue: vec3 = { 100, 0, 0 }
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    -1
                                    1
                                }
                            }
                            VfxProbabilityTableData {}
                            VfxProbabilityTableData {}
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[vec3] = {
                            { 100, 0, 0 }
                        }
                    }
                }
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 300, 1, 1 }
                }
                scale0: embed = ValueVector3 {
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        times: list[f32] = {
                            0
                            1
                        }
                        values: list[vec3] = {
                            { 0.5, 0, 0 }
                            { 0.800000012, 0, 0 }
                        }
                    }
                }
                texture: string = "ASSETS/Characters/Viego/Skins/Base/Particles/Viego_Base_spiritGlow.RuinedKing.dds"
                paletteDefinition: pointer = VfxPaletteDefinitionData {
                    palleteSrcMixColor: embed = ValueColor {
                        constantValue: vec4 = { 0.807843149, 0.517647088, 0.109803922, 0 }
                    }
                    paletteSelector: embed = ValueVector3 {
                        constantValue: vec3 = { 11, 0, 0 }
                    }
                    paletteCount: i32 = 32
                }
            }
            VfxEmitterDefinitionData {
                rate: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 50
                }
                lifetime: option[f32] = {
                    1
                }
                isSingleParticle: flag = true
                emitterName: string = "halo_glow"
                shape: embed = VfxShape {
                    birthTranslation: embed = ValueVector3 {
                        constantValue: vec3 = { 0, 45, -1 }
                    }
                }
                bindWeight: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                primitive: pointer = VfxPrimitiveMesh {
                    mMesh: embed = VfxMeshDefinitionData {
                        mSimpleMeshName: string = "ASSETS/Characters/Viego/Skins/Base/Particles/Viego_Base_P_Timer.RuinedKing.scb"
                    }
                }
                blendMode: u8 = 4
                birthColor: embed = ValueColor {
                    constantValue: vec4 = { 0.380392164, 0.807843149, 0.643137276, 1 }
                }
                color: embed = ValueColor {
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0.899999976
                            1
                        }
                        values: list[vec4] = {
                            { 1, 1, 1, 1 }
                            { 1, 0, 0, 1 }
                        }
                    }
                }
                pass: i16 = -5
                particleIsLocalOrientation: flag = true
                isUniformScale: flag = true
                birthRotationalVelocity0: embed = ValueVector3 {
                    constantValue: vec3 = { 0, 45, 0 }
                }
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 0.649999976, 0, 0 }
                }
                texture: string = "ASSETS/Characters/Viego/Skins/Base/Particles/Viego_Base_R_PraxisWaves.RuinedKing.dds"
                birthUVOffset: embed = ValueVector2 {
                    constantValue: vec2 = { 0, 0.200000003 }
                }
                texAddressModeBase: u8 = 2
                uvScale: embed = ValueVector2 {
                    constantValue: vec2 = { 1, 0.5 }
                }
            }
            VfxEmitterDefinitionData {
                rate: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 12
                }
                isSingleParticle: flag = true
                emitterLinger: option[f32] = {}
                emitterName: string = "CrownFinal"
                shape: embed = VfxShape {
                    birthTranslation: embed = ValueVector3 {
                        dynamics: pointer = VfxAnimatedVector3fVariableData {
                            probabilityTables: list[pointer] = {
                                VfxProbabilityTableData {}
                                VfxProbabilityTableData {}
                                VfxProbabilityTableData {}
                            }
                            times: list[f32] = {
                                0
                            }
                            values: list[vec3] = {
                                { 0, 0, 0 }
                            }
                        }
                    }
                    emitOffset: embed = ValueVector3 {
                        constantValue: vec3 = { 0, 34, 0 }
                    }
                    emitRotationAngles: list[embed] = {
                        ValueFloat {}
                        ValueFloat {}
                    }
                    emitRotationAxes: list[vec3] = {
                        { 0, 0, 0 }
                        { 0, 0, 0 }
                    }
                }
                bindWeight: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                primitive: pointer = VfxPrimitiveMesh {
                    mMesh: embed = VfxMeshDefinitionData {
                        mSimpleMeshName: string = "ASSETS/Characters/Viego/Skins/Base/Particles/Viego_Base_Crown_Final.RuinedKing.scb"
                    }
                }
                blendMode: u8 = 4
                color: embed = ValueColor {
                    constantValue: vec4 = { 0.192156866, 1, 0.623529434, 1 }
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            0.200000003
                            0.400000006
                            0.600000024
                            0.800000012
                            1
                        }
                        values: list[vec4] = {
                            { 0.192156866, 1, 0.623529434, 1 }
                            { 0.155232608, 0.807843149, 0.503713965, 1 }
                            { 0.192156866, 1, 0.623529434, 1 }
                            { 0.155232608, 0.807843149, 0.503713965, 1 }
                            { 0.192156866, 1, 0.623529434, 1 }
                            { 0.155232608, 0.807843149, 0.503713965, 1 }
                        }
                    }
                }
                pass: i16 = 100
                meshRenderFlags: u8 = 0
                alphaRef: u8 = 0
                disableBackfaceCull: bool = true
                miscRenderFlags: u8 = 1
                particleIsLocalOrientation: flag = true
                isUniformScale: flag = true
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 2.5, 20, 2.79999995 }
                }
                texture: string = "ASSETS/Characters/Viego/Skins/Base/Viego_Base_Crown_Sword_TX_CM.RuinedKing.dds"
                birthUVOffset: embed = ValueVector2 {
                    constantValue: vec2 = { 0, -0.75 }
                }
                texAddressModeBase: u8 = 2
            }
            VfxEmitterDefinitionData {
                rate: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = -1
                    dynamics: pointer = VfxAnimatedFloatVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    1
                                    1.20000005
                                }
                            }
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[f32] = {
                            -1
                        }
                    }
                }
                isSingleParticle: flag = true
                emitterLinger: option[f32] = {}
                emitterName: string = "Highlight3"
                shape: embed = VfxShape {
                    birthTranslation: embed = ValueVector3 {
                        constantValue: vec3 = { 0, 34, 0 }
                    }
                    emitOffset: embed = ValueVector3 {
                        dynamics: pointer = VfxAnimatedVector3fVariableData {
                            probabilityTables: list[pointer] = {
                                VfxProbabilityTableData {
                                    keyTimes: list[f32] = {
                                        0
                                        1
                                    }
                                    keyValues: list[f32] = {
                                        -1
                                        1
                                    }
                                }
                                VfxProbabilityTableData {
                                    keyTimes: list[f32] = {
                                        0
                                        1
                                    }
                                    keyValues: list[f32] = {
                                        -1
                                        1
                                    }
                                }
                                VfxProbabilityTableData {
                                    keyTimes: list[f32] = {
                                        0
                                        1
                                    }
                                    keyValues: list[f32] = {
                                        -1
                                        1
                                    }
                                }
                            }
                            times: list[f32] = {
                                0
                            }
                            values: list[vec3] = {
                                { 0, 0, 0 }
                            }
                        }
                    }
                    emitRotationAngles: list[embed] = {
                        ValueFloat {}
                        ValueFloat {}
                    }
                    emitRotationAxes: list[vec3] = {
                        { 0, 0, 0 }
                        { 0, 0, 0 }
                    }
                }
                bindWeight: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                primitive: pointer = VfxPrimitiveMesh {
                    mMesh: embed = VfxMeshDefinitionData {
                        mSimpleMeshName: string = "ASSETS/Characters/Viego/Skins/Base/Particles/Viego_Base_Crown_Final_Highlight.RuinedKing.scb"
                    }
                }
                blendMode: u8 = 1
                birthColor: embed = ValueColor {
                    constantValue: vec4 = { 0.180392161, 1, 0.87843138, 1 }
                }
                pass: i16 = 101
                meshRenderFlags: u8 = 0
                alphaRef: u8 = 0
                miscRenderFlags: u8 = 1
                particleIsLocalOrientation: flag = true
                isUniformScale: flag = true
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 2.5, 0, 0 }
                }
                texture: string = "ASSETS/Particles/Orianna_Base_BA_color-hold.dds"
                birthUVOffset: embed = ValueVector2 {
                    constantValue: vec2 = { 0, -0.75 }
                }
                texAddressModeBase: u8 = 2
                particleUVScrollRate: embed = IntegratedValueVector2 {
                    constantValue: vec2 = { 1, 0 }
                    dynamics: pointer = VfxAnimatedVector2fVariableData {
                        times: list[f32] = {
                            0
                        }
                        values: list[vec2] = {
                            { 1, 0 }
                        }
                    }
                }
            }
        }
        visibilityRadius: f32 = 25000
        particleName: string = "UltBook_OffCooldown_Crown"
        particlePath: string = "Maps/ModeSpecificData/ULTBOOK/Particles/UltBook_OffCooldown_Crown"
        soundOnCreateDefault: string = "Play_sfx_UltBook_offcooldowncrown"
    }
    0xae2179b9 = VfxSystemDefinitionData {
        complexEmitterDefinitionData: list[pointer] = {
            VfxEmitterDefinitionData {
                rate: embed = ValueFloat {
                    constantValue: f32 = 400
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 0.300000012
                    dynamics: pointer = VfxAnimatedFloatVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    0.5
                                    1
                                }
                            }
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[f32] = {
                            0.300000012
                        }
                    }
                }
                particleLinger: option[f32] = {
                    2
                }
                lifetime: option[f32] = {
                    0.25
                }
                emitterName: string = "MistSwirlAdd"
                birthOrbitalVelocity: embed = ValueVector3 {
                    constantValue: vec3 = { 0, 4, 0 }
                }
                birthVelocity: embed = ValueVector3 {
                    constantValue: vec3 = { -700, 200, 0 }
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    1
                                    1
                                }
                            }
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    0.5
                                    1.20000005
                                }
                            }
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    0.200000003
                                    1
                                }
                            }
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[vec3] = {
                            { -700, 200, 0 }
                        }
                    }
                }
                drag: embed = ValueVector3 {
                    constantValue: vec3 = { 3, 3, 3 }
                }
                shape: embed = VfxShape {
                    emitOffset: embed = ValueVector3 {
                        constantValue: vec3 = { 190, 40, 0 }
                        dynamics: pointer = VfxAnimatedVector3fVariableData {
                            probabilityTables: list[pointer] = {
                                VfxProbabilityTableData {
                                    keyTimes: list[f32] = {
                                        0
                                        1
                                    }
                                    keyValues: list[f32] = {
                                        1
                                        1
                                    }
                                }
                                VfxProbabilityTableData {
                                    keyTimes: list[f32] = {
                                        0
                                        1
                                    }
                                    keyValues: list[f32] = {
                                        0.800000012
                                        1.20000005
                                    }
                                }
                                VfxProbabilityTableData {
                                    keyTimes: list[f32] = {
                                        0
                                        1
                                    }
                                    keyValues: list[f32] = {
                                        0
                                        1
                                    }
                                }
                            }
                            times: list[f32] = {
                                0
                            }
                            values: list[vec3] = {
                                { 190, 40, 0 }
                            }
                        }
                    }
                    emitRotationAngles: list[embed] = {
                        ValueFloat {
                            constantValue: f32 = 1
                            dynamics: pointer = VfxAnimatedFloatVariableData {
                                probabilityTables: list[pointer] = {
                                    VfxProbabilityTableData {
                                        keyTimes: list[f32] = {
                                            0
                                            1
                                        }
                                        keyValues: list[f32] = {
                                            0
                                            360
                                        }
                                    }
                                }
                                times: list[f32] = {
                                    0
                                }
                                values: list[f32] = {
                                    1
                                }
                            }
                        }
                    }
                    emitRotationAxes: list[vec3] = {
                        { 0, 1.00000012, 0 }
                    }
                }
                blendMode: u8 = 4
                birthColor: embed = ValueColor {
                    constantValue: vec4 = { 0.0705882385, 0.854902029, 0.792156935, 0.58431375 }
                }
                color: embed = ValueColor {
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            0.5
                            1
                        }
                        values: list[vec4] = {
                            { 1, 1, 1, 0 }
                            { 1, 1, 1, 1 }
                            { 0, 0.0784310028, 0.337255001, 1 }
                        }
                    }
                }
                pass: i16 = 4
                isDirectionOriented: flag = true
                isRandomStartFrame: flag = true
                birthRotation0: embed = ValueVector3 {
                    constantValue: vec3 = { 90, 0, 0 }
                }
                isLocalOrientation: flag = false
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 40, 55, 0 }
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    0.5
                                    0.500999987
                                    1
                                }
                                keyValues: list[f32] = {
                                    1.25
                                    0.300000012
                                    -0.300000012
                                    -1.25
                                }
                            }
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    0.800000012
                                }
                                keyValues: list[f32] = {
                                    1
                                    1.25
                                }
                            }
                            VfxProbabilityTableData {}
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[vec3] = {
                            { 40, 55, 0 }
                        }
                    }
                }
                scale0: embed = ValueVector3 {
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        times: list[f32] = {
                            0
                            0.5
                            1
                        }
                        values: list[vec3] = {
                            { 1.5, 1.5, 1 }
                            { 1, 1, 1 }
                            { 0.5, 0.5, 1 }
                        }
                    }
                }
                texture: string = "ASSETS/Characters/Yorick/Skins/Base/Particles/Yorick_Base_E_SoulWispsAlpha2.dds"
                birthFrameRate: embed = ValueFloat {
                    constantValue: f32 = 0
                }
                numFrames: u16 = 16
                texDiv: vec2 = { 4, 4 }
            }
            VfxEmitterDefinitionData {
                timeBeforeFirstEmission: f32 = 0.200000003
                rate: embed = ValueFloat {
                    constantValue: f32 = 200
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 1
                    dynamics: pointer = VfxAnimatedFloatVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    0.5
                                    1.39999998
                                }
                            }
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[f32] = {
                            1
                        }
                    }
                }
                particleLinger: option[f32] = {
                    2
                }
                lifetime: option[f32] = {
                    0.699999988
                }
                emitterName: string = "MistSwirl1"
                birthVelocity: embed = ValueVector3 {
                    constantValue: vec3 = { 500, 200, 100 }
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    1
                                    1
                                }
                            }
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    1
                                    1.5
                                }
                            }
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    0.200000003
                                    1
                                }
                            }
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[vec3] = {
                            { 500, 200, 100 }
                        }
                    }
                }
                drag: embed = ValueVector3 {
                    constantValue: vec3 = { 5, 1, 1 }
                }
                shape: embed = VfxShape {
                    emitOffset: embed = ValueVector3 {
                        constantValue: vec3 = { 100, 40, 0 }
                        dynamics: pointer = VfxAnimatedVector3fVariableData {
                            probabilityTables: list[pointer] = {
                                VfxProbabilityTableData {
                                    keyTimes: list[f32] = {
                                        0
                                        1
                                    }
                                    keyValues: list[f32] = {
                                        0.800000012
                                        1
                                    }
                                }
                                VfxProbabilityTableData {}
                                VfxProbabilityTableData {
                                    keyTimes: list[f32] = {
                                        0
                                        1
                                    }
                                    keyValues: list[f32] = {
                                        0
                                        1
                                    }
                                }
                            }
                            times: list[f32] = {
                                0
                            }
                            values: list[vec3] = {
                                { 100, 40, 0 }
                            }
                        }
                    }
                    emitRotationAngles: list[embed] = {
                        ValueFloat {
                            constantValue: f32 = 1
                            dynamics: pointer = VfxAnimatedFloatVariableData {
                                probabilityTables: list[pointer] = {
                                    VfxProbabilityTableData {
                                        keyTimes: list[f32] = {
                                            0
                                            1
                                        }
                                        keyValues: list[f32] = {
                                            0
                                            360
                                        }
                                    }
                                }
                                times: list[f32] = {
                                    0
                                }
                                values: list[f32] = {
                                    1
                                }
                            }
                        }
                    }
                    emitRotationAxes: list[vec3] = {
                        { 0, 1.00000012, 0 }
                    }
                }
                primitive: pointer = VfxPrimitiveArbitraryQuad {}
                blendMode: u8 = 1
                color: embed = ValueColor {
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            0.400000006
                            0.5
                            1
                        }
                        values: list[vec4] = {
                            { 0, 0, 0, 0 }
                            { 0.00392200006, 0.168626994, 0.141176, 1 }
                            { 0, 0.133332998, 0.149020001, 1 }
                            { 0, 0.113724999, 0.219607994, 0 }
                        }
                    }
                }
                pass: i16 = 4
                modulationFactor: vec4 = { 0, 1, 1, 1 }
                isDirectionOriented: flag = true
                isRandomStartFrame: flag = true
                birthRotation0: embed = ValueVector3 {
                    constantValue: vec3 = { 90, 0, 0 }
                }
                isLocalOrientation: flag = false
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 90, 120, 0 }
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    0.5
                                    0.500999987
                                    1
                                }
                                keyValues: list[f32] = {
                                    1.25
                                    0.300000012
                                    -0.300000012
                                    -1.25
                                }
                            }
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    0.800000012
                                }
                                keyValues: list[f32] = {
                                    1
                                    1.25
                                }
                            }
                            VfxProbabilityTableData {}
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[vec3] = {
                            { 90, 120, 0 }
                        }
                    }
                }
                scale0: embed = ValueVector3 {
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        times: list[f32] = {
                            0
                            0.5
                            1
                        }
                        values: list[vec3] = {
                            { 1, 0.5, 1 }
                            { 1, 1, 1 }
                            { 0.200000003, 0.5, 1 }
                        }
                    }
                }
                texture: string = "ASSETS/Characters/Yorick/Skins/Base/Particles/Yorick_Base_E_SoulWispsAlpha2.dds"
                birthFrameRate: embed = ValueFloat {
                    constantValue: f32 = 0
                }
                numFrames: u16 = 16
                texDiv: vec2 = { 4, 4 }
            }
            VfxEmitterDefinitionData {
                timeBeforeFirstEmission: f32 = 0.100000001
                rate: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                lifetime: option[f32] = {
                    5.32999992
                }
                isSingleParticle: flag = true
                emitterName: string = "GroundShadow"
                shape: embed = VfxShape {
                    emitRotationAngles: list[embed] = {
                        ValueFloat {
                            constantValue: f32 = 1
                            dynamics: pointer = VfxAnimatedFloatVariableData {
                                probabilityTables: list[pointer] = {
                                    VfxProbabilityTableData {
                                        keyTimes: list[f32] = {
                                            0
                                            1
                                        }
                                        keyValues: list[f32] = {
                                            0
                                            360
                                        }
                                    }
                                }
                                times: list[f32] = {
                                    0
                                }
                                values: list[f32] = {
                                    1
                                }
                            }
                        }
                    }
                    emitRotationAxes: list[vec3] = {
                        { 0, 1, 0 }
                    }
                }
                bindWeight: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                primitive: pointer = VfxPrimitiveArbitraryQuad {}
                blendMode: u8 = 1
                birthColor: embed = ValueColor {
                    constantValue: vec4 = { 0, 0.121568635, 0.0941176564, 1 }
                }
                color: embed = ValueColor {
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            0.0500000007
                            0.699999988
                            1
                        }
                        values: list[vec4] = {
                            { 1, 1, 1, 0 }
                            { 1, 1, 1, 1 }
                            { 1, 1, 1, 1 }
                            { 1, 1, 1, 0 }
                        }
                    }
                }
                pass: i16 = 3
                alphaRef: u8 = 0
                isUniformScale: flag = true
                birthRotation0: embed = ValueVector3 {
                    constantValue: vec3 = { 90, -90, 0 }
                }
                isLocalOrientation: flag = false
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 270, 130, 0 }
                }
                scale0: embed = ValueVector3 {
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        times: list[f32] = {
                            0
                            0.300000012
                            0.5
                            1
                        }
                        values: list[vec3] = {
                            { 0, 0.5, 1 }
                            { 0.699999988, 0.899999976, 1 }
                            { 1, 1, 1 }
                            { 0.300000012, 0.300000012, 1 }
                        }
                    }
                }
                texture: string = "ASSETS/Characters/Yorick/Skins/Base/Particles/Yorick_Base_R_Spotlight.dds"
            }
            VfxEmitterDefinitionData {
                rate: embed = ValueFloat {
                    constantValue: f32 = 5
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                particleLinger: option[f32] = {
                    11
                }
                lifetime: option[f32] = {
                    0.400000006
                }
                emitterName: string = "ShadowGather"
                shape: embed = VfxShape {
                    birthTranslation: embed = ValueVector3 {
                        dynamics: pointer = VfxAnimatedVector3fVariableData {
                            probabilityTables: list[pointer] = {
                                VfxProbabilityTableData {}
                                VfxProbabilityTableData {
                                    keyTimes: list[f32] = {
                                        0
                                        1
                                    }
                                    keyValues: list[f32] = {
                                        -0.5
                                        1.5
                                    }
                                }
                                VfxProbabilityTableData {}
                            }
                            times: list[f32] = {
                                0
                            }
                            values: list[vec3] = {
                                { 0, 0, 0 }
                            }
                        }
                    }
                }
                primitive: pointer = VfxPrimitiveMesh {
                    mMesh: embed = VfxMeshDefinitionData {
                        mSimpleMeshName: string = "ASSETS/Characters/Yorick/Skins/Base/Particles/Yorick_Base_R_Gather.scb"
                    }
                }
                blendMode: u8 = 1
                birthColor: embed = ValueColor {
                    constantValue: vec4 = { 0, 0.149019614, 0.10980393, 0.960784376 }
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            1
                        }
                        values: list[vec4] = {
                            { 0, 0.149019614, 0.10980393, 0.960784376 }
                            { 0, 0.0841522738, 0.0620069429, 0.960784376 }
                        }
                    }
                }
                color: embed = ValueColor {
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            0.200000003
                            0.75
                            1
                        }
                        values: list[vec4] = {
                            { 1, 1, 1, 0 }
                            { 1, 1, 1, 1 }
                            { 0.564706028, 0.564706028, 0.564706028, 1 }
                            { 0, 0, 0, 0 }
                        }
                    }
                }
                pass: i16 = -10
                disableBackfaceCull: bool = true
                miscRenderFlags: u8 = 1
                isGroundLayer: flag = true
                birthRotation0: embed = ValueVector3 {
                    constantValue: vec3 = { 0, 1, 0 }
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {}
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    0
                                    360
                                }
                            }
                            VfxProbabilityTableData {}
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[vec3] = {
                            { 0, 1, 0 }
                        }
                    }
                }
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 3, 0, 3 }
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    0.5
                                    0.500999987
                                }
                                keyValues: list[f32] = {
                                    1
                                    1
                                    -1
                                }
                            }
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    1
                                    1
                                }
                            }
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    0.5
                                    0.500999987
                                }
                                keyValues: list[f32] = {
                                    1
                                    1
                                    1
                                }
                            }
                        }
                        times: list[f32] = {
                            0
                            1
                        }
                        values: list[vec3] = {
                            { 6, 0, 6 }
                            { 3, 0, 3 }
                        }
                    }
                }
                scale0: embed = ValueVector3 {
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        times: list[f32] = {
                            0
                            1
                        }
                        values: list[vec3] = {
                            { 1, 0.5, 1 }
                            { 1.29999995, 1, 1.29999995 }
                        }
                    }
                }
                texture: string = "ASSETS/Characters/Yorick/Skins/Base/Particles/Yorick_Base_R_GatherShadow.dds"
                birthUvScrollRate: embed = ValueVector2 {
                    constantValue: vec2 = { 0, 2 }
                }
                birthUVOffset: embed = ValueVector2 {
                    constantValue: vec2 = { 0, -1 }
                }
                texAddressModeBase: u8 = 2
                textureMult: string = "ASSETS/Characters/Yorick/Skins/Base/Particles/Yorick_Base_R_ShadowStreamers_Mult.dds"
                birthUvScrollRateMult: embed = ValueVector2 {
                    constantValue: vec2 = { 0, 0.5 }
                }
                birthUVOffsetMult: embed = ValueVector2 {
                    constantValue: vec2 = { 0, 1 }
                    dynamics: pointer = VfxAnimatedVector2fVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {}
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    0
                                    1
                                }
                            }
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[vec2] = {
                            { 0, 1 }
                        }
                    }
                }
            }
        }
        particleName: string = "UltBook_First_Crown_Spawn"
        particlePath: string = "Maps/ModeSpecificData/ULTBOOK/Particles/UltBook_First_Crown_Spawn"
        soundOnCreateDefault: string = "Play_sfx_UltBook_firstcrown"
        flags: u8 = 199
    }
    0xedda3044 = VfxSystemDefinitionData {
        complexEmitterDefinitionData: list[pointer] = {
            VfxEmitterDefinitionData {
                rate: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                lifetime: option[f32] = {
                    1
                }
                isSingleParticle: flag = true
                emitterName: string = "Avatar4"
                bindWeight: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                material: link = 0xab8e40ff
                materialDrivers: map[string,pointer] = {
                    "Fresnel_Color" = VfxColorOverLifeMaterialDriver {
                        colors: embed = VfxAnimatedColorVariableData {
                            times: list[f32] = {
                                0
                                0.519999981
                                0.946666658
                                1
                            }
                            values: list[vec4] = {
                                { 1, 1, 1, 1 }
                                { 1, 1, 1, 1 }
                                { 1, 1, 1, 1 }
                                { 1, 1, 1, 1 }
                            }
                        }
                    }
                }
                renderPhaseOverride: u8 = 0
                primitive: pointer = VfxPrimitiveMesh {
                    mMesh: embed = VfxMeshDefinitionData {
                        mLockMeshToAttachment: bool = true
                    }
                }
                blendMode: u8 = 4
                birthColor: embed = ValueColor {
                    constantValue: vec4 = { 1, 1, 1, 0.431372553 }
                }
                color: embed = ValueColor {
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            0.200000003
                            1
                        }
                        values: list[vec4] = {
                            { 1, 1, 1, 0 }
                            { 1, 1, 1, 1 }
                            { 1, 1, 1, 0 }
                        }
                    }
                }
                pass: i16 = 2
                reflectionDefinition: pointer = VfxReflectionDefinitionData {
                    reflectionFresnelColor: vec4 = { 1, 1, 1, 0.590005338 }
                    fresnel: f32 = 0.200000003
                    fresnelColor: vec4 = { 0.109803922, 0.0196078438, 0.200000003, 1 }
                }
                depthBiasFactors: vec2 = { -1, -12 }
                disableBackfaceCull: bool = true
                miscRenderFlags: u8 = 1
                particleIsLocalOrientation: flag = true
                isUniformScale: flag = true
                isRandomStartFrame: flag = true
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 1.00999999, 1.00999999, 1.00999999 }
                }
                texture: string = "ASSETS/Characters/Sylas/Skins/Base/Particles/Sylas_Base_W_white_RGB.dds"
                birthUvScrollRate: embed = ValueVector2 {
                    constantValue: vec2 = { 0.100000001, 0.100000001 }
                }
            }
            VfxEmitterDefinitionData {
                rate: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 0.349999994
                }
                particleLinger: option[f32] = {
                    0.5
                }
                lifetime: option[f32] = {
                    1
                }
                emitterName: string = "Shadow_ground"
                primitive: pointer = VfxPrimitiveArbitraryQuad {}
                blendMode: u8 = 1
                birthColor: embed = ValueColor {
                    constantValue: vec4 = { 0.109803922, 0.0862745121, 0.200000003, 1 }
                }
                color: embed = ValueColor {
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            0.200000003
                            0.669662893
                            1
                        }
                        values: list[vec4] = {
                            { 1, 1, 1, 0 }
                            { 1, 1, 1, 1 }
                            { 1, 1, 1, 1 }
                            { 0, 0, 0, 0 }
                        }
                    }
                }
                pass: i16 = -10
                isGroundLayer: flag = true
                birthRotation0: embed = ValueVector3 {
                    constantValue: vec3 = { 90, 0, 90 }
                }
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 200, 200, 50 }
                }
                scale0: embed = ValueVector3 {
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        times: list[f32] = {
                            0
                            0.139887646
                            0.412921339
                            0.80898875
                            1
                        }
                        values: list[vec3] = {
                            { 0, 0, 0 }
                            { 0.683333337, 1, 1 }
                            { 1.04444444, 1.20965314, 1.20965314 }
                            { 1.12222219, 1.39211154, 1.39211154 }
                            { 0.833333313, 1.5, 1.5 }
                        }
                    }
                }
                texture: string = "ASSETS/Characters/Sylas/Skins/Base/Particles/common_Aura_Self.dds"
            }
            VfxEmitterDefinitionData {
                rate: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 0.349999994
                }
                particleLinger: option[f32] = {
                    11.5
                }
                lifetime: option[f32] = {
                    1
                }
                emitterName: string = "Shadow2"
                shape: embed = VfxShape {
                    emitOffset: embed = ValueVector3 {
                        constantValue: vec3 = { 0, 80, 0 }
                    }
                }
                blendMode: u8 = 1
                birthColor: embed = ValueColor {
                    constantValue: vec4 = { 0.109803922, 0.0862745121, 0.200000003, 1 }
                }
                color: embed = ValueColor {
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            0.200000003
                            0.669662893
                            1
                        }
                        values: list[vec4] = {
                            { 1, 1, 1, 0 }
                            { 1, 1, 1, 1 }
                            { 1, 1, 1, 1 }
                            { 0, 0, 0, 0 }
                        }
                    }
                }
                pass: i16 = 10
                isGroundLayer: flag = true
                birthRotation0: embed = ValueVector3 {
                    constantValue: vec3 = { 90, 0, 0 }
                }
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 200, 200, 50 }
                }
                scale0: embed = ValueVector3 {
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        times: list[f32] = {
                            0
                            0.139887646
                            0.412921339
                            0.80898875
                            1
                        }
                        values: list[vec3] = {
                            { 0, 0, 0 }
                            { 0.683333337, 1, 1 }
                            { 1.04444444, 1.20965314, 1.20965314 }
                            { 1.12222219, 1.39211154, 1.39211154 }
                            { 0.833333313, 1.5, 1.5 }
                        }
                    }
                }
                texture: string = "ASSETS/Characters/Sylas/Skins/Base/Particles/common_Aura_Self.dds"
            }
            VfxEmitterDefinitionData {
                timeBeforeFirstEmission: f32 = 0.0500000007
                rate: embed = ValueFloat {
                    constantValue: f32 = 15
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 0.660000026
                    dynamics: pointer = VfxAnimatedFloatVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    0.75
                                    1
                                }
                                keyValues: list[f32] = {
                                    0.300000012
                                    1
                                    1.29999995
                                }
                            }
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[f32] = {
                            0.660000026
                        }
                    }
                }
                particleLinger: option[f32] = {
                    1
                }
                lifetime: option[f32] = {
                    0.200000003
                }
                isSingleParticle: flag = true
                emitterLinger: option[f32] = {
                    1
                }
                emitterName: string = "dustPoofs"
                birthOrbitalVelocity: embed = ValueVector3 {
                    constantValue: vec3 = { 0, 1, 0 }
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {}
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    0.300000012
                                    1
                                }
                            }
                            VfxProbabilityTableData {}
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[vec3] = {
                            { 0, 1, 0 }
                        }
                    }
                }
                birthVelocity: embed = ValueVector3 {
                    constantValue: vec3 = { 1500, 0, 0 }
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    0.699999988
                                    1
                                }
                            }
                            VfxProbabilityTableData {}
                            VfxProbabilityTableData {}
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[vec3] = {
                            { 1500, 0, 0 }
                        }
                    }
                }
                birthDrag: embed = ValueVector3 {
                    constantValue: vec3 = { 10, 4, 10 }
                }
                worldAcceleration: embed = IntegratedValueVector3 {
                    constantValue: vec3 = { 0, -150, 0 }
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        times: list[f32] = {
                            0
                        }
                        values: list[vec3] = {
                            { 0, -150, 0 }
                        }
                    }
                }
                shape: embed = VfxShape {
                    emitOffset: embed = ValueVector3 {
                        constantValue: vec3 = { 60, 50, 0 }
                        dynamics: pointer = VfxAnimatedVector3fVariableData {
                            probabilityTables: list[pointer] = {
                                VfxProbabilityTableData {
                                    keyTimes: list[f32] = {
                                        0
                                        1
                                    }
                                    keyValues: list[f32] = {
                                        0
                                        1
                                    }
                                }
                                VfxProbabilityTableData {
                                    keyTimes: list[f32] = {
                                        0
                                        1
                                    }
                                    keyValues: list[f32] = {
                                        -1
                                        1
                                    }
                                }
                                VfxProbabilityTableData {
                                    keyTimes: list[f32] = {
                                        0
                                        1
                                    }
                                    keyValues: list[f32] = {
                                        -1
                                        1
                                    }
                                }
                            }
                            times: list[f32] = {
                                0
                            }
                            values: list[vec3] = {
                                { 60, 50, 0 }
                            }
                        }
                    }
                    emitRotationAngles: list[embed] = {
                        ValueFloat {
                            constantValue: f32 = 1
                            dynamics: pointer = VfxAnimatedFloatVariableData {
                                probabilityTables: list[pointer] = {
                                    VfxProbabilityTableData {
                                        keyTimes: list[f32] = {
                                            0
                                            1
                                        }
                                        keyValues: list[f32] = {
                                            0
                                            360
                                        }
                                    }
                                }
                                times: list[f32] = {
                                    0
                                }
                                values: list[f32] = {
                                    1
                                }
                            }
                        }
                    }
                    emitRotationAxes: list[vec3] = {
                        { 0, 1, 0 }
                    }
                }
                blendMode: u8 = 1
                birthColor: embed = ValueColor {
                    constantValue: vec4 = { 0.0745098069, 0.0784313753, 0.125490203, 1 }
                }
                color: embed = ValueColor {
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            0.100000001
                            0.400000006
                            1
                        }
                        values: list[vec4] = {
                            { 1, 1, 1, 1 }
                            { 1, 1, 1, 0.97999543 }
                            { 1, 1, 1, 0.659998477 }
                            { 1, 1, 1, 0 }
                        }
                    }
                }
                pass: i16 = 10
                alphaRef: u8 = 0
                alphaErosionDefinition: pointer = VfxAlphaErosionDefinitionData {
                    erosionDriveCurve: embed = ValueFloat {
                        dynamics: pointer = VfxAnimatedFloatVariableData {
                            times: list[f32] = {
                                0
                                0.100000001
                                1
                            }
                            values: list[f32] = {
                                0
                                0
                                0.600000024
                            }
                        }
                    }
                    erosionMapName: string = "ASSETS/Characters/Sylas/Skins/Base/Particles/Sylas_Base_E_SmokeErode.dds"
                    erosionMapChannelMixer: embed = ValueColor {
                        constantValue: vec4 = { 1, 0, 0, 0 }
                    }
                }
                miscRenderFlags: u8 = 1
                isUniformScale: flag = true
                isRandomStartFrame: flag = true
                birthRotation0: embed = ValueVector3 {
                    constantValue: vec3 = { 1, 0, 0 }
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    0
                                    360
                                }
                            }
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    0
                                    360
                                }
                            }
                            VfxProbabilityTableData {}
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[vec3] = {
                            { 1, 0, 0 }
                        }
                    }
                }
                birthRotationalVelocity0: embed = ValueVector3 {
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    -1
                                    1
                                }
                            }
                            VfxProbabilityTableData {}
                            VfxProbabilityTableData {}
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[vec3] = {
                            { 0, 0, 0 }
                        }
                    }
                }
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 70, 150, 150 }
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    0.699999988
                                    1.29999995
                                }
                            }
                            VfxProbabilityTableData {}
                            VfxProbabilityTableData {}
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[vec3] = {
                            { 70, 150, 150 }
                        }
                    }
                }
                scale0: embed = ValueVector3 {
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        times: list[f32] = {
                            0
                            0.306233048
                            0.644986451
                            1
                        }
                        values: list[vec3] = {
                            { 1, 0.800000012, 0.800000012 }
                            { 1.02189779, 0.555013537, 0.555013537 }
                            { 1.20000005, 0.284010857, 0.284010857 }
                            { 1.5, 0, 0 }
                        }
                    }
                }
                scaleBirthScaleByBoundObjectSize: f32 = 0.00400000019
                texture: string = "ASSETS/Characters/Sylas/Skins/Base/Particles/Sylas_Base_E_sand_smoke.dds"
                numFrames: u16 = 4
                texDiv: vec2 = { 2, 2 }
            }
            VfxEmitterDefinitionData {
                rate: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 0.300000012
                }
                lifetime: option[f32] = {
                    0.5
                }
                isSingleParticle: flag = true
                emitterName: string = "distort"
                shape: embed = VfxShape {
                    emitOffset: embed = ValueVector3 {
                        constantValue: vec3 = { 0, 30, 0 }
                    }
                }
                particleColorTexture: string = "ASSETS/Characters/Sylas/Skins/Base/Particles/common_color-rampdown32.dds"
                blendMode: u8 = 1
                color: embed = ValueColor {
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            0.300000012
                            1
                        }
                        values: list[vec4] = {
                            { 0.990005314, 1, 1, 1 }
                            { 1, 1, 1, 1 }
                            { 1, 1, 1, 0 }
                        }
                    }
                }
                pass: i16 = 1
                meshRenderFlags: u8 = 0
                distortionDefinition: pointer = VfxDistortionDefinitionData {
                    distortion: f32 = 0.0625
                    normalMapTexture: string = "ASSETS/Characters/Sylas/Skins/Base/Particles/common_distort-soft-shockwave.dds"
                }
                isUniformScale: flag = true
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 110, 150, 150 }
                }
                scale0: embed = ValueVector3 {
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        times: list[f32] = {
                            0
                            0.992920339
                        }
                        values: list[vec3] = {
                            { 1, 1, 1 }
                            { 2, 3, 3 }
                        }
                    }
                }
                texture: string = "ASSETS/Characters/Sylas/Skins/Base/Particles/common_Aura_Self.dds"
                birthScale1: embed = ValueFloat {
                    constantValue: f32 = 150
                }
                scale1: embed = ValueFloat {
                    dynamics: pointer = VfxAnimatedFloatVariableData {
                        times: list[f32] = {
                            0
                            1
                        }
                        values: list[f32] = {
                            1
                            3
                        }
                    }
                }
                particleBind: vec2 = { 1, 1 }
            }
            VfxEmitterDefinitionData {
                rate: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 0.200000003
                }
                lifetime: option[f32] = {
                    0.5
                }
                isSingleParticle: flag = true
                emitterName: string = "flare"
                shape: embed = VfxShape {
                    emitOffset: embed = ValueVector3 {
                        constantValue: vec3 = { 0, 30, 0 }
                    }
                }
                particleColorTexture: string = "ASSETS/Characters/Sylas/Skins/Base/Particles/common_color-rampdown32.dds"
                blendMode: u8 = 4
                birthColor: embed = ValueColor {
                    constantValue: vec4 = { 0.494117647, 0.611764729, 1, 0.501960814 }
                }
                color: embed = ValueColor {
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            0.300000012
                            0.699999988
                            1
                        }
                        values: list[vec4] = {
                            { 0.990005314, 1, 1, 1 }
                            { 1, 1, 1, 0.540001512 }
                            { 1, 1, 1, 0.100007631 }
                            { 1, 1, 1, 0 }
                        }
                    }
                }
                pass: i16 = 50
                meshRenderFlags: u8 = 0
                isUniformScale: flag = true
                birthRotation0: embed = ValueVector3 {
                    constantValue: vec3 = { 90, 0, 0 }
                }
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 160, 150, 150 }
                }
                scale0: embed = ValueVector3 {
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        times: list[f32] = {
                            0
                            0.257865161
                            0.620786488
                            1
                        }
                        values: list[vec3] = {
                            { 1, 1, 1 }
                            { 1.95555556, 3, 3 }
                            { 2.38518524, 3, 3 }
                            { 2.65555549, 3, 3 }
                        }
                    }
                }
                texture: string = "ASSETS/Characters/Sylas/Skins/Base/Particles/Sylas_Base_Q_hit_flash.dds"
                birthScale1: embed = ValueFloat {
                    constantValue: f32 = 150
                }
                scale1: embed = ValueFloat {
                    dynamics: pointer = VfxAnimatedFloatVariableData {
                        times: list[f32] = {
                            0
                            1
                        }
                        values: list[f32] = {
                            1
                            3
                        }
                    }
                }
                particleBind: vec2 = { 1, 1 }
            }
            VfxEmitterDefinitionData {
                timeBeforeFirstEmission: f32 = 0.400000006
                rate: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 1.5
                }
                particleLinger: option[f32] = {
                    0.5
                }
                lifetime: option[f32] = {
                    1.5
                }
                emitterName: string = "Shadow_channeled"
                primitive: pointer = VfxPrimitiveArbitraryQuad {}
                blendMode: u8 = 1
                birthColor: embed = ValueColor {
                    constantValue: vec4 = { 0.110002287, 0.0899977088, 0.200000003, 0.400000006 }
                }
                color: embed = ValueColor {
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            0.38820225
                            0.506741583
                            1
                        }
                        values: list[vec4] = {
                            { 1, 1, 1, 0 }
                            { 1, 1, 1, 1 }
                            { 1, 1, 1, 1 }
                            { 0, 0, 0, 0 }
                        }
                    }
                }
                pass: i16 = -10
                alphaRef: u8 = 0
                isUniformScale: flag = true
                isGroundLayer: flag = true
                birthRotation0: embed = ValueVector3 {
                    constantValue: vec3 = { 90, 0, 90 }
                }
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 230, 200, 50 }
                }
                scale0: embed = ValueVector3 {
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        times: list[f32] = {
                            0
                            0.5
                            1
                        }
                        values: list[vec3] = {
                            { 1, 0, 0 }
                            { 1.20000005, 1.39211154, 1.39211154 }
                            { 1, 1.5, 1.5 }
                        }
                    }
                }
                texture: string = "ASSETS/Characters/Sylas/Skins/Base/Particles/common_Aura_Self.dds"
            }
        }
        particleName: string = "UltBook_Clone_Transform_Master"
        particlePath: string = "Maps/ModeSpecificData/ULTBOOK/Particles/UltBook_Clone_Transform_Master"
    }
    0x80aac202 = AbilityObject {
        mRootSpell: link = 0x86a9f4c1
        mChildSpells: list[link] = {
            0x86a9f4c1
            0x84a9f19b
            0xab76dcdb
            0x272da2ac
            0x28cd8417
            0xaf6e933c
            0xbc568f9b
        }
        mName: string = "UltBook_GwenR"
    }
    0x272da2ac = SpellObject {
        mScriptName: string = "UltBook_GwenRMis"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 6154
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Gwen_R3.Gwen.dds"
            }
            mChannelDuration: list[f32] = {
                1
                1
                1
                1
                1
                1
                1
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            0x3d746f1f: u8 = 1
            mCantCancelWhileWindingUp: bool = true
            mChannelIsInterruptedByDisables: bool = false
            mChannelIsInterruptedByAttacking: bool = false
            mSpellRevealsChampion: bool = false
            mCanMoveWhileChanneling: bool = true
            mShowChannelBar: bool = false
            alwaysSnapFacing: bool = true
            castRange: list[f32] = {
                1350
                1350
                1350
                1350
                1350
                1350
                1350
            }
            castConeAngle: f32 = 0
            castConeDistance: f32 = 0
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 120
                movementComponent: pointer = FixedSpeedMovement {
                    mProjectTargetToCastRange: bool = true
                    mSpeed: f32 = 1800
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                    mOffsetInitialTargetHeight: f32 = 100
                }
                heightSolver: pointer = BlendedLinearHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                    WidthPerSecond {
                        mWidthPerSecond: f32 = -150
                    }
                    0x72f86c81 {
                        0xccfd27e6: f32 = 0.400000006
                    }
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 12
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = direction {}
            mSpellCooldownOrSealedQueueThreshold: option[f32] = {
                0.275000006
            }
            0x03f432a6: u8 = 1
            0x00f7e5bc: bool = true
        }
    }
    0x28cd8417 = SpellObject {
        mScriptName: string = "UltBook_GwenRMis_VisualOnly"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 6154
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Gwen_R3.Gwen.dds"
            }
            mChannelDuration: list[f32] = {
                1
                1
                1
                1
                1
                1
                1
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            0x3d746f1f: u8 = 1
            mCantCancelWhileWindingUp: bool = true
            mChannelIsInterruptedByDisables: bool = false
            mChannelIsInterruptedByAttacking: bool = false
            mSpellRevealsChampion: bool = false
            mCanMoveWhileChanneling: bool = true
            mShowChannelBar: bool = false
            alwaysSnapFacing: bool = true
            bHaveHitEffect: bool = true
            castRange: list[f32] = {
                1300
                1300
                1300
                1300
                1300
                1300
                1300
            }
            castConeAngle: f32 = 0
            castConeDistance: f32 = 0
            mMissileSpec: pointer = MissileSpecification {
                movementComponent: pointer = FixedSpeedMovement {
                    mProjectTargetToCastRange: bool = true
                    mSpeed: f32 = 1800
                    mTracksTarget: bool = false
                    mOffsetInitialTargetHeight: f32 = 100
                }
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 12
            mMissileEffectKey: hash = 0x62f914d5
            0x92a53e77: list[hash] = {
                0x92510c29
            }
            mHitEffectKey: hash = 0x1636d8f9
            bHaveHitBone: bool = true
            mHitBoneName: string = "C_BuffBone_Glb_Center_Loc"
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = direction {}
            mSpellCooldownOrSealedQueueThreshold: option[f32] = {
                0.275000006
            }
            0x03f432a6: u8 = 1
            0x00f7e5bc: bool = true
        }
    }
    0x4b9cab3b = 0xefc7f35c {
        0x81cd26c4: file = 0xa48a85e6c359ad05
    }
    0x84a9f19b = SpellObject {
        mScriptName: string = "UltBook_GwenP"
        mSpell: pointer = SpellDataResource {
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "ExecuteThreshold"
                    mValues: list[f32] = {
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                    }
                    mBaseP: f32 = 0.400000006
                    mFormula: string = "P + 0"
                }
            }
            0x94572284: map[hash,pointer] = {
                "HealingPercent" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NumberCalculationPart {
                            mNumber: f32 = 0.699999988
                        }
                    }
                    mDisplayAsPercent: bool = true
                    0xcbcac618: u8 = 5
                    0x37070a8d: u8 = 5
                    0xe6eebb2f: u8 = 5
                }
                0x540bce84 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NumberCalculationPart {
                            mNumber: f32 = 1
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.00800000038
                        }
                    }
                    mDisplayAsPercent: bool = true
                }
                0x2e2d4a01 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        ByCharLevelInterpolationCalculationPart {
                            mStartValue: f32 = 12
                            mEndValue: f32 = 30
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.0700000003
                        }
                    }
                }
                0x545ec9b9 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        ByCharLevelInterpolationCalculationPart {
                            mStartValue: f32 = 8
                            mEndValue: f32 = 30
                        }
                    }
                }
                0xa5e6df7c = GameCalculationModified {
                    mModifiedGameCalculation: hash = 0x540bce84
                    mMultiplier: pointer = NumberCalculationPart {
                        mNumber: f32 = 0.00999999978
                    }
                }
                0x8809e19c = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NumberCalculationPart {
                            mNumber: f32 = 10
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.25
                        }
                    }
                }
                0x4cf085f2 = GameCalculationModified {
                    mModifiedGameCalculation: hash = 0x540bce84
                    mMultiplier: pointer = NumberCalculationPart {
                        mNumber: f32 = 0.0599999987
                    }
                    0x37070a8d: u8 = 6
                }
                0x8277cced = GameCalculationModified {
                    mModifiedGameCalculation: hash = 0x540bce84
                    mMultiplier: pointer = NumberCalculationPart {
                        mNumber: f32 = 0.0900000036
                    }
                    0x37070a8d: u8 = 6
                }
                0x4197830d = GameCalculationModified {
                    mModifiedGameCalculation: hash = 0x540bce84
                    mMultiplier: pointer = NumberCalculationPart {
                        mNumber: f32 = 0.0299999993
                    }
                }
                0x4097817a = GameCalculationModified {
                    mModifiedGameCalculation: hash = 0x540bce84
                    mMultiplier: pointer = NumberCalculationPart {
                        mNumber: f32 = 0.0500000007
                    }
                }
                0x5bade13c = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        BuffCounterByCoefficientCalculationPart {
                            mCoefficient: f32 = 1
                            mBuffName: hash = 0x9d0c98ec
                        }
                    }
                }
            }
            mAnimationName: string = ""
            mImgIconName: list[string] = {
                "ASSETS/Characters/Gwen/HUD/Icons2D/Gwen_Passive.Gwen.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            cannotBeSuppressed: bool = true
            canCastWhileDisabled: bool = true
            castRange: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            castConeAngle: f32 = 0
            castConeDistance: f32 = 0
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
            }
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_GwenP"
                    mFormat: link = "UX/Tooltips/Passive"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_GwenP_Name"
                        "keyTooltip" = "Spell_GwenP_Tooltip"
                        "keySummary" = "Spell_GwenP_Summary"
                        "keyTooltipExtended" = "Spell_GwenP_TooltipExtended"
                    }
                }
            }
        }
    }
    0x86a9f4c1 = SpellObject {
        mScriptName: string = "UltBook_GwenR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "DebuffDuration"
                    mValues: list[f32] = {
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                    }
                    mBaseP: f32 = 1.5
                }
                SpellDataValue {
                    mName: string = "SlowAmount"
                    mValues: list[f32] = {
                        0.150000006
                        0.150000006
                        0.150000006
                        0.150000006
                        0.150000006
                        0.150000006
                        0.150000006
                    }
                    mBaseP: f32 = 0.150000006
                }
                SpellDataValue {
                    mName: string = "BaseDamage"
                    mValues: list[f32] = {
                        5
                        30
                        55
                        80
                        105
                        130
                        155
                    }
                    mBaseP: f32 = 5
                    mFormula: string = "P + 25"
                }
                SpellDataValue {
                    mName: string = "InitialSlow"
                    mValues: list[f32] = {
                        -0.300000012
                        -0.400000006
                        -0.5
                        -0.600000024
                        -0.699999988
                        -0.800000012
                        -0.899999976
                    }
                    mBaseP: f32 = -0.300000012
                    mFormula: string = "P - .1"
                }
                SpellDataValue {
                    mName: string = "SubsequentSlow"
                    mValues: list[f32] = {
                        -0.100000001
                        -0.150000006
                        -0.200000003
                        -0.25
                        -0.300000012
                        -0.349999994
                        -0.400000006
                    }
                    mBaseP: f32 = -0.100000001
                    mFormula: string = "P  -.05"
                }
                SpellDataValue {
                    mName: string = "ExecuteThreshold"
                    mValues: list[f32] = {
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                    }
                    mBaseP: f32 = 0.400000006
                    mFormula: string = "P + 0"
                }
            }
            0x94572284: map[hash,pointer] = {
                "TotalDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "baseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.0799999982
                        }
                    }
                }
                "MaxDamage" = GameCalculationModified {
                    mModifiedGameCalculation: hash = "TotalDamage"
                    mMultiplier: pointer = NumberCalculationPart {
                        mNumber: f32 = 9
                    }
                }
                0x60e63441 = GameCalculationModified {
                    mModifiedGameCalculation: hash = "TotalDamage"
                    mMultiplier: pointer = NumberCalculationPart {
                        mNumber: f32 = 3
                    }
                }
                0x62e63767 = GameCalculationModified {
                    mModifiedGameCalculation: hash = "TotalDamage"
                    mMultiplier: pointer = NumberCalculationPart {
                        mNumber: f32 = 5
                    }
                }
                0x545ec9b9 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        ByCharLevelInterpolationCalculationPart {
                            mStartValue: f32 = 8
                            mEndValue: f32 = 30
                        }
                    }
                }
                "HealingPercent" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NumberCalculationPart {
                            mNumber: f32 = 0.699999988
                        }
                    }
                    mDisplayAsPercent: bool = true
                    0xcbcac618: u8 = 5
                    0x37070a8d: u8 = 5
                    0xe6eebb2f: u8 = 5
                }
                0x8809e19c = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NumberCalculationPart {
                            mNumber: f32 = 10
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.25
                        }
                    }
                }
                0xa5e6df7c = GameCalculationModified {
                    mModifiedGameCalculation: hash = 0x540bce84
                    mMultiplier: pointer = NumberCalculationPart {
                        mNumber: f32 = 0.00999999978
                    }
                }
                0x540bce84 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NumberCalculationPart {
                            mNumber: f32 = 1
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.00800000038
                        }
                    }
                    mDisplayAsPercent: bool = true
                }
            }
            mCoefficient: f32 = 0.600000024
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Gwen_Square_0.Gwen.dds"
                "UltBook_Gwen_R2.Gwen.dds"
                "UltBook_Gwen_R3.Gwen.dds"
            }
            mCastTime: f32 = 0.25
            cooldownTime: list[f32] = {
                10
                120
                100
                80
                8.5
                8
                7.5
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            0x3d746f1f: u8 = 2
            mCantCancelWhileWindingUp: bool = true
            mChannelIsInterruptedByDisables: bool = false
            mChannelIsInterruptedByAttacking: bool = false
            mCanMoveWhileChanneling: bool = true
            mShowChannelBar: bool = false
            alwaysSnapFacing: bool = true
            bHaveHitEffect: bool = true
            mDoesNotConsumeMana: bool = true
            castRange: list[f32] = {
                1300
                1300
                1300
                1300
                1300
                1300
                1300
            }
            castRangeDisplayOverride: list[f32] = {
                1200
                1200
                1200
                1200
                1200
                1200
                1200
            }
            castConeAngle: f32 = 0
            castConeDistance: f32 = 0
            castFrame: f32 = 12
            mMissileEffectKey: hash = 0x62f914d5
            0x63060019: link = 0x4b9cab3b
            0x92a53e77: list[hash] = {
                0x92510c29
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_GwenR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_GwenR_SFX_events.bnk"
            }
            mHitEffectKey: hash = 0x1636d8f9
            bHaveHitBone: bool = true
            mHitBoneName: string = "C_BuffBone_Glb_Center_Loc"
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = direction {}
            mSpellCooldownOrSealedQueueThreshold: option[f32] = {
                0.5
            }
            0x03f432a6: u8 = 1
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_GwenR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_GwenR_Name"
                        "keyTooltip" = "Spell_GwenR_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_UltBook_GwenR_TooltipBelowLine"
                        "keySummary" = "Spell_GwenR_Summary"
                        "keyPickChoiceName" = "game_character_displayname_Gwen"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                    nameOverride: string = "Spell_ListType_Cooldown"
                                }
                                TooltipInstanceListElement {
                                    type: string = "BaseDamage"
                                    nameOverride: string = "Spell_ListType_BaseDamage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "InitialSlow"
                                    multiplier: f32 = -100
                                    nameOverride: string = "Spell_ListType_MaxSlow"
                                    Style: u32 = 1
                                }
                                TooltipInstanceListElement {
                                    type: string = "SubsequentSlow"
                                    multiplier: f32 = -100
                                    nameOverride: string = "Spell_ListType_Slow"
                                    Style: u32 = 1
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        mFadeBehavior: pointer = FadeOverTimeBehavior {
                            mTimeStart: f32 = 0.400000006
                            mTimeEnd: f32 = 0.449999988
                            mEndAlpha: f32 = 0
                        }
                    }
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                80
                                80
                                80
                                80
                                80
                                80
                            }
                            mValueType: u32 = 1
                        }
                    }
                }
            }
        }
    }
    0xab76dcdb = SpellObject {
        mScriptName: string = "UltBook_GwenRDebuff"
        mBuff: pointer = BuffData {
            mDescription: string = "buff_desc_GwenRDebuff"
        }
    }
    0xaf6e933c = SpellObject {
        mScriptName: string = "UltBook_GwenRMis3_VisualOnly"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 6154
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Gwen_R3.Gwen.dds"
            }
            mChannelDuration: list[f32] = {
                1
                1
                1
                1
                1
                1
                1
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            0x3d746f1f: u8 = 1
            mCantCancelWhileWindingUp: bool = true
            mChannelIsInterruptedByDisables: bool = false
            mChannelIsInterruptedByAttacking: bool = false
            mSpellRevealsChampion: bool = false
            mCanMoveWhileChanneling: bool = true
            mShowChannelBar: bool = false
            alwaysSnapFacing: bool = true
            bHaveHitEffect: bool = true
            castRange: list[f32] = {
                1300
                1300
                1300
                1300
                1300
                1300
                1300
            }
            castConeAngle: f32 = 0
            castConeDistance: f32 = 0
            mMissileSpec: pointer = MissileSpecification {
                movementComponent: pointer = FixedSpeedMovement {
                    mProjectTargetToCastRange: bool = true
                    mSpeed: f32 = 1800
                    mTracksTarget: bool = false
                    mOffsetInitialTargetHeight: f32 = 100
                }
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 12
            mMissileEffectKey: hash = 0x41e86537
            0x92a53e77: list[hash] = {
                0x92510c29
            }
            mHitEffectKey: hash = 0x1636d8f9
            bHaveHitBone: bool = true
            mHitBoneName: string = "C_BuffBone_Glb_Center_Loc"
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = direction {}
            mSpellCooldownOrSealedQueueThreshold: option[f32] = {
                0.275000006
            }
            0x03f432a6: u8 = 1
            0x00f7e5bc: bool = true
        }
    }
    0xbc568f9b = SpellObject {
        mScriptName: string = "UltBook_GwenRRecast"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 16386
            mSpellTags: list[string] = {
                "Trait_ImmobilizingCCSpell"
            }
            mCoefficient: f32 = 0.600000024
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Gwen_Square_0.Gwen.dds"
                "UltBook_Gwen_R2.Gwen.dds"
                "UltBook_Gwen_R3.Gwen.dds"
            }
            mCastTime: f32 = 0.5
            cooldownTime: list[f32] = {
                0.100000001
                0.100000001
                0.100000001
                0.100000001
                0.100000001
                0.100000001
                0.100000001
            }
            delayTotalTimePercent: f32 = -0.75
            mCantCancelWhileWindingUp: bool = true
            mChannelIsInterruptedByDisables: bool = false
            mChannelIsInterruptedByAttacking: bool = false
            mCanMoveWhileChanneling: bool = true
            mShowChannelBar: bool = false
            alwaysSnapFacing: bool = true
            bHaveHitEffect: bool = true
            mDoNotNeedToFaceTarget: bool = true
            mIgnoreRangeCheck: bool = true
            castRange: list[f32] = {
                1300
                1300
                1300
                1300
                1300
                1300
                1300
            }
            castRangeDisplayOverride: list[f32] = {
                1200
                1200
                1200
                1200
                1200
                1200
                1200
            }
            castConeAngle: f32 = 0
            castConeDistance: f32 = 0
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 60
                movementComponent: pointer = FixedSpeedMovement {
                    mProjectTargetToCastRange: bool = true
                    mSpeed: f32 = 1500
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                }
                heightSolver: pointer = BlendedLinearHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            castFrame: f32 = 24
            mMissileEffectKey: hash = 0x62f914d5
            0x92a53e77: list[hash] = {
                0x92510c29
            }
            mHitEffectKey: hash = 0x1636d8f9
            bHaveHitBone: bool = true
            mHitBoneName: string = "C_BuffBone_Glb_Center_Loc"
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = direction {}
            mSpellCooldownOrSealedQueueThreshold: option[f32] = {
                0.5
            }
            0x03f432a6: u8 = 1
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                0x375656dd: hash = 0x86a9f4c1
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        mFadeBehavior: pointer = FadeOverTimeBehavior {
                            mTimeStart: f32 = 0.400000006
                            mTimeEnd: f32 = 0.449999988
                            mEndAlpha: f32 = 0
                        }
                    }
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                80
                                80
                                80
                                80
                                80
                                80
                            }
                            mValueType: u32 = 1
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "buff_desc_GwenRRecast"
        }
    }
    0x670e36be = AbilityObject {
        mRootSpell: link = 0x297dc587
        mChildSpells: list[link] = {
            0x297dc587
        }
        mName: string = "UltBook_AmumuR"
    }
    0x297dc587 = SpellObject {
        mScriptName: string = "UltBook_AmumuR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "CurseoftheSadMummy"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ImmobilizingCCSpell"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "RDamage"
                    mValues: list[f32] = {
                        50
                        150
                        250
                        350
                        450
                        550
                        650
                    }
                    mBaseP: f32 = 50
                    mFormula: string = "P + 100"
                }
                SpellDataValue {
                    mName: string = "RDuration"
                    mValues: list[f32] = {
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                    }
                    mBaseP: f32 = 1.5
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "RCoefficient"
                    mValues: list[f32] = {
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                    }
                    mBaseP: f32 = 0.800000012
                }
                SpellDataValue {
                    mName: string = "CastRange"
                    mValues: list[f32] = {
                        550
                        550
                        550
                        550
                        550
                        550
                        550
                    }
                    mBaseP: f32 = 550
                    mFormula: string = "P + 0"
                }
            }
            0x94572284: map[hash,pointer] = {
                "RCalculatedDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "RDamage"
                        }
                        StatByNamedDataValueCalculationPart {
                            mDataValue: hash = "RCoefficient"
                        }
                    }
                }
            }
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Amumu_Square_0.dds"
            }
            cooldownTime: list[f32] = {
                150
                150
                125
                100
                100
                100
                100
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.875
            mCantCancelWhileWindingUp: bool = true
            castRange: list[f32] = {
                550
                550
                550
                550
                550
                550
                550
            }
            castRadius: list[f32] = {
                550
                550
                550
                550
                550
                550
                550
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 17.8500004
            missileSpeed: f32 = 20
            0x63060019: link = 0xcbb3851f
            0x92a53e77: list[hash] = {
                0x79282ff5
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_AmumuR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_AmumuR_SFX_events.bnk"
            }
            mTargetingTypeData: pointer = SelfAoe {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_AmumuR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_CurseoftheSadMummy_Name"
                        "keySummary" = "Spell_CurseoftheSadMummy_Summary"
                        "keyTooltip" = "Spell_CurseoftheSadMummy_Tooltip"
                        "keyPickChoiceName" = "game_character_displayname_Amumu"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Cost"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                                TooltipInstanceListElement {
                                    type: string = "RDamage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "RDuration"
                                    nameOverride: string = "Spell_ListType_StunDuration"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_CurseoftheSadMummy"
        }
    }
    0xcbb3851f = 0xefc7f35c {
        0x81cd26c4: file = 0xd299122d459974fc
    }
    0xfa0cc6b4 = AbilityObject {
        mRootSpell: link = 0x2f2b6bad
        mChildSpells: list[link] = {
            0x2f2b6bad
        }
        mName: string = "UltBook_EzrealR"
    }
    0x2f2b6bad = SpellObject {
        mScriptName: string = "UltBook_EzrealR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4194304
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "EzrealTrueshotBarrage"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "BaseDamage"
                    mValues: list[f32] = {
                        200
                        350
                        500
                        650
                        800
                        950
                        1100
                    }
                    mBaseP: f32 = 200
                    mFormula: string = "P + 150"
                }
                SpellDataValue {
                    mName: string = "DamageReductionPerHit"
                    mValues: list[f32] = {
                        0.100000001
                        0.100000001
                        0.100000001
                        0.100000001
                        0.100000001
                        0.100000001
                        0.100000001
                    }
                    mBaseP: f32 = 0.100000001
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "MinimumDamagePercent"
                    mValues: list[f32] = {
                        0.300000012
                        0.300000012
                        0.300000012
                        0.300000012
                        0.300000012
                        0.300000012
                        0.300000012
                    }
                    mBaseP: f32 = 0.300000012
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "DamageReductionWaveclear"
                    mValues: list[f32] = {
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                    }
                    mBaseP: f32 = 0.5
                }
            }
            0x94572284: map[hash,pointer] = {
                "Damage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "baseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 1
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.899999976
                        }
                    }
                    0xcbcac618: u8 = 6
                }
            }
            mCoefficient: f32 = 0.899999976
            mCoefficient2: f32 = 1
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Ezreal_Square_0.dds"
            }
            mMinimapIconName: string = "Ezreal_TrueshotBarrage_Circle.dds"
            cooldownTime: list[f32] = {
                10
                120
                120
                120
                10
                10
                10
            }
            delayCastOffsetPercent: f32 = 1
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            mUseMinimapTargeting: bool = true
            mMinimapIconRotation: bool = true
            alwaysSnapFacing: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRadius: list[f32] = {
                299.299988
                299.299988
                299.299988
                299.299988
                299.299988
                299.299988
                299.299988
            }
            castConeDistance: f32 = 100
            luaOnMissileUpdateDistanceInterval: f32 = 1
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 160
                movementComponent: pointer = FixedSpeedMovement {
                    mProjectTargetToCastRange: bool = true
                    mSpeed: f32 = 2000
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "Buffbone_Glb_Ground_Loc"
                }
                visibilityComponent: pointer = Defaultvisibility {
                    mPerceptionBubbleRadius: f32 = 650
                }
                heightSolver: pointer = BlendedLinearHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 53
            missileSpeed: f32 = 2000
            mMissileEffectKey: hash = 0x0fe72368
            mLineWidth: f32 = 160
            0x63060019: link = 0x49bb1cfd
            0x92a53e77: list[hash] = {
                0x909782c7
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_EzrealR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_EzrealR_SFX_events.bnk"
            }
            bHaveHitBone: bool = true
            mHitBoneName: string = "C_BuffBone_Glb_Center_Loc"
            mFloatVarsDecimals: list[i32] = {
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Location {}
            mSpellCooldownOrSealedQueueThreshold: option[f32] = {
                0.5
            }
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_EzrealR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_EzrealTrueshotBarrage_Name"
                        "keyTooltip" = "Spell_EzrealTrueshotBarrage_Tooltip"
                        "keySummary" = "Spell_EzrealR_Summary"
                        "keyPickChoiceName" = "game_character_displayname_Ezreal"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "BaseDamage"
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        hideWithLineIndicator: bool = true
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionMinimap {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        useGlobalLineIndicator: bool = true
                        lineStopsAtEndPosition: option[bool] = {
                            false
                        }
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                160
                                160
                                160
                                160
                                160
                                160
                            }
                            mValueType: u32 = 2
                        }
                    }
                }
            }
        }
    }
    0x49bb1cfd = 0xefc7f35c {
        0x81cd26c4: file = 0x032a8d6a83ff302f
    }
    0xab82bebe = AbilityObject {
        mRootSpell: link = "Characters/Yone/Spells/YoneRAbility/YoneR"
        mChildSpells: list[link] = {
            "Characters/Yone/Spells/YoneRAbility/YoneR"
            0x32296631
        }
        0x86ddaddb: bool = true
        mName: string = "UltBook_YoneR"
        mType: u8 = 2
    }
    0x32296631 = SpellObject {
        mScriptName: string = "UltBook_YoneR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "PositiveEffect_MoveBlock"
                "Trait_ImmobilizingCCSpell"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        10
                        10
                        20
                        30
                        40
                        50
                        60
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        450
                        450
                        450
                        450
                        450
                        450
                        450
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        1300
                        1300
                        1300
                        1300
                        1300
                        1300
                        1300
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        8
                        8
                        8
                        8
                        8
                        8
                        8
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        120
                        120
                        120
                        120
                        120
                        120
                        120
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        260
                        260
                        260
                        260
                        260
                        260
                        260
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "BaseDamage"
                    mValues: list[f32] = {
                        0
                        200
                        400
                        600
                        800
                        1000
                        1200
                    }
                    mFormula: string = "P + 200"
                }
                SpellDataValue {
                    mName: string = "TADRatio"
                    mValues: list[f32] = {
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                    }
                    mBaseP: f32 = 0.600000024
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "BlinkDistanceBehindTarget"
                    mValues: list[f32] = {
                        200
                        200
                        200
                        200
                        200
                        200
                        200
                    }
                    mBaseP: f32 = 200
                }
                SpellDataValue {
                    mName: string = "Width"
                    mValues: list[f32] = {
                        225
                        225
                        225
                        225
                        225
                        225
                        225
                    }
                    mBaseP: f32 = 225
                }
                SpellDataValue {
                    mName: string = "RKnockupHeight"
                    mValues: list[f32] = {
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                    }
                    mBaseP: f32 = 0.5
                }
                SpellDataValue {
                    mName: string = "RKnockupDuration"
                    mValues: list[f32] = {
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                    }
                    mBaseP: f32 = 0.75
                }
                SpellDataValue {
                    mName: string = "RKnockTowardsSpeed"
                    mValues: list[f32] = {
                        3000
                        3000
                        3000
                        3000
                        3000
                        3000
                        3000
                    }
                    mBaseP: f32 = 3000
                }
                SpellDataValue {
                    mName: string = "RKnockTowardsDampener"
                    mValues: list[f32] = {
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                    }
                    mBaseP: f32 = 0.800000012
                }
                SpellDataValue {
                    mName: string = "TooltipBaseDamage"
                    mValues: list[f32] = {
                        0
                        100
                        200
                        300
                        400
                        500
                        600
                    }
                    mFormula: string = "P + 100"
                }
            }
            0x94572284: map[hash,pointer] = {
                "Damage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "baseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.800000012
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                    }
                    0xcbcac618: u8 = 6
                    0x37070a8d: u8 = 0
                }
                "TooltipDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0xc0359ed0
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.400000006
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                    }
                    0xcbcac618: u8 = 6
                    0x37070a8d: u8 = 0
                }
            }
            mCoefficient: f32 = 1
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Yone_Square.dds"
            }
            mCastTime: f32 = 0.75
            cooldownTime: list[f32] = {
                120
                120
                100
                80
                10
                10
                10
            }
            delayCastOffsetPercent: f32 = -0.75
            delayTotalTimePercent: f32 = -1
            mCantCancelWhileWindingUp: bool = true
            cantCastWhileRooted: bool = true
            alwaysSnapFacing: bool = true
            mDoesNotConsumeCooldown: bool = true
            castRange: list[f32] = {
                1000
                1000
                1000
                1000
                1000
                1000
                1000
            }
            castRangeDisplayOverride: list[f32] = {
                1000
                1000
                1000
                1000
                1000
                1000
                1000
            }
            castRadius: list[f32] = {
                1000
                1000
                1000
                1000
                1000
                1000
                1000
            }
            castConeDistance: f32 = 450
            castFrame: f32 = 50
            missileSpeed: f32 = 1500
            mLineWidth: f32 = 225
            0x63060019: link = 0x6c509d1f
            0x92a53e77: list[hash] = {
                0xad0a07f5
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_YoneR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_YoneR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                -1
                -1
                -1
                -1
                -1
                -1
                -1
                -1
                -1
                -1
                -1
                -1
                -1
                -1
                -1
                -1
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = LocationClamped {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_YoneR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_YoneR_Name"
                        "keySummary" = "Spell_YoneR_Summary"
                        "keyTooltip" = "Spell_YoneR_Tooltip"
                        "keyCost" = "Spell_Cost_NoCost"
                        "keyTooltipExtendedBelowLine" = "Spell_YoneR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Yone"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "BaseDamage"
                                    nameOverride: string = "Spell_ListType_BaseDamage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                    nameOverride: string = "Spell_ListType_Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        lineStopsAtEndPosition: option[bool] = {
                            false
                        }
                        arrowSize: f32 = 500
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                180
                                180
                                180
                                180
                                180
                                180
                            }
                            mValueType: u32 = 2
                        }
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                1000
                                1000
                                1000
                                1000
                                1000
                                1000
                            }
                            mValueType: u32 = 2
                        }
                        textureBaseOverrideName: string = "ASSETS/Spells/Textures/skillshot_Rectangle_Base_r01_v01.dds"
                        textureTargetOverrideName: string = "ASSETS/Spells/Textures/skillshot_Rectangle_tip_r01_v01.dds"
                    }
                    TargeterDefinitionRange {
                        hideWithLineIndicator: bool = true
                    }
                }
            }
        }
    }
    0x6c509d1f = 0xefc7f35c {
        0x81cd26c4: file = 0x0d50a72b4ae72015
    }
    0x3c13af00 = AbilityObject {
        mRootSpell: link = 0x3377b021
        mChildSpells: list[link] = {
            0x3377b021
        }
        mName: string = "UltBook_FiddleSticksR"
    }
    0x3377b021 = SpellObject {
        mScriptName: string = "UltBook_FiddleSticksR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 5135
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "PositiveEffect_MoveBlock"
                "Trait_ChannelSpell"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        125
                        125
                        225
                        325
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        5
                        5
                        5
                        5
                        5
                        5
                        5
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "DamagePerSecond"
                    mValues: list[f32] = {
                        25
                        125
                        225
                        325
                        425
                        525
                        625
                    }
                    mBaseP: f32 = 25
                    mFormula: string = "P + 100"
                }
                SpellDataValue {
                    mName: string = "APRatio"
                    mValues: list[f32] = {
                        0.449999988
                        0.449999988
                        0.449999988
                        0.449999988
                        0.449999988
                        0.449999988
                        0.449999988
                    }
                    mBaseP: f32 = 0.449999988
                }
                SpellDataValue {
                    mName: string = "Duration"
                    mValues: list[f32] = {
                        5
                        5
                        5
                        5
                        5
                        5
                        5
                    }
                    mBaseP: f32 = 5
                }
                SpellDataValue {
                    mName: string = "ChannelTime"
                    mValues: list[f32] = {
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                    }
                    mBaseP: f32 = 1.5
                }
                SpellDataValue {
                    mName: string = "FearDuration"
                    mValues: list[f32] = {
                        0.75
                        1
                        1.25
                        1.5
                        1.75
                        2
                        2.25
                    }
                    mBaseP: f32 = 0.75
                    mFormula: string = "P + .25"
                }
            }
            0x94572284: map[hash,pointer] = {
                0xed325470 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "DamagePerSecond"
                        }
                        StatByNamedDataValueCalculationPart {
                            mDataValue: hash = "APRatio"
                        }
                    }
                    mMultiplier: pointer = NumberCalculationPart {
                        mNumber: f32 = 0.25
                    }
                }
                "TotalDamage" = GameCalculationModified {
                    mModifiedGameCalculation: hash = 0xd0d3db7f
                    mMultiplier: pointer = NamedDataValueCalculationPart {
                        mDataValue: hash = "duration"
                    }
                    tooltipOnly: bool = true
                }
                "APRatioFullDuration" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        StatByNamedDataValueCalculationPart {
                            mDataValue: hash = "APRatio"
                        }
                    }
                    mMultiplier: pointer = NamedDataValueCalculationPart {
                        mDataValue: hash = "duration"
                    }
                }
                0x86bcfb2e = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        StatByNamedDataValueCalculationPart {
                            mDataValue: hash = "APRatio"
                        }
                    }
                }
                0xd0d3db7f = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "DamagePerSecond"
                        }
                        StatByNamedDataValueCalculationPart {
                            mDataValue: hash = "APRatio"
                        }
                    }
                    tooltipOnly: bool = true
                }
            }
            mCoefficient: f32 = 0.449999988
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_FiddleSticks_Square.dds"
            }
            cooldownTime: list[f32] = {
                140
                140
                110
                80
                80
                80
                80
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -0.375
            mCantCancelWhileWindingUp: bool = true
            mCantCancelWhileChanneling: bool = true
            cantCastWhileRooted: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRangeDisplayOverride: list[f32] = {
                800
                800
                800
                800
                800
                800
                800
            }
            castRadius: list[f32] = {
                600
                600
                600
                600
                600
                600
                600
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 10
            missileSpeed: f32 = 20
            0x63060019: link = 0xb85c8381
            0x92a53e77: list[hash] = {
                0x8c1848e3
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_FiddleSticksR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_FiddleSticksR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
            }
            selectionPriority: u32 = 2
            mTargetingTypeData: pointer = Location {}
            0x03f432a6: u8 = 1
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_FiddleSticksR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_FiddleSticksR_Name"
                        "keySummary" = "Spell_FiddleSticksR_Summary"
                        "keyTooltip" = "Spell_FiddleSticksR_Tooltip"
                        "keyPickChoiceName" = "game_character_displayname_Fiddlesticks"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "DamagePerSecond"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_DamagePerSecond"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        overrideRadius: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                590
                                590
                                590
                                590
                                590
                                590
                            }
                            mValueType: u32 = 2
                        }
                        textureRadiusOverrideName: string = "ASSETS/Spells/Textures/AOE_brand.dds"
                    }
                    TargeterDefinitionRange {
                        textureOverrideName: string = "ASSETS/Spells/Textures/CircularRangeIndicator_Dark.dds"
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_Crowstorm"
        }
    }
    0xb85c8381 = 0xefc7f35c {
        0x81cd26c4: file = 0x178286f4c7e00e00
    }
    0x87d01f3e = AbilityObject {
        mRootSpell: link = 0xd20a7007
        mChildSpells: list[link] = {
            0xd20a7007
            0x6cb5da65
        }
        mName: string = "UltBook_DrMundoR"
        mType: u8 = 2
    }
    0x3623369f = 0xefc7f35c {
        0x81cd26c4: file = 0xc2eff26cb06cd8c7
    }
    0x6cb5da65 = SpellObject {
        mScriptName: string = "UltBook_DrMundoRHeal"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 15567
            mCastTime: f32 = 0.75
            cooldownTime: list[f32] = {
                30
                30
                28
                26
                24
                22
                22
            }
            mCantCancelWhileWindingUp: bool = true
            0x7e3432a0: bool = true
            alwaysSnapFacing: bool = true
            castRange: list[f32] = {
                300
                300
                300
                300
                300
                300
                300
            }
            castRadius: list[f32] = {
                300
                300
                300
                300
                300
                300
                300
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 1
            missileSpeed: f32 = 20
            mFloatVarsDecimals: list[i32] = {
                0
                -1
                -1
                -1
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
            }
            mSpellCooldownOrSealedQueueThreshold: option[f32] = {
                0.5
            }
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_DrMundoRHeal"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 5
                        }
                    }
                }
                mLeftClickSpellAction: u32 = 0
                mRightClickSpellAction: u32 = 0
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_Masochism"
        }
    }
    0xd20a7007 = SpellObject {
        mScriptName: string = "UltBook_DrMundoR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 15567
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "Duration"
                    mValues: list[f32] = {
                        10
                        10
                        10
                        10
                        10
                        10
                        10
                    }
                    mBaseP: f32 = 10
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "SpeedBoostAmount"
                    mValues: list[f32] = {
                        0.0500000007
                        0.150000006
                        0.25
                        0.349999994
                        0.449999988
                        0.550000012
                        0.649999976
                    }
                    mBaseP: f32 = 0.0500000007
                    mFormula: string = "P + 0.1"
                }
                SpellDataValue {
                    mName: string = "MissingHealthHeal"
                    mValues: list[f32] = {
                        0.100000001
                        0.150000006
                        0.200000003
                        0.25
                        0.300000012
                        0.349999994
                        0.400000006
                    }
                    mBaseP: f32 = 0.100000001
                    mFormula: string = "P + 0.05"
                }
                SpellDataValue {
                    mName: string = "MaxHealthHoT"
                    mValues: list[f32] = {
                        0
                        0.200000003
                        0.400000006
                        0.600000024
                        0.800000012
                        1
                        1.20000005
                    }
                    mFormula: string = "P + 0.20"
                }
                SpellDataValue {
                    mName: string = "HealthIntoADRatio"
                    mValues: list[f32] = {
                        0.0250000004
                        0.0399999991
                        0.0549999997
                        0.0700000003
                        0.0850000009
                        0.100000001
                        0.115000002
                    }
                    mBaseP: f32 = 0.0250000004
                    mFormula: string = "P + 0.015"
                }
            }
            0x94572284: map[hash,pointer] = {
                0xd9ddf189 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        StatByNamedDataValueCalculationPart {
                            mDataValue: hash = 0x844abaa3
                            mStat: u8 = 11
                            mStatFormula: u8 = 2
                        }
                    }
                }
            }
            mAnimationName: string = "Spell4"
            mImgIconName: list[string] = {
                "UltBook_DrMundo_Square_0.Dr_Mundo_VGU.dds"
            }
            cooldownTime: list[f32] = {
                110
                110
                100
                90
                90
                90
                90
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            castRange: list[f32] = {
                20
                20
                20
                20
                20
                20
                20
            }
            castRadius: list[f32] = {
                600
                600
                600
                600
                600
                600
                600
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 15
            missileSpeed: f32 = 828.5
            0x63060019: link = 0x3623369f
            0x92a53e77: list[hash] = {
                0xef2b2d75
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_DrMundoR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_DrMundoR_SFX_events.bnk"
            }
            bHaveHitBone: bool = true
            mHitBoneName: string = "root"
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            mTargetingTypeData: pointer = Self {}
            mSpellCooldownOrSealedQueueThreshold: option[f32] = {
                0.5
            }
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_DrMundoR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_DrMundoR_Name"
                        "keyTooltip" = "Spell_DrMundoR_Tooltip"
                        "keyCost" = "Spell_Cost_NoCost"
                        "keySummary" = "Spell_DrMundoR_Summary"
                        "keyPickChoiceName" = "game_character_displayname_DrMundo"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                    nameOverride: string = "Spell_ListType_Cooldown"
                                }
                                TooltipInstanceListElement {
                                    type: string = "MissingHealthHeal"
                                    multiplier: f32 = 100
                                    nameOverride: string = "Spell_ListType_BonusHealth"
                                    Style: u32 = 1
                                }
                                TooltipInstanceListElement {
                                    type: string = "SpeedBoostAmount"
                                    multiplier: f32 = 100
                                    nameOverride: string = "Spell_ListType_MovementSpeed"
                                    Style: u32 = 1
                                }
                                TooltipInstanceListElement {
                                    type: string = "MaxHealthHoT"
                                    multiplier: f32 = 100
                                    nameOverride: string = "Spell_ListType_MaxHealthPercent"
                                    Style: u32 = 1
                                }
                                TooltipInstanceListElement {
                                    type: string = "HealthIntoADRatio"
                                    multiplier: f32 = 100
                                    nameOverride: string = "Spell_DrMundoR_ListType_HealthIntoAttackDamage"
                                    Style: u32 = 1
                                }
                            }
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mTooltipData: pointer = TooltipInstanceBuff {
                mObjectName: string = "UltBook_DrMundoR"
                mFormat: link = "UX/Tooltips/Buff"
                mLocKeys: map[string,string] = {
                    "keyName" = "Spell_DrMundoR_Name"
                    "keyTooltip" = "Buff_DrMundoRAbility_Tooltip"
                }
            }
        }
    }
    0xb8dcf2b5 = AbilityObject {
        mRootSpell: link = 0x71d3fcf1
        mChildSpells: list[link] = {
            0x71d3fcf1
            0x3724fff2
        }
        mName: string = "UltBook_LeeSinR"
    }
    0x3724fff2 = SpellObject {
        mScriptName: string = "UltBook_LeeSinDragonsRage"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_BlindMonkDragonsRage"
        }
    }
    0x71d3fcf1 = SpellObject {
        mScriptName: string = "UltBook_LeeSinR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 4106
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "BlindMonkRKick"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ImmobilizingCCSpell"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "BaseDamage"
                    mValues: list[f32] = {
                        -50
                        175
                        400
                        625
                        850
                        1075
                        1300
                    }
                    mBaseP: f32 = -50
                    mFormula: string = "P + 225"
                }
                SpellDataValue {
                    mName: string = "PercentHPCarryThrough"
                    mValues: list[f32] = {
                        12
                        12
                        15
                        18
                        21
                        24
                        27
                    }
                    mBaseP: f32 = 12
                    mFormula: string = "(N-1)*3+12"
                }
            }
            0x94572284: map[hash,pointer] = {
                "Damage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "baseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 2
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                    }
                    0xcbcac618: u8 = 6
                }
            }
            mCoefficient2: f32 = 0.5
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_LeeSin_Square.dds"
            }
            cooldownTime: list[f32] = {
                110
                110
                85
                60
                60
                60
                60
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            useAnimatorFramerate: bool = true
            bHaveHitEffect: bool = true
            castRange: list[f32] = {
                375
                375
                375
                375
                375
                375
                375
            }
            castRadius: list[f32] = {
                375
                375
                375
                375
                375
                375
                375
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 7.5
            missileSpeed: f32 = 1500
            mHitEffectOrientType: u32 = 2
            0x63060019: link = 0xf72ac182
            0x92a53e77: list[hash] = {
                0xf8641bb0
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_LeeSinR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_LeeSinR_SFX_events.bnk"
            }
            mHitEffectKey: hash = 0x378bd2b6
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            selectionPriority: u32 = 1
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_LeeSinR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_BlindMonkRKick_Name"
                        "keySummary" = "Spell_BlindMonkRKick_Summary"
                        "keyTooltip" = "Spell_BlindMonkRKick_Tooltip"
                        "keyCost" = "Spell_Cost_NoCost"
                        "keyTooltipExtendedBelowLine" = "Spell_BlindMonkRKick_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_LeeSin"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "BaseDamage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "PercentHPCarryThrough"
                                    typeIndex: i32 = 3
                                    nameOverride: string = "Spell_ListType_LeeSinRDamage"
                                    Style: u32 = 1
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                    TargeterDefinitionLine {
                        startLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 2
                        }
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 2
                            distanceOffset: f32 = 100
                            orientationType: u32 = 2
                        }
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                40
                                40
                                40
                                40
                                40
                                40
                            }
                            mValueType: u32 = 2
                        }
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                700
                                700
                                700
                                700
                                700
                                700
                            }
                            mValueType: u32 = 2
                        }
                    }
                }
            }
        }
    }
    0xf72ac182 = 0xefc7f35c {
        0x81cd26c4: file = 0x62601b50bea87a9d
    }
    0xa71b9768 = AbilityObject {
        mRootSpell: link = 0xc7145ee1
        mChildSpells: list[link] = {
            0xc7145ee1
            0x372cfe1e
            0xf81c1c5f
            0xf91c1df2
            0xfa1c1f85
            0xf31c1480
            0xf41c1613
            0x5fa29986
        }
        mName: string = "UltBook_BardR"
    }
    0x372cfe1e = SpellObject {
        mScriptName: string = "UltBook_BardRMissileFixedTravelTime"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "BardR"
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            mMissileSpec: pointer = MissileSpecification {
                movementComponent: pointer = FixedTimeMovement {
                    mTravelTime: f32 = 0.5
                    mTargetHeightAugment: f32 = 100
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "R_Elbow"
                }
                heightSolver: pointer = GravityHeightSolver {
                    mGravity: f32 = 18000
                }
                verticalFacing: pointer = VeritcalFacingMatchVelocity {}
                behaviors: list[pointer] = {
                    CastOnMovementComplete {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 1
            mMissileEffectKey: hash = 0x85e85538
            0x92a53e77: list[hash] = {
                0x47ad0e9b
            }
            mTargetingTypeData: pointer = Location {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                }
            }
        }
    }
    0x5fa29986 = SpellObject {
        mScriptName: string = "UltBook_BardRStasis"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_BardRStasis"
        }
    }
    0xc7145ee1 = SpellObject {
        mScriptName: string = "UltBook_BardR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 7375
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ImmobilizingCCSpell"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "RStasisDuration"
                    mValues: list[f32] = {
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                    }
                    mBaseP: f32 = 2.5
                }
            }
            mCoefficient: f32 = 0.5
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Bard_Square.dds"
            }
            mCastTime: f32 = 0.5
            cooldownTime: list[f32] = {
                10
                110
                95
                80
                10
                10
                10
            }
            mCantCancelWhileWindingUp: bool = true
            mCantCancelWhileChanneling: bool = true
            mUseMinimapTargeting: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                3400
                3400
                3400
                3400
                3400
                3400
                3400
            }
            castRadius: list[f32] = {
                350
                350
                350
                350
                350
                350
                350
            }
            castFrame: f32 = 10
            0x63060019: link = 0xcac26719
            0x92a53e77: list[hash] = {
                0x47ad0e9b
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_BardR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_BardR_SFX_events.bnk"
            }
            mTargetingTypeData: pointer = Location {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_BardR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_BardR_Name"
                        "keySummary" = "Spell_BardR_Summary"
                        "keyTooltip" = "Spell_BardR_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_BardR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Bard"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                3600
                                3600
                                3600
                                3600
                                3600
                                3600
                            }
                            mValueType: u32 = 2
                        }
                    }
                    TargeterDefinitionMinimap {}
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                    }
                }
            }
        }
    }
    0xcac26719 = 0xefc7f35c {
        0x81cd26c4: file = 0xae12867a1afd3675
    }
    0xf31c1480 = SpellObject {
        mScriptName: string = "UltBook_BardRMissileRange4"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 8
            mAffectsTypeFlags: u32 = 1028
            mAlternateName: string = "BardR"
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            mMissileSpec: pointer = MissileSpecification {
                movementComponent: pointer = FixedSpeedMovement {
                    mSpeed: f32 = 2100
                    mTargetHeightAugment: f32 = 100
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "R_Elbow"
                }
                heightSolver: pointer = GravityHeightSolver {
                    mGravity: f32 = 2500
                }
                verticalFacing: pointer = VeritcalFacingMatchVelocity {}
                behaviors: list[pointer] = {
                    CastOnMovementComplete {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 1
            missileSpeed: f32 = 2100
            mMissileEffectKey: hash = 0x85e85538
            0x92a53e77: list[hash] = {
                0x47ad0e9b
            }
            mTargetingTypeData: pointer = Location {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                }
            }
        }
    }
    0xf41c1613 = SpellObject {
        mScriptName: string = "UltBook_BardRMissileRange5"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 8
            mAffectsTypeFlags: u32 = 1028
            mAlternateName: string = "BardR"
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            mMissileSpec: pointer = MissileSpecification {
                movementComponent: pointer = FixedSpeedMovement {
                    mSpeed: f32 = 2100
                    mTargetHeightAugment: f32 = 100
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "R_Elbow"
                }
                heightSolver: pointer = GravityHeightSolver {
                    mGravity: f32 = 1500
                }
                verticalFacing: pointer = VeritcalFacingMatchVelocity {}
                behaviors: list[pointer] = {
                    CastOnMovementComplete {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 1
            missileSpeed: f32 = 2100
            mMissileEffectKey: hash = 0x85e85538
            0x92a53e77: list[hash] = {
                0x47ad0e9b
            }
            mTargetingTypeData: pointer = Location {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                }
            }
        }
    }
    0xf81c1c5f = SpellObject {
        mScriptName: string = "UltBook_BardRMissileRange1"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 8
            mAffectsTypeFlags: u32 = 1028
            mAlternateName: string = "BardR"
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            mMissileSpec: pointer = MissileSpecification {
                movementComponent: pointer = FixedSpeedMovement {
                    mSpeed: f32 = 2100
                    mTargetHeightAugment: f32 = 100
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "R_Elbow"
                }
                heightSolver: pointer = GravityHeightSolver {
                    mGravity: f32 = 8000
                }
                verticalFacing: pointer = VeritcalFacingMatchVelocity {}
                behaviors: list[pointer] = {
                    CastOnMovementComplete {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 1
            missileSpeed: f32 = 2100
            mMissileEffectKey: hash = 0x85e85538
            0x92a53e77: list[hash] = {
                0x47ad0e9b
            }
            mTargetingTypeData: pointer = Location {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                }
            }
        }
    }
    0xf91c1df2 = SpellObject {
        mScriptName: string = "UltBook_BardRMissileRange2"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 8
            mAffectsTypeFlags: u32 = 1028
            mAlternateName: string = "BardR"
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            mMissileSpec: pointer = MissileSpecification {
                movementComponent: pointer = FixedSpeedMovement {
                    mSpeed: f32 = 2100
                    mTargetHeightAugment: f32 = 100
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "R_Elbow"
                }
                heightSolver: pointer = GravityHeightSolver {
                    mGravity: f32 = 5500
                }
                verticalFacing: pointer = VeritcalFacingMatchVelocity {}
                behaviors: list[pointer] = {
                    CastOnMovementComplete {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 1
            missileSpeed: f32 = 2100
            mMissileEffectKey: hash = 0x85e85538
            0x92a53e77: list[hash] = {
                0x47ad0e9b
            }
            mTargetingTypeData: pointer = Location {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                }
            }
        }
    }
    0xfa1c1f85 = SpellObject {
        mScriptName: string = "UltBook_BardRMissileRange3"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 8
            mAffectsTypeFlags: u32 = 1028
            mAlternateName: string = "BardR"
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            mMissileSpec: pointer = MissileSpecification {
                movementComponent: pointer = FixedSpeedMovement {
                    mSpeed: f32 = 2100
                    mTargetHeightAugment: f32 = 100
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "R_Elbow"
                }
                heightSolver: pointer = GravityHeightSolver {
                    mGravity: f32 = 3500
                }
                verticalFacing: pointer = VeritcalFacingMatchVelocity {}
                behaviors: list[pointer] = {
                    CastOnMovementComplete {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 1
            missileSpeed: f32 = 2100
            mMissileEffectKey: hash = 0x85e85538
            0x92a53e77: list[hash] = {
                0x47ad0e9b
            }
            mTargetingTypeData: pointer = Location {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                }
            }
        }
    }
    0x5de577a7 = AbilityObject {
        mRootSpell: link = 0x5d6c8121
        mChildSpells: list[link] = {
            0x5d6c8121
            0x53d79c69
        }
        mName: string = "UltBook_MalphiteR"
    }
    0x3c94b46c = 0xefc7f35c {
        0x81cd26c4: file = 0x81766734e0658737
    }
    0x53d79c69 = SpellObject {
        mScriptName: string = "UltBook_MalphiteUnstoppableForceStun"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 6154
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        1.5
                        2
                        2.5
                        3
                        3.5
                        4
                        4.5
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0
                        50
                        100
                        150
                        450
                        550
                        600
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        125
                        200
                        275
                        350
                        425
                        500
                        575
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 1
            mAnimationName: string = "Spell4"
            mImgIconName: list[string] = {
                "ASSETS/Spells/Icons2D/Minotaur_Headbutt.dds"
            }
            cooldownTime: list[f32] = {
                75
                75
                75
                75
                75
                75
                75
            }
            mCantCancelWhileWindingUp: bool = true
            castRange: list[f32] = {
                1200
                1200
                1200
                1200
                1200
                1200
                1200
            }
            castRadius: list[f32] = {
                20
                20
                20
                20
                20
                20
                20
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 9.75
            missileSpeed: f32 = 700
            mLineWidth: f32 = 160
            0x92a53e77: list[hash] = {
                0x565e104e
            }
            bHaveHitBone: bool = true
            mHitBoneName: string = "root"
            mana: list[f32] = {
                100
                100
                100
                0
                0
                0
            }
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_UnstoppableForceStun"
        }
    }
    0x5d6c8121 = SpellObject {
        mScriptName: string = "UltBook_MalphiteR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 6154
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "PositiveEffect_MoveBlock"
                "Trait_ChannelSpell"
                "Trait_ImmobilizingCCSpell"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        0
                        1.5
                        1.75
                        2
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0
                        200
                        300
                        400
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0
                        1.5
                        1.5
                        1.5
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "BaseDamage"
                    mValues: list[f32] = {
                        100
                        200
                        300
                        400
                        500
                        600
                        700
                    }
                    mBaseP: f32 = 100
                    mFormula: string = "P + 100"
                }
                SpellDataValue {
                    mName: string = "KnockupDuration"
                    mValues: list[f32] = {
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                    }
                    mBaseP: f32 = 1.5
                }
            }
            0x94572284: map[hash,pointer] = {
                "RDamageCalc" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "baseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.800000012
                        }
                    }
                    tooltipOnly: bool = true
                }
            }
            mCoefficient: f32 = 0.800000012
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Malphite_Square.dds"
            }
            cooldownTime: list[f32] = {
                130
                130
                105
                80
                80
                80
                80
            }
            mCantCancelWhileWindingUp: bool = true
            mIgnoreRangeCheck: bool = true
            castRange: list[f32] = {
                1000
                1000
                1000
                1000
                1000
                1000
                1000
            }
            castRadius: list[f32] = {
                270
                270
                270
                270
                270
                270
                270
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 9.75
            missileSpeed: f32 = 700
            mLineWidth: f32 = 160
            0x63060019: link = 0x3c94b46c
            0x92a53e77: list[hash] = {
                0x565e104e
            }
            bHaveHitBone: bool = true
            mHitBoneName: string = "root"
            mTargetingTypeData: pointer = Area {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_MalphiteR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_UFSlash_Name"
                        "keySummary" = "Spell_UFSlash_Summary"
                        "keyTooltip" = "Spell_UFSlash_Tooltip"
                        "keyPickChoiceName" = "game_character_displayname_Malphite"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Effect%dAmount"
                                    typeIndex: i32 = 2
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                    }
                }
            }
        }
    }
    0x7929f7e5 = AbilityObject {
        mRootSpell: link = 0xfb21fe61
        mChildSpells: list[link] = {
            0xfb21fe61
        }
        0x86ddaddb: bool = true
        mName: string = "UltBook_MordekaiserR"
        mType: u8 = 2
    }
    0x3cb3a6a1 = SpellObject {
        mScriptName: string = "UltBook_MordekaiserR_StatStealEnemy"
        mBuff: pointer = BuffData {
            mTooltipData: pointer = TooltipInstanceBuff {
                mObjectName: string = "UltBook_MordekaiserR_StatStealEnemy"
                mFormat: link = "UX/Tooltips/Buff"
                mLocKeys: map[string,string] = {
                    "keyName" = "Buff_MordekaiserR_StatStealEnemy_Name"
                    "keyTooltip" = "Buff_MordekaiserR_StatStealEnemy_Tooltip"
                }
            }
        }
    }
    0x4d8e0bc6 = SpellObject {
        mScriptName: string = "UltBook_MordekaiserSoulMissile"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4194308
            mAffectsTypeFlags: u32 = 6155
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        0
                        80
                        110
                        140
                        170
                        200
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0
                        12
                        11
                        10
                        9
                        8
                        0
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 0.600000024
            mAnimationName: string = "Spell3"
            cooldownTime: list[f32] = {
                0
                12
                11
                10
                9
                8
                0
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            mCantCancelWhileChanneling: bool = true
            mIsDisabledWhileDead: bool = false
            alwaysSnapFacing: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRadius: list[f32] = {
                210
                210
                210
                210
                210
                210
                210
            }
            castConeDistance: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                movementComponent: pointer = FixedTimeMovement {
                    mTravelTime: f32 = 0.5
                    mUseHeightOffsetAtEnd: bool = true
                    mStartBoneName: string = "root"
                }
                heightSolver: pointer = FollowTerrainHeightSolver {}
                verticalFacing: pointer = VeritcalFacingMatchVelocity {}
                behaviors: list[pointer] = {
                    CastOnMovementComplete {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 1
            castFrame: f32 = 14.8000002
            missileSpeed: f32 = 200
            mMissileEffectKey: hash = 0x73999b15
            mLineWidth: f32 = 120
            mHitEffectOrientType: u32 = 2
            0x92a53e77: list[hash] = {
                0xd5e2e5a0
            }
            bHaveHitBone: bool = true
            mHitBoneName: string = "C_Buffbone_Glb_Center_Loc"
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                }
            }
        }
    }
    0x4e53f65d = SpellObject {
        mScriptName: string = "UltBook_MordekaiserRWispMis"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4194308
            mAffectsTypeFlags: u32 = 3
            mIgnoreRangeCheck: bool = true
            mMissileSpec: pointer = MissileSpecification {
                movementComponent: pointer = FixedSpeedMovement {
                    mSpeed: f32 = 250000
                    0xaa44f99e: bool = true
                    mStartBoneName: string = "root"
                }
                heightSolver: pointer = FollowTerrainHeightSolver {}
            }
            mCastType: u32 = 3
            missileSpeed: f32 = 250000
            0x92a53e77: list[hash] = {
                0xd5e2e5a0
            }
        }
    }
    0xb81587bb = SpellObject {
        mScriptName: string = "UltBook_MordekaiserR_StatSteal"
        mBuff: pointer = BuffData {
            mTooltipData: pointer = TooltipInstanceBuff {
                mObjectName: string = "UltBook_MordekaiserR_StatSteal"
                mFormat: link = "UX/Tooltips/Buff"
                mLocKeys: map[string,string] = {
                    "keyName" = "Buff_MordekaiserR_StatSteal_Name"
                    "keyTooltip" = "Buff_MordekaiserR_StatSteal_Tooltip"
                }
            }
        }
    }
    0xe7f2aed2 = 0xefc7f35c {
        0x81cd26c4: file = 0x0953e50a43f2538e
    }
    0xfb21fe61 = SpellObject {
        mScriptName: string = "UltBook_MordekaiserR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 2
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mExcludedUnitTags: embed = ObjectTags {
                mTagList: string = "NEXUSBLITZ_EventCharacter"
            }
            mCastRequirementsTarget: list[pointer] = {
                HasBuffCastRequirement {
                    mBuffName: hash = 0xb4ae536b
                    mFromAnyone: bool = true
                    mInvertResult: bool = true
                }
            }
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "SpiritRealmDuration"
                    mValues: list[f32] = {
                        7
                        7
                        7
                        7
                        7
                        7
                        7
                    }
                    mBaseP: f32 = 7
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "StatStealPercentScalar"
                    mValues: list[f32] = {
                        0.100000001
                        0.100000001
                        0.100000001
                        0.100000001
                        0.100000001
                        0.100000001
                        0.100000001
                    }
                    mBaseP: f32 = 0.100000001
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "ZoneRadius"
                    mValues: list[f32] = {
                        1200
                        1200
                        1200
                        1200
                        1200
                        1200
                        1200
                    }
                    mBaseP: f32 = 1200
                }
                SpellDataValue {
                    mName: string = "GhostAPRatio"
                    mValues: list[f32] = {
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                    }
                    mBaseP: f32 = 0.600000024
                }
            }
            mCoefficient: f32 = 0.0399999991
            mCoefficient2: f32 = 0.0399999991
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Mordekaiser_Square.dds"
            }
            mCastTime: f32 = 0.5
            cooldownTime: list[f32] = {
                140
                140
                120
                100
                90
                80
                8
            }
            delayTotalTimePercent: f32 = -1
            mCantCancelWhileWindingUp: bool = true
            mCantCancelWhileChanneling: bool = true
            alwaysSnapFacing: bool = true
            castRange: list[f32] = {
                650
                650
                650
                650
                650
                650
                650
            }
            castRadius: list[f32] = {
                300
                300
                300
                300
                300
                300
                300
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 7.93499994
            missileSpeed: f32 = 1500
            0x63060019: link = 0xe7f2aed2
            0x92a53e77: list[hash] = {
                0xd5e2e5a0
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_MordekaiserR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_MordekaiserR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            mSpellCooldownOrSealedQueueThreshold: option[f32] = {
                0.25
            }
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_MordekaiserR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_MordekaiserR_Name"
                        "keyTooltip" = "Spell_MordekaiserR_Tooltip"
                        "keyCost" = "Spell_Cost_NoCost"
                        "keySummary" = "Spell_MordekaiserR_Summary"
                        "keyTooltipExtendedBelowLine" = "Spell_MordekaiserR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Mordekaiser"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                }
            }
        }
    }
    0x3e8d43cc = 0xefc7f35c {
        0x81cd26c4: file = 0xf77d05a898e77b4f
    }
    0x5810f075 = SpellObject {
        mScriptName: string = "UltBook_CaitlynR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 4106
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "CaitlynR"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "RBaseDamage"
                    mValues: list[f32] = {
                        75
                        300
                        525
                        750
                        975
                        1200
                        1425
                    }
                    mBaseP: f32 = 75
                    mFormula: string = "P + 225"
                }
                SpellDataValue {
                    mName: string = "RADRatio"
                    mValues: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                    mBaseP: f32 = 2
                    mFormula: string = "P + 0"
                }
            }
            0x94572284: map[hash,pointer] = {
                "RTotalDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "RBaseDamage"
                        }
                        StatByNamedDataValueCalculationPart {
                            mDataValue: hash = 0x4cd5d2cb
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                    }
                }
            }
            mAnimationName: string = "Spell4"
            mImgIconName: list[string] = {
                "UltBook_Caitlyn_Square.dds"
                ""
            }
            cooldownTime: list[f32] = {
                90
                90
                75
                60
                9
                8
                80
            }
            delayCastOffsetPercent: f32 = -0.25
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            mCantCancelWhileChanneling: bool = true
            mUseMinimapTargeting: bool = true
            alwaysSnapFacing: bool = true
            castRange: list[f32] = {
                3500
                3500
                3500
                3500
                3500
                3500
                3500
            }
            castRadius: list[f32] = {
                100
                100
                100
                100
                100
                100
                100
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 14.04
            missileSpeed: f32 = 1500
            0x63060019: link = 0x3e8d43cc
            0x92a53e77: list[hash] = {
                0x74a764ae
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_CaitlynR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_CaitlynR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            0x03f432a6: u8 = 1
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_CaitlynR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "game_spell_displayname_CaitlynAceintheHole"
                        "keySummary" = "Spell_CaitlynAceintheHole_Summary"
                        "keyTooltip" = "Spell_CaitlynAceintheHole_Tooltip"
                        "keyPickChoiceName" = "game_character_displayname_Caitlyn"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "RBaseDamage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_CaitlynAceintheHole"
        }
    }
    0xe2527ed3 = SpellObject {
        mScriptName: string = "UltBook_CaitlynRMissile"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 4106
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "CaitlynRMissile"
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        50
                        90
                        130
                        170
                        215
                        260
                        300
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 0.600000024
            mAnimationName: string = "Spell1"
            mImgIconName: list[string] = {
                "ASSETS/Characters/Caitlyn/HUD/Icons2D/Caitlyn_AceintheHole.dds"
                ""
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRadius: list[f32] = {
                710
                710
                710
                710
                710
                710
                710
            }
            castConeDistance: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 40
                movementComponent: pointer = FixedSpeedMovement {
                    mProjectTargetToCastRange: bool = true
                    mSpeed: f32 = 3200
                    mUseHeightOffsetAtEnd: bool = true
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "Buffbone_Cstm_Attack"
                }
                visibilityComponent: pointer = EnterFOWVisibility {
                    mPerceptionBubbleRadius: f32 = 1500
                }
                heightSolver: pointer = BlendedLinearHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 20
            missileSpeed: f32 = 3200
            mMissileEffectKey: hash = 0x314173f3
            mLineWidth: f32 = 40
            0x92a53e77: list[hash] = {
                0x74a764ae
            }
            selectionPriority: u32 = 1
        }
    }
    0x6ed738a3 = AbilityObject {
        mRootSpell: link = 0xd97bfc01
        mChildSpells: list[link] = {
            0xd97bfc01
        }
        mName: string = "UltBook_JannaR"
    }
    0x3ed09760 = 0xefc7f35c {
        0x81cd26c4: file = 0x0d562b89e22c00f6
    }
    0xd97bfc01 = SpellObject {
        mScriptName: string = "UltBook_JannaR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 7183
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "PositiveEffect_Boon"
                "Trait_ImmobilizingCCSpell"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        0
                        100
                        150
                        200
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0
                        300
                        450
                        600
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0
                        3
                        3
                        3
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        700
                        700
                        700
                        700
                        700
                        700
                        700
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        875
                        875
                        875
                        875
                        875
                        875
                        875
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        875
                        875
                        875
                        875
                        875
                        875
                        875
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        1200
                        1200
                        1200
                        1200
                        1200
                        1200
                        1200
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        10
                        10
                        10
                        10
                        10
                        10
                        10
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                    }
                }
                SpellEffectAmount {}
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "HealBasePerSecond"
                    mValues: list[f32] = {
                        100
                        100
                        150
                        200
                        250
                        300
                        350
                    }
                    mBaseP: f32 = 100
                    mFormula: string = "N*50+50"
                }
            }
            0x94572284: map[hash,pointer] = {
                "HealPerSecond" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0x40108a0d
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.5
                        }
                    }
                    0x37070a8d: u8 = 6
                }
                "TotalHeal" = GameCalculationModified {
                    mModifiedGameCalculation: hash = "HealPerSecond"
                    mMultiplier: pointer = EffectValueCalculationPart {
                        mEffectIndex: i32 = 3
                    }
                    tooltipOnly: bool = true
                }
            }
            mCoefficient: f32 = 0.5
            mCoefficient2: f32 = 1.5
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Janna_Square.dds"
            }
            mCastTime: f32 = 0.00100000005
            cooldownTime: list[f32] = {
                120
                150
                135
                120
                0
                0
                120
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                725
                725
                725
                725
                725
                725
                725
            }
            castRadius: list[f32] = {
                600
                600
                600
                600
                600
                600
                600
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 5.17000008
            missileSpeed: f32 = 828.5
            0x63060019: link = 0x3ed09760
            0x92a53e77: list[hash] = {
                0x230c242a
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_JannaR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_JannaR_SFX_events.bnk"
            }
            mTargetingTypeData: pointer = SelfAoe {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_JannaR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_ReapTheWhirlwind_Name"
                        "keySummary" = "Spell_ReapTheWhirlwind_Summary"
                        "keyTooltip" = "Spell_ReapTheWhirlwind_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_ReapTheWhirlwind_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Janna"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Effect%dAmount"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_HealPerSecond"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                }
            }
        }
    }
    0x3fa2e8ec = AbilityObject {
        mRootSpell: link = 0x3edf53a5
        mChildSpells: list[link] = {
            0x3edf53a5
        }
        mName: string = "UltBook_SorakaR"
    }
    0x3edf53a5 = SpellObject {
        mScriptName: string = "UltBook_SorakaR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 1029
            mAffectsStatusFlags: u32 = 32
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "PositiveEffect_Boon"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "BaseHeal"
                    mValues: list[f32] = {
                        45
                        130
                        215
                        300
                        385
                        470
                        555
                    }
                    mBaseP: f32 = 45
                    mFormula: string = "P + 85"
                }
                SpellDataValue {
                    mName: string = "HealingAmpForLowHealthAllies"
                    mValues: list[f32] = {
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                    }
                    mBaseP: f32 = 0.5
                    mFormula: string = "P"
                }
            }
            0x94572284: map[hash,pointer] = {
                "HealingCalc" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "BaseHeal"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.550000012
                        }
                    }
                }
                "AmpedHealing" = GameCalculationModified {
                    mModifiedGameCalculation: hash = "HealingCalc"
                    mMultiplier: pointer = SumOfSubPartsCalculationPart {
                        mSubparts: list[pointer] = {
                            NumberCalculationPart {
                                mNumber: f32 = 1
                            }
                            NamedDataValueCalculationPart {
                                mDataValue: hash = 0x60ccb0e2
                            }
                        }
                    }
                }
            }
            mCoefficient: f32 = 0.550000012
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Soraka_Square.dds"
            }
            mCastTime: f32 = 0.25
            cooldownTime: list[f32] = {
                10
                160
                145
                130
                10
                10
                10
            }
            mCantCancelWhileWindingUp: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRadius: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 7.5
            missileSpeed: f32 = 0
            0x63060019: link = 0xf33303a5
            0x92a53e77: list[hash] = {
                0xa477988f
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_SorakaR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_SorakaR_SFX_events.bnk"
            }
            selectionPriority: u32 = 2
            mTargetingTypeData: pointer = SelfAoe {}
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_SorakaR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_SorakaR_Name"
                        "keySummary" = "Spell_SorakaR_Summary"
                        "keyTooltip" = "Spell_SorakaR_Tooltip"
                        "keyPickChoiceName" = "game_character_displayname_Soraka"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "BaseHeal"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_Healing"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
    }
    0xf33303a5 = 0xefc7f35c {
        0x81cd26c4: file = 0xa629ae3ad416c1e3
    }
    0x3f20f23a = AbilityObject {
        mRootSpell: link = "Characters/Khazix/Spells/KhazixRAbility/KhazixR"
        mChildSpells: list[link] = {
            "Characters/Khazix/Spells/KhazixRAbility/KhazixR"
        }
        0x86ddaddb: bool = true
        mName: string = "UltBook_KhazixR"
        mType: u8 = 2
    }
    0x4126e1b1 = AbilityObject {
        mRootSpell: link = 0x51391171
        mChildSpells: list[link] = {
            0x51391171
            0xd14aa1b8
            0x908b3e04
        }
        0x86ddaddb: bool = true
        mName: string = "UltBook_NunuR"
    }
    0xaa7c7b77 = AbilityObject {
        mRootSpell: link = 0xae797501
        mChildSpells: list[link] = {
            0xae797501
            0x95bc98ec
            0xd450d52a
            0x42944649
            0x96115db3
        }
        mName: string = "UltBook_MaokaiR"
    }
    0x42944649 = SpellObject {
        mScriptName: string = "UltBook_MaokaiRRoot"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_MaokaiRRoot"
        }
    }
    0x80f4461c = 0xefc7f35c {
        0x81cd26c4: file = 0x5914b94cca6b195f
    }
    0x95bc98ec = SpellObject {
        mScriptName: string = "UltBook_MaokaiRMis"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 6154
            mCoefficient: f32 = 0.5
            mAnimationName: string = ""
            mImgIconName: list[string] = {
                "ASSETS/Characters/Maokai/HUD/Icons2D/Maokai_R.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            mCantCancelWhileWindingUp: bool = true
            mIsDisabledWhileDead: bool = false
            mProjectTargetToCastRange: bool = true
            mSpellRevealsChampion: bool = false
            mShowChannelBar: bool = false
            mIgnoreRangeCheck: bool = true
            castRange: list[f32] = {
                3000
                3000
                3000
                3000
                3000
                3000
                3000
            }
            castRadius: list[f32] = {
                50
                50
                50
                50
                50
                50
                50
            }
            castConeDistance: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 120
                movementComponent: pointer = AcceleratingMovement {
                    mAcceleration: f32 = 200
                    mMaxSpeed: f32 = 600
                    mInitialSpeed: f32 = 50
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                    mStartBoneName: string = "root"
                }
                heightSolver: pointer = FollowTerrainHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 30
            missileSpeed: f32 = 50
            mMissileEffectKey: hash = 0x23679399
            mMissileEffectEnemyKey: hash = 0x25deadde
            mLineWidth: f32 = 120
            mHitEffectOrientType: u32 = 2
            0x92a53e77: list[hash] = {
                0xc67224de
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Location {}
        }
    }
    0x96115db3 = SpellObject {
        mScriptName: string = "UltBook_MaokaiRSoundMis"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mCoefficient: f32 = 0.5
            mAnimationName: string = ""
            mImgIconName: list[string] = {
                "ASSETS/Characters/Maokai/HUD/Icons2D/Maokai_R.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            mCantCancelWhileWindingUp: bool = true
            mIsDisabledWhileDead: bool = false
            mProjectTargetToCastRange: bool = true
            mSpellRevealsChampion: bool = false
            mShowChannelBar: bool = false
            mIgnoreRangeCheck: bool = true
            castRange: list[f32] = {
                2200
                2200
                2200
                2200
                2200
                2200
                2200
            }
            castRadius: list[f32] = {
                50
                50
                50
                50
                50
                50
                50
            }
            castConeDistance: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 120
                movementComponent: pointer = AcceleratingMovement {
                    mAcceleration: f32 = 150
                    mMaxSpeed: f32 = 450
                    mInitialSpeed: f32 = 150
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                    mStartBoneName: string = "root"
                }
                heightSolver: pointer = FollowTerrainHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 30
            missileSpeed: f32 = 150
            mMissileEffectKey: hash = 0x18d12fd1
            mLineWidth: f32 = 120
            mHitEffectOrientType: u32 = 2
            0x92a53e77: list[hash] = {
                0xc67224de
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Location {}
        }
    }
    0xae797501 = SpellObject {
        mScriptName: string = "UltBook_MaokaiR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ImmobilizingCCSpell"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        75
                        150
                        225
                        300
                        375
                        450
                        525
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "MinRootDuration"
                    mValues: list[f32] = {
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                    }
                    mBaseP: f32 = 0.800000012
                }
                SpellDataValue {
                    mName: string = "MaxRootDuration"
                    mValues: list[f32] = {
                        2.5999999
                        2.5999999
                        2.5999999
                        2.5999999
                        2.5999999
                        2.5999999
                        2.5999999
                    }
                    mBaseP: f32 = 2.5999999
                }
            }
            0x94572284: map[hash,pointer] = {
                "TotalDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        EffectValueCalculationPart {
                            mEffectIndex: i32 = 1
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.75
                        }
                    }
                    0xcbcac618: u8 = 6
                    tooltipOnly: bool = true
                }
            }
            mCoefficient: f32 = 0.75
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Maokai_Square.dds"
            }
            cooldownTime: list[f32] = {
                140
                120
                100
                80
                80
                80
                80
            }
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            mProjectTargetToCastRange: bool = true
            alwaysSnapFacing: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRangeDisplayOverride: list[f32] = {
                3000
                3000
                3000
                3000
                3000
                3000
                3000
            }
            castRadius: list[f32] = {
                120
                120
                120
                120
                120
                120
                120
            }
            castRadiusSecondary: list[f32] = {
                175
                175
                175
                175
                175
                175
                175
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 35
            missileSpeed: f32 = 1500
            0x63060019: link = 0x80f4461c
            0x92a53e77: list[hash] = {
                0xc67224de
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_MaokaiR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_MaokaiR_SFX_events.bnk"
            }
            selectionPriority: u32 = 2
            mTargetingTypeData: pointer = Location {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_MaokaiR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_MaokaiR_Name"
                        "keySummary" = "Spell_MaokaiR_Summary"
                        "keyTooltip" = "Spell_MaokaiR_Tooltip"
                        "keyPickChoiceName" = "game_character_displayname_Maokai"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Effect%dAmount"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        lineStopsAtEndPosition: option[bool] = {
                            false
                        }
                        minimumDisplayedRange: f32 = 2000
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                750
                                750
                                750
                                750
                                750
                                750
                            }
                            mValueType: u32 = 1
                        }
                        textureBaseOverrideName: string = "ASSETS/Spells/Textures/skillshot_hecarim_base.dds"
                        textureTargetOverrideName: string = "ASSETS/Spells/Textures/skillshot_hecarim_tip.dds"
                    }
                    TargeterDefinitionRange {
                        hideWithLineIndicator: bool = true
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_MaokaiRRoot"
        }
    }
    0xd450d52a = SpellObject {
        mScriptName: string = "UltBook_MaokaiRMisExtra"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 6154
            mCoefficient: f32 = 0.5
            mAnimationName: string = ""
            mImgIconName: list[string] = {
                "ASSETS/Characters/Maokai/HUD/Icons2D/Maokai_R.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            mCantCancelWhileWindingUp: bool = true
            mIsDisabledWhileDead: bool = false
            mProjectTargetToCastRange: bool = true
            mSpellRevealsChampion: bool = false
            mShowChannelBar: bool = false
            mIgnoreRangeCheck: bool = true
            castRange: list[f32] = {
                3000
                3000
                3000
                3000
                3000
                3000
                3000
            }
            castRadius: list[f32] = {
                50
                50
                50
                50
                50
                50
                50
            }
            castConeDistance: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 120
                movementComponent: pointer = AcceleratingMovement {
                    mAcceleration: f32 = 200
                    mMaxSpeed: f32 = 600
                    mInitialSpeed: f32 = 50
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                    mStartBoneName: string = "root"
                }
                heightSolver: pointer = FollowTerrainHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 30
            missileSpeed: f32 = 50
            mLineWidth: f32 = 120
            mHitEffectOrientType: u32 = 2
            0x92a53e77: list[hash] = {
                0xc67224de
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Location {}
        }
    }
    0x42e8e516 = AbilityObject {
        mRootSpell: link = 0x759cc82b
        mChildSpells: list[link] = {
            0x759cc82b
            0xa0cea989
            0xc7ab42dc
        }
        mName: string = "UltBook_MorganaR"
    }
    0xfe822019 = AbilityObject {
        mRootSpell: link = 0xf9412111
        mChildSpells: list[link] = {
            0xf9412111
        }
        mName: string = "UltBook_KarthusR"
    }
    0x43fda35e = 0xefc7f35c {
        0x81cd26c4: file = 0x62f39e140d3ef5d4
    }
    0xf9412111 = SpellObject {
        mScriptName: string = "UltBook_KarthusR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 24
            mAffectsTypeFlags: u32 = 15567
            mAlternateName: string = "KarthusFallenOne"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ChannelSpell"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "BaseDamage"
                    mValues: list[f32] = {
                        200
                        200
                        350
                        500
                        650
                        800
                        950
                    }
                    0x3f95426c: bool = false
                    mBaseP: f32 = 50
                    mFormula: string = "P + 150"
                }
            }
            0x94572284: map[hash,pointer] = {
                "TotalDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "baseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.75
                        }
                    }
                }
            }
            mCoefficient: f32 = 0.75
            mAnimationName: string = "Channel"
            mAnimationLoopName: string = "Channel"
            mAnimationWinddownName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Karthus_Square.dds"
            }
            mCastTime: f32 = 0.25
            cooldownTime: list[f32] = {
                200
                200
                180
                160
                180
                180
                200
            }
            mCantCancelWhileWindingUp: bool = true
            mCantCancelWhileChanneling: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                10000
                10000
                10000
                10000
                10000
                10000
                10000
            }
            castRadius: list[f32] = {
                1000
                1000
                1000
                1000
                1000
                1000
                1000
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 10
            missileSpeed: f32 = 0
            0x63060019: link = 0x43fda35e
            0x92a53e77: list[hash] = {
                0xdce9c6d4
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_KarthusR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_KarthusR_SFX_events.bnk"
            }
            selectionPriority: u32 = 2
            mTargetingTypeData: pointer = Self {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_KarthusR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_KarthusFallenOne_Name"
                        "keySummary" = "Spell_KarthusFallenOne_Summary"
                        "keyTooltip" = "Spell_KarthusFallenOne_Tooltip"
                        "keyPickChoiceName" = "game_character_displayname_Karthus"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "BaseDamage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_KarthusFallenOne"
        }
    }
    0x8ebf5391 = AbilityObject {
        mRootSpell: link = 0x614b3b71
        mChildSpells: list[link] = {
            0x614b3b71
            0x4446000c
        }
        mName: string = "UltBook_OlafR"
    }
    0x4446000c = SpellObject {
        mScriptName: string = "UltBook_OlafRagnarokPassiveBuff"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "OlafAxeThrow"
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        30
                        80
                        125
                        170
                        215
                        260
                        305
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        25
                        29
                        33
                        37
                        41
                        45
                        49
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 1
            mCoefficient2: f32 = 0.5
            mAnimationName: string = "Spell1"
            mImgIconName: list[string] = {
                "ASSETS/Characters/Olaf/HUD/Icons2D/Olaf_Q.dds"
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            mProjectTargetToCastRange: bool = true
            castRange: list[f32] = {
                1000
                1000
                1000
                1000
                1000
                1000
                1000
            }
            castRadius: list[f32] = {
                220
                220
                220
                220
                220
                220
                220
            }
            castConeDistance: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 90
                movementComponent: pointer = FixedSpeedMovement {
                    mSpeed: f32 = 1600
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "Root"
                }
                heightSolver: pointer = BlendedLinearHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 7
            missileSpeed: f32 = 1600
            mLineWidth: f32 = 90
            bHaveHitBone: bool = true
            mHitBoneName: string = "pelvis"
            mParticleStartOffset: vec3 = { -40, 0, 0 }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            mana: list[f32] = {
                60
                60
                60
                60
                60
                60
            }
            mTargetingTypeData: pointer = direction {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        hideWithLineIndicator: bool = true
                    }
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        lineStopsAtEndPosition: option[bool] = {
                            true
                        }
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                90
                                90
                                90
                                90
                                90
                                90
                            }
                            mValueType: u32 = 2
                        }
                    }
                }
            }
        }
    }
    0x614b3b71 = SpellObject {
        mScriptName: string = "UltBook_OlafR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 20
            mAffectsTypeFlags: u32 = 9221
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "SpecialCase_StasisLocked"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "Resists"
                    mValues: list[f32] = {
                        20
                        20
                        30
                        40
                        50
                        60
                        70
                    }
                    mBaseP: f32 = 20
                    mFormula: string = "(N-1)*10+20"
                }
                SpellDataValue {
                    mName: string = "Duration"
                    mValues: list[f32] = {
                        6
                        6
                        6
                        6
                        6
                        6
                        6
                    }
                    mBaseP: f32 = 6
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "FlatAD"
                    mValues: list[f32] = {
                        15
                        15
                        20
                        25
                        30
                        35
                        40
                    }
                    mBaseP: f32 = 15
                    mFormula: string = "(N-1)*5+15"
                }
                SpellDataValue {
                    mName: string = "PercentTotalADAmp"
                    mValues: list[f32] = {
                        0.300000012
                        0.300000012
                        0.300000012
                        0.300000012
                        0.300000012
                        0.300000012
                        0.300000012
                    }
                    mBaseP: f32 = 0.300000012
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "HasteDuration"
                    mValues: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                    mBaseP: f32 = 1
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "Haste"
                    mValues: list[f32] = {
                        0.200000003
                        0.200000003
                        0.449999988
                        0.699999988
                        0.949999988
                        1.20000005
                        1.45000005
                    }
                    mBaseP: f32 = 0.200000003
                    mFormula: string = "N*0.25-0.05"
                }
            }
            0x94572284: map[hash,pointer] = {
                "AD" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0xada6389f
                        }
                        StatByNamedDataValueCalculationPart {
                            mDataValue: hash = 0x5903b2d5
                            mStat: u8 = 2
                        }
                    }
                }
            }
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Olaf_Square.dds"
            }
            cooldownTime: list[f32] = {
                100
                100
                90
                80
                160
                160
                100
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            cannotBeSuppressed: bool = true
            canCastWhileDisabled: bool = true
            mCantCancelWhileWindingUp: bool = true
            castRadius: list[f32] = {
                20
                20
                20
                20
                20
                20
                20
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 13
            0x63060019: link = 0x776025e6
            0x92a53e77: list[hash] = {
                0xa4ded13c
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_OlafR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_OlafR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
            }
            mTargetingTypeData: pointer = Self {}
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_OlafR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_OlafRagnarok_Name"
                        "keySummary" = "Spell_OlafRagnarok_Summary"
                        "keyTooltip" = "Spell_OlafRagnarok_Tooltip"
                        "keyCost" = "Spell_Cost_NoCost"
                        "keyPickChoiceName" = "game_character_displayname_Olaf"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Resists"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_ArmorandMagicResist"
                                }
                                TooltipInstanceListElement {
                                    type: string = "FlatAD"
                                    typeIndex: i32 = 6
                                    nameOverride: string = "Spell_ListType_AttackDamageBonus"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Haste"
                                    typeIndex: i32 = 5
                                    multiplier: f32 = 100
                                    nameOverride: string = "Spell_ListType_MovementSpeed"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_OlafRagnarok"
            mVfxSpawnConditions: list[pointer] = {
                VfxSpawnConditions {
                    mDefaultVfxData: embed = VFXDefaultSpawnConditionData {
                        mPersistentVfxs: list[embed] = {
                            EffectCreationData {
                                mEffectKey: hash = 0xf2ad6a21
                            }
                        }
                    }
                }
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
        }
    }
    0x776025e6 = 0xefc7f35c {
        0x81cd26c4: file = 0x2e896349339a4da1
    }
    0x472ead19 = SpellObject {
        mScriptName: string = "UltBook_KhazixR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 36
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "KhazixR"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "StealthDuration"
                    mValues: list[f32] = {
                        1.25
                        1.25
                        1.25
                        1.25
                        1.25
                        1.25
                        1.25
                    }
                    mBaseP: f32 = 1.25
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "RecastWindow"
                    mValues: list[f32] = {
                        10
                        10
                        10
                        10
                        10
                        10
                        10
                    }
                    mBaseP: f32 = 10
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "BonusMovementSpeedPercent"
                    mValues: list[f32] = {
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                    }
                    mBaseP: f32 = 0.400000006
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "EvolutionsAvailable"
                    mValues: list[f32] = {
                        0
                        1
                        2
                        3
                        3
                        3
                        3
                    }
                    0x3f95426c: bool = false
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "EvolvedStealthDuration"
                    mValues: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                    mBaseP: f32 = 2
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "RecastCD"
                    mValues: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                    mBaseP: f32 = 2
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "NumberOfCasts"
                    mValues: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                    mBaseP: f32 = 2
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "EvolvedNumberOfCasts"
                    mValues: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                    mBaseP: f32 = 3
                    mFormula: string = "P"
                }
            }
            0x94572284: map[hash,pointer] = {
                0xba2719ef = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NumberCalculationPart {
                            mNumber: f32 = 1
                        }
                    }
                    0x37070a8d: u8 = 5
                    tooltipOnly: bool = true
                }
                0x8b6fe763 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NumberCalculationPart {}
                    }
                    0x37070a8d: u8 = 5
                    tooltipOnly: bool = true
                }
                0x2001728c = GameCalculationConditional {
                    0x011436b4: hash = 0x8b6fe763
                    0x006fde67: hash = 0xba2719ef
                    0xc0482365: pointer = HasBuffCastRequirement {
                        mBuffName: hash = 0x7bcf22fa
                    }
                    0x37070a8d: u8 = 6
                    tooltipOnly: bool = true
                }
            }
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Khazix_Square.dds"
            }
            cooldownTime: list[f32] = {
                100
                100
                85
                70
                70
                70
                70
            }
            mCantCancelWhileWindingUp: bool = true
            mUseMinimapTargeting: bool = true
            useAnimatorFramerate: bool = true
            bIsToggleSpell: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRadius: list[f32] = {
                300
                300
                300
                300
                300
                300
                300
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 7.5
            missileSpeed: f32 = 2200
            0x63060019: link = 0x493b3743
            0x92a53e77: list[hash] = {
                0x48d90cd1
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_KhazixR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_KhazixR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                2
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Self {}
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_KhazixR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_KhazixR_Name"
                        "keySummary" = "Spell_KhazixR_Summary"
                        "keyTooltip" = "Spell_KhazixR_Tooltip_0"
                        "keyTooltipExtendedBelowLine" = "Spell_KhazixR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Khazix"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_KhazixR"
        }
    }
    0x493b3743 = 0xefc7f35c {
        0x81cd26c4: file = 0xe8e0d8b4763a45c0
    }
    0x51bb86e8 = SpellObject {
        mScriptName: string = "UltBook_KhazixRStealth"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_KhazixRStealth"
        }
    }
    0xcd14b1bd = AbilityObject {
        mRootSpell: link = 0x4b4a6bb9
        mChildSpells: list[link] = {
            0x4b4a6bb9
            0xb3d3a070
        }
        mName: string = "UltBook_RyzeR"
    }
    0x4b4a6bb9 = SpellObject {
        mScriptName: string = "UltBook_RyzeR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 8192
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "PositiveEffect_Teleport"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {
                    value: list[f32] = {
                        6
                        6
                        6
                        6
                        6
                        6
                        6
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "ChargeTime"
                    mValues: list[f32] = {
                        2.0999999
                        2.0999999
                        2.0999999
                        2.0999999
                        2.0999999
                        2.0999999
                        2.0999999
                    }
                    mBaseP: f32 = 2.0999999
                }
                SpellDataValue {
                    mName: string = "TeleportTime"
                    mValues: list[f32] = {
                        0.649999976
                        0.649999976
                        0.649999976
                        0.649999976
                        0.649999976
                        0.649999976
                        0.649999976
                    }
                    mBaseP: f32 = 0.649999976
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "AllyIndicatorBuffDuration"
                    mValues: list[f32] = {
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                    }
                    mBaseP: f32 = 0.75
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "ChargeTimeTooltip"
                    mValues: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                    mBaseP: f32 = 2
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "OverloadDamageBonus"
                    mValues: list[f32] = {
                        10
                        40
                        70
                        100
                        130
                        160
                        190
                    }
                    mBaseP: f32 = 10
                    mFormula: string = "P + 30"
                }
                SpellDataValue {
                    mName: string = "OverloadHealPercent"
                    mValues: list[f32] = {
                        0
                        20
                        25
                        30
                        40
                        50
                        60
                    }
                    0x3f95426c: bool = false
                    mFormula: string = "P + 10"
                }
                SpellDataValue {
                    mName: string = "HealPercentMinionMod"
                    mValues: list[f32] = {
                        0.330000013
                        0.330000013
                        0.330000013
                        0.330000013
                        0.330000013
                        0.330000013
                        0.330000013
                    }
                    mBaseP: f32 = 0.330000013
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "MinimumCastRange"
                    mValues: list[f32] = {
                        1000
                        1000
                        1000
                        1000
                        1000
                        1000
                        1000
                    }
                    mBaseP: f32 = 1000
                }
            }
            mCoefficient: f32 = 0.600000024
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Ryze_Square_0.dds"
            }
            cooldownTime: list[f32] = {
                210
                210
                180
                150
                120
                120
                120
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            mCantCancelWhileChanneling: bool = true
            cantCastWhileRooted: bool = true
            mUseMinimapTargeting: bool = true
            castRangeUseBoundingBoxes: bool = true
            bIsToggleSpell: bool = true
            castRange: list[f32] = {
                3000
                3000
                3000
                3000
                3000
                3000
                3000
            }
            castRangeDisplayOverride: list[f32] = {
                3000
                3000
                3000
                3000
                3000
                3000
                3000
            }
            castRadius: list[f32] = {
                365
                365
                365
                365
                365
                365
                365
            }
            castRadiusSecondary: list[f32] = {
                1000
                1000
                1000
                1000
                1000
                1000
                1000
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 5.36499977
            missileSpeed: f32 = 1700
            mLookAtPolicy: u32 = 0
            0x63060019: link = 0xf5795f5a
            0x92a53e77: list[hash] = {
                0x8ec985c8
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_RyzeR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_RyzeR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = LocationClamped {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_RyzeR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_RyzeR_Name"
                        "keySummary" = "Spell_RyzeR_Summary"
                        "keyTooltip" = "Spell_RyzeR_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_RyzeR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Ryze"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                    typeIndex: i32 = 7
                                    nameOverride: string = "Spell_ListType_Cooldown"
                                }
                                TooltipInstanceListElement {
                                    type: string = "OverloadDamageBonus"
                                    nameOverride: string = "Spell_ListType_RyzeOverloadDamageIncrease"
                                    Style: u32 = 1
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionMultiAOE {
                        centerLocator: embed = DrawablePositionLocator {
                            orientationType: u32 = 3
                        }
                        overrideAOERadius: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                365
                                365
                                365
                                365
                                365
                                365
                            }
                        }
                        overrideMinCastRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                1000
                                1000
                                1000
                                1000
                                1000
                                1000
                            }
                            mValueType: u32 = 1
                        }
                        overrideMaxCastRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                25000
                                25000
                                25000
                                25000
                                25000
                                25000
                            }
                            mValueType: u32 = 1
                        }
                        leftTextureName: string = "ASSETS/Spells/Textures/blank.dds"
                        innerTextureName: string = "ASSETS/Spells/Textures/blank.dds"
                    }
                    TargeterDefinitionRange {
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                3000
                                3000
                                3000
                                3000
                                3000
                                3000
                            }
                        }
                        textureOverrideName: string = "ASSETS/Characters/Ryze/HUD/Textures/CircularRangeIndicator.dds"
                    }
                    TargeterDefinitionRange {
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                1000
                                1000
                                1000
                                1000
                                1000
                                1000
                            }
                            mValueType: u32 = 1
                        }
                        textureOverrideName: string = "ASSETS/Spells/Textures/CircularRangeIndicator_Empty.dds"
                    }
                    TargeterDefinitionMinimap {}
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_RyzeR"
        }
    }
    0xb3d3a070 = SpellObject {
        mScriptName: string = "UltBook_RyzeRChannel"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 8192
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        4
                        4
                        4
                        4
                        4
                        4
                        4
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        100
                        100
                        100
                        100
                        100
                        100
                        100
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        25
                        25
                        40
                        55
                        55
                        55
                        55
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        150
                        150
                        250
                        350
                        350
                        350
                        350
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        6
                        6
                        6
                        6
                        6
                        6
                        6
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 0.600000024
            mAnimationName: string = "Spell1"
            mImgIconName: list[string] = {
                "ASSETS/Characters/Ryze/HUD/Icons2D/Ryze_R.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -0.5
            mAmmoUsed: list[i32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            canCastWhileDisabled: bool = true
            mCantCancelWhileWindingUp: bool = true
            mUseMinimapTargeting: bool = true
            castRangeUseBoundingBoxes: bool = true
            mShowChannelBar: bool = false
            bIsToggleSpell: bool = true
            castRange: list[f32] = {
                2000
                2000
                2000
                2000
                2000
                2000
                2000
            }
            castRangeDisplayOverride: list[f32] = {
                2000
                2000
                2000
                2000
                2000
                2000
                2000
            }
            castRadius: list[f32] = {
                450
                450
                450
                450
                450
                450
                450
            }
            castRadiusSecondary: list[f32] = {
                450
                450
                450
                450
                450
                450
                450
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 5.36499977
            missileSpeed: f32 = 1700
            0x92a53e77: list[hash] = {
                0x8ec985c8
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Self {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                2500
                                2500
                                2500
                                2500
                                2500
                                2500
                            }
                        }
                    }
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                            orientationType: u32 = 3
                        }
                        constraintPosLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        overrideRadius: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                450
                                450
                                450
                                450
                                450
                                450
                            }
                        }
                    }
                    TargeterDefinitionMinimap {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                2000
                                2000
                                2000
                                2000
                                2000
                                2000
                            }
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_RyzeRChannel"
        }
    }
    0xf5795f5a = 0xefc7f35c {
        0x81cd26c4: file = 0xb5e3b1c85cbb6ffb
    }
    0x4e8d73ac = AbilityObject {
        mRootSpell: link = 0x88917a25
        mChildSpells: list[link] = {
            0xa558f102
            0x88917a25
            0xd7c5a72b
        }
        0x86ddaddb: bool = true
        mName: string = "UltBook_ViktorR"
        mType: u8 = 2
    }
    0x5081629d = SpellObject {
        mScriptName: string = "UltBook_PoppyRSpell"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        75
                        150
                        225
                        300
                        0
                        0
                        75
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 0.699999988
            mAnimationName: string = "Spell4_Charged"
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                10
                10
                0
            }
            delayCastOffsetPercent: f32 = -0.340000004
            delayTotalTimePercent: f32 = -0.699999988
            mCantCancelWhileWindingUp: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castFrame: f32 = 10
            mLineWidth: f32 = 100
            0x92a53e77: list[hash] = {
                0xc6efccb2
            }
            mTargetingTypeData: pointer = Location {}
            0x03f432a6: u8 = 1
        }
    }
    0x69e15199 = SpellObject {
        mScriptName: string = "UltBook_PoppyR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mExcludedUnitTags: embed = ObjectTags {
                mTagList: string = "NEXUSBLITZ_EventCharacter"
            }
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ImmobilizingCCSpell"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "BaseDamage"
                    mValues: list[f32] = {
                        200
                        200
                        300
                        400
                        500
                        600
                        700
                    }
                    mBaseP: f32 = 200
                    mFormula: string = "200+(N-1)*100"
                }
                SpellDataValue {
                    mName: string = "ChannelDistanceUpdateTick"
                    mValues: list[f32] = {
                        0.25
                        0.25
                        0.25
                        0.25
                        0.25
                        0.25
                        0.25
                    }
                    mBaseP: f32 = 0.25
                }
                SpellDataValue {
                    mName: string = "ChannelMaxDuration"
                    mValues: list[f32] = {
                        4
                        4
                        4
                        4
                        4
                        4
                        4
                    }
                    mBaseP: f32 = 4
                }
                SpellDataValue {
                    mName: string = "MaxKnockbackDistance"
                    mValues: list[f32] = {
                        2400
                        2400
                        2400
                        2400
                        2400
                        2400
                        2400
                    }
                    mBaseP: f32 = 2400
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "KnockupDurationCharged"
                    mValues: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                    mBaseP: f32 = 2
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "KnockupDurationSnap"
                    mValues: list[f32] = {
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                    }
                    mBaseP: f32 = 0.75
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "DurationUntilFullyCharged"
                    mValues: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                    mBaseP: f32 = 1
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "SelfSlow"
                    mValues: list[f32] = {
                        15
                        15
                        15
                        15
                        15
                        15
                        15
                    }
                    mBaseP: f32 = 15
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "CancelCDRefund"
                    mValues: list[f32] = {
                        30
                        30
                        30
                        30
                        30
                        30
                        30
                    }
                    mBaseP: f32 = 30
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "SnapCastDamageRatio"
                    mValues: list[f32] = {
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                    }
                    mBaseP: f32 = 0.5
                    mFormula: string = "P + 0"
                }
            }
            0xfb56608c: map[hash,embed] = {
                "URF" = 0x6b2f7a8d {
                    0x52fde74f: list[embed] = {
                        SpellDataValue {
                            mName: string = "CancelCDRefund"
                            mValues: list[f32] = {
                                6
                                6
                                6
                                6
                                6
                                6
                                6
                            }
                            mBaseP: f32 = 6
                        }
                    }
                }
            }
            0x94572284: map[hash,pointer] = {
                "Damage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "baseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.899999976
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                    }
                }
                0x6c89ea95 = GameCalculationModified {
                    mModifiedGameCalculation: hash = "Damage"
                    mMultiplier: pointer = NamedDataValueCalculationPart {
                        mDataValue: hash = 0x4107cd86
                    }
                    tooltipOnly: bool = true
                }
            }
            mCoefficient: f32 = 0.899999976
            mAnimationName: string = ""
            mImgIconName: list[string] = {
                "UltBook_Poppy_Square.dds"
                ""
            }
            mChannelDuration: list[f32] = {
                1
                1
                1
                1
                1
                1
                1
            }
            cooldownTime: list[f32] = {
                10
                140
                120
                100
                10
                10
                10
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            mCastRangeGrowthMax: list[f32] = {
                1200
                1200
                1200
                1200
                1200
                1200
                1200
            }
            mCastRangeGrowthStartTime: list[f32] = {
                0.5
                0.5
                0.5
                0.5
                0.5
                0.5
                0.5
            }
            mCastRangeGrowthDuration: list[f32] = {
                0.5
                0.5
                0.5
                0.5
                0.5
                0.5
                0.5
            }
            mCantCancelWhileWindingUp: bool = true
            mUseChargeChanneling: bool = true
            mCanMoveWhileChanneling: bool = true
            mDoNotNeedToFaceTarget: bool = true
            castRange: list[f32] = {
                500
                500
                500
                500
                500
                500
                500
            }
            mLineWidth: f32 = 90
            0x63060019: link = 0xff6cd2a8
            0x92a53e77: list[hash] = {
                0xc6efccb2
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_PoppyR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_PoppyR_SFX_events.bnk"
            }
            mTargetingTypeData: pointer = direction {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_PoppyR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_PoppyR_Name"
                        "keySummary" = "Spell_PoppyR_Summary"
                        "keyTooltip" = "Spell_PoppyR_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_PoppyR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Poppy"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "BaseDamage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        hasMaxGrowRange: bool = true
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                450
                                450
                                450
                                450
                                450
                                450
                            }
                            mValueType: u32 = 2
                        }
                        rangeGrowthStartTime: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                0.5
                                0.5
                                0.5
                                0.5
                                0.5
                                0.5
                            }
                            mValueType: u32 = 2
                        }
                        rangeGrowthDuration: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                0.5
                                0.5
                                0.5
                                0.5
                                0.5
                                0.5
                            }
                            mValueType: u32 = 2
                        }
                        rangeGrowthMax: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                1200
                                1200
                                1200
                                1200
                                1200
                                1200
                            }
                            mValueType: u32 = 2
                        }
                        textureMaxGrowName: string = "ASSETS/Spells/Textures/CircularRangeIndicator_Dark.dds"
                    }
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        alwaysDraw: bool = true
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                90
                                90
                                90
                                90
                                90
                                90
                            }
                            mValueType: u32 = 2
                        }
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                450
                                450
                                450
                                450
                                450
                                450
                            }
                            mValueType: u32 = 2
                        }
                        rangeGrowthStartTime: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                0.5
                                0.5
                                0.5
                                0.5
                                0.5
                                0.5
                            }
                            mValueType: u32 = 2
                        }
                        rangeGrowthDuration: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                0.5
                                0.5
                                0.5
                                0.5
                                0.5
                                0.5
                            }
                            mValueType: u32 = 2
                        }
                        rangeGrowthMax: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                1200
                                1200
                                1200
                                1200
                                1200
                                1200
                            }
                            mValueType: u32 = 2
                        }
                        textureBaseMaxGrowName: string = "ASSETS/Spells/Textures/LocalLineMissileBase_Dark.dds"
                        textureTargetMaxGrowName: string = "ASSETS/Spells/Textures/LocalLineMissileTarget_Dark.dds"
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_PoppyR"
        }
    }
    0x7acf1347 = SpellObject {
        mScriptName: string = "UltBook_PoppyRMissile"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        75
                        150
                        225
                        300
                        0
                        0
                        75
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 0.699999988
            mAnimationName: string = ""
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                10
                10
                0
            }
            mCantCancelWhileWindingUp: bool = true
            mProjectTargetToCastRange: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            luaOnMissileUpdateDistanceInterval: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 100
                movementComponent: pointer = FixedSpeedMovement {
                    mSpeed: f32 = 2000
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                    mOffsetInitialTargetHeight: f32 = 100
                }
                heightSolver: pointer = BlendedLinearHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 10
            missileSpeed: f32 = 2000
            mLineWidth: f32 = 100
            0x92a53e77: list[hash] = {
                0xc6efccb2
            }
            mTargetingTypeData: pointer = Location {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                100
                                100
                                100
                                100
                                100
                                100
                            }
                            mValueType: u32 = 2
                        }
                    }
                }
            }
        }
    }
    0xaaa2264a = SpellObject {
        mScriptName: string = "UltBook_PoppyRSpellInstant"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        75
                        150
                        225
                        300
                        0
                        0
                        75
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 0.699999988
            mAnimationName: string = "Spell4_Instant"
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                10
                10
                0
            }
            delayCastOffsetPercent: f32 = -0.340000004
            delayTotalTimePercent: f32 = -0.699999988
            mCantCancelWhileWindingUp: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castFrame: f32 = 10
            mLineWidth: f32 = 100
            0x92a53e77: list[hash] = {
                0xc6efccb2
            }
            mTargetingTypeData: pointer = Location {}
            0x03f432a6: u8 = 1
        }
    }
    0xff6cd2a8 = 0xefc7f35c {
        0x81cd26c4: file = 0x72f07df64edb57a7
    }
    0x51391171 = SpellObject {
        mScriptName: string = "UltBook_NunuR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ChannelSpell"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "BaseDamage"
                    mValues: list[f32] = {
                        625
                        625
                        925
                        1275
                        1275
                        1275
                        1275
                    }
                    0x3f95426c: bool = false
                }
                SpellDataValue {
                    mName: string = "SlowStartAmount"
                    mValues: list[f32] = {
                        -0.5
                        -0.5
                        -0.5
                        -0.5
                        -0.5
                        -0.5
                        -0.5
                    }
                    mBaseP: f32 = -0.5
                }
                SpellDataValue {
                    mName: string = "MaxSlowAmount"
                    mValues: list[f32] = {
                        -0.949999988
                        -0.949999988
                        -0.949999988
                        -0.949999988
                        -0.949999988
                        -0.949999988
                        -0.949999988
                    }
                    mBaseP: f32 = -0.949999988
                }
                SpellDataValue {
                    mName: string = "ChannelDuration"
                    mValues: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                    mBaseP: f32 = 3
                }
                SpellDataValue {
                    mName: string = "SlowDuration"
                    mValues: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                    mBaseP: f32 = 3
                }
                SpellDataValue {
                    mName: string = "MaxShieldDuration"
                    mValues: list[f32] = {
                        6
                        6
                        6
                        6
                        6
                        6
                        6
                    }
                    mBaseP: f32 = 6
                }
                SpellDataValue {
                    mName: string = "ShieldDecayDuration"
                    mValues: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                    mBaseP: f32 = 3
                }
                SpellDataValue {
                    mName: string = "BaseShieldAmount"
                    mValues: list[f32] = {
                        55
                        65
                        75
                        85
                        95
                        105
                        115
                    }
                    mBaseP: f32 = 55
                    mFormula: string = "P + 10"
                }
                SpellDataValue {
                    mName: string = "ShieldBonusHealthPercent"
                    mValues: list[f32] = {
                        0.200000003
                        0.300000012
                        0.400000006
                        0.5
                        0.600000024
                        0.699999988
                        0.800000012
                    }
                    mBaseP: f32 = 0.200000003
                    mFormula: string = "P + 0.1"
                }
            }
            0x94572284: map[hash,pointer] = {
                0x91b271c4 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0x2f89af4d
                        }
                        StatByNamedDataValueCalculationPart {
                            mDataValue: hash = 0x9194b31e
                            mStat: u8 = 11
                            mStatFormula: u8 = 2
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 1.5
                        }
                    }
                }
                "MaximumDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "baseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 2.5
                        }
                    }
                }
                "MinDamage" = GameCalculationModified {
                    mModifiedGameCalculation: hash = "MaximumDamage"
                    mMultiplier: pointer = NumberCalculationPart {
                        mNumber: f32 = 0.5
                    }
                    tooltipOnly: bool = true
                }
            }
            mAnimationName: string = ""
            mImgIconName: list[string] = {
                "UltBook_Nunu_Square.dds"
            }
            mCastTime: f32 = 0.00999999978
            mChannelDuration: list[f32] = {
                3
                3
                3
                3
                3
                3
                3
            }
            cooldownTime: list[f32] = {
                110
                110
                100
                90
                90
                90
                90
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            mSpellRevealsChampion: bool = false
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                650
                650
                650
                650
                650
                650
                650
            }
            castRangeDisplayOverride: list[f32] = {
                650
                650
                650
                650
                650
                650
                650
            }
            castRadius: list[f32] = {
                500
                500
                500
                500
                500
                500
                500
            }
            castConeDistance: f32 = 100
            missileSpeed: f32 = 828.5
            0x63060019: link = 0x9133ae86
            0x92a53e77: list[hash] = {
                0xeb79e45c
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_NunuR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_NunuR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            mTargetingTypeData: pointer = SelfAoe {}
            0x03f432a6: u8 = 1
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_NunuR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_NunuR_Name"
                        "keyTooltip" = "Spell_NunuR_Tooltip"
                        "keySummary" = "Spell_NunuR_Summary"
                        "keyPickChoiceName" = "game_character_displayname_Nunu"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "BaseDamage"
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "BaseShieldAmount"
                                    nameOverride: string = "Spell_ListType_ShieldAmount"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
    }
    0x908b3e04 = SpellObject {
        mScriptName: string = "UltBook_NunuRShield"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_Absolute_Zero_Shield"
        }
    }
    0x9133ae86 = 0xefc7f35c {
        0x81cd26c4: file = 0xf0671ec5f92464c9
    }
    0xd14aa1b8 = SpellObject {
        mScriptName: string = "UltBook_NunuR_Recast"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 36
            mAffectsTypeFlags: u32 = 14346
            mSpellTags: list[string] = {
                "Trait_ChannelSpell"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        625
                        625
                        925
                        1275
                        1275
                        1275
                        1275
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        -0.5
                        -0.5
                        -0.5
                        -0.5
                        -0.5
                        -0.5
                        -0.5
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {
                    value: list[f32] = {
                        -0.949999988
                        -0.949999988
                        -0.949999988
                        -0.949999988
                        -0.949999988
                        -0.949999988
                        -0.949999988
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {
                    value: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 2.5
            mCoefficient2: f32 = 0.400000006
            mAnimationName: string = "Spell3"
            mImgIconName: list[string] = {
                "UltBook_NunuR_Recast.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mAmmoUsed: list[i32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            mCanTriggerChargeSpellWhileDisabled: bool = true
            mCantCancelWhileWindingUp: bool = true
            useAnimatorFramerate: bool = true
            mDoNotNeedToFaceTarget: bool = true
            castRange: list[f32] = {
                10000
                10000
                10000
                10000
                10000
                10000
                10000
            }
            castRangeDisplayOverride: list[f32] = {
                650
                650
                650
                650
                650
                650
                650
            }
            castRadius: list[f32] = {
                210
                210
                210
                210
                210
                210
                210
            }
            castConeDistance: f32 = 100
            missileSpeed: f32 = 1850
            mLineWidth: f32 = 80
            mLookAtPolicy: u32 = 1
            mHitEffectKey: hash = 0xa16989ad
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            selectionPriority: u32 = 2
            mTargetingTypeData: pointer = Location {}
            mSpellCooldownOrSealedQueueThreshold: option[f32] = {
                0.300000012
            }
            0x03f432a6: u8 = 1
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                0x375656dd: hash = "Characters/Nunu/Spells/NunuRAbility/NunuR"
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
    }
    0xc48f3943 = AbilityObject {
        mRootSpell: link = 0xd5c193ad
        mChildSpells: list[link] = {
            0xd5c193ad
            0x7a6401c2
            0x8846889a
            0xc35d8bea
        }
        mName: string = "UltBook_XerathR"
    }
    0x51d94c00 = 0xefc7f35c {
        0x81cd26c4: file = 0x451bc2ce0c2b1063
    }
    0x7a6401c2 = SpellObject {
        mScriptName: string = "UltBook_XerathLocusPulse"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mImgIconName: list[string] = {
                "UltBook_Xerath_R1.dds"
            }
            mCastTime: f32 = 0.00999999978
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            mCantCancelWhileWindingUp: bool = true
            mDoesntBreakChannels: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            mMissileSpec: pointer = MissileSpecification {
                movementComponent: pointer = FixedTimeMovement {
                    mTravelTime: f32 = 0.600000024
                    mTargetHeightAugment: f32 = 81
                    mOffsetInitialTargetHeight: f32 = 81
                    mStartBoneName: string = "C_BUFFBONE_GLB_CENTER_LOC"
                }
                heightSolver: pointer = GravityHeightSolver {
                    mGravity: f32 = 19000
                }
                verticalFacing: pointer = VeritcalFacingMatchVelocity {}
                behaviors: list[pointer] = {
                    CastOnMovementComplete {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 1
            castFrame: f32 = 0.00999999978
            mMissileEffectKey: hash = 0xd35ecc41
            0x92a53e77: list[hash] = {
                0x0c98fb4a
            }
            bHaveHitBone: bool = true
            mTargetingTypeData: pointer = Area {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                    }
                }
            }
        }
    }
    0x8846889a = SpellObject {
        mScriptName: string = "UltBook_XerathRMissileWrapper"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 36
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "XerathLocusOfPower2"
            mSpellTags: list[string] = {
                "Trait_ChannelSpell"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        10
                        10
                        10
                        10
                        10
                        10
                        10
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        2
                        3
                        4
                        5
                        5
                        5
                        6
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        170
                        200
                        240
                        280
                        280
                        280
                        280
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        200
                        200
                        200
                        200
                        200
                        200
                        200
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        2000
                        3200
                        4400
                        5600
                        5600
                        5600
                        6800
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 0.430000007
            mImgIconName: list[string] = {
                "UltBook_Xerath_R1.dds"
            }
            cooldownTime: list[f32] = {
                0.600000024
                0.600000024
                0.600000024
                0.600000024
                0.600000024
                0.600000024
                0.600000024
            }
            mCantCancelWhileWindingUp: bool = true
            mDoesntBreakChannels: bool = true
            mUseMinimapTargeting: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRadius: list[f32] = {
                150
                175
                200
                225
                0
                0
                25
            }
            0x92a53e77: list[hash] = {
                0x0c98fb4a
            }
            mTargetingTypeData: pointer = Area {}
            mClientData: embed = SpellDataResourceClient {
                0x375656dd: hash = "Characters/Xerath/Spells/XerathLocusOfPower2Ability/XerathLocusOfPower2"
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                    }
                }
            }
        }
    }
    0xc35d8bea = SpellObject {
        mScriptName: string = "UltBook_XerathRShots"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_XerathRShots"
        }
    }
    0xd5c193ad = SpellObject {
        mScriptName: string = "UltBook_XerathR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 32
            mAffectsTypeFlags: u32 = 15567
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ChannelSpell"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        10
                        10
                        10
                        10
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        3
                        3
                        4
                        5
                        5
                        5
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        200
                        200
                        250
                        300
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        200
                        200
                        200
                        200
                        200
                        200
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        5000
                        5000
                        5000
                        5000
                        5000
                        5000
                        5000
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            0x94572284: map[hash,pointer] = {
                0xf34bcd47 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        EffectValueCalculationPart {
                            mEffectIndex: i32 = 3
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.449999988
                        }
                    }
                }
                "TotalDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        EffectValueCalculationPart {
                            mEffectIndex: i32 = 3
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.449999988
                        }
                    }
                }
            }
            mCoefficient: f32 = 0.449999988
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Xerath_Square.dds"
            }
            mChannelDuration: list[f32] = {
                10
                10
                10
                10
                10
                10
                10
            }
            cooldownTime: list[f32] = {
                130
                130
                115
                100
                100
                100
                100
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            mCantCancelWhileWindingUp: bool = true
            mUseMinimapTargeting: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                5000
                5000
                5000
                5000
                5000
                5000
                5000
            }
            castRangeDisplayOverride: list[f32] = {
                5000
                5000
                5000
                5000
                5000
                5000
                5000
            }
            castFrame: f32 = 7.5
            0x63060019: link = 0x51d94c00
            0x92a53e77: list[hash] = {
                0x0c98fb4a
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_XerathR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_XerathR_SFX_events.bnk"
            }
            mTargetingTypeData: pointer = LocationClamped {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_XerathR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_XerathLocusOfPower2_Name"
                        "keySummary" = "Spell_XerathLocusOfPower2_Summary"
                        "keyTooltip" = "Spell_XerathLocusOfPower2_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_XerathR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Xerath"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Effect%dAmount"
                                    typeIndex: i32 = 3
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Effect%dAmount"
                                    typeIndex: i32 = 2
                                    nameOverride: string = "Spell_ListType_XerathNumberofShots"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                    TargeterDefinitionMinimap {}
                }
            }
        }
    }
    0x5224a4dd = AbilityObject {
        mRootSpell: link = 0xb5914311
        mChildSpells: list[link] = {
            0xb5914311
            0xa52c32b5
        }
        mName: string = "UltBook_OriannaR"
    }
    0x69e7edab = AbilityObject {
        mRootSpell: link = 0x5b262d91
        mChildSpells: list[link] = {
            0x701a5589
        }
        0x86ddaddb: bool = true
        mName: string = "UltBook_AkaliR"
        mType: u8 = 2
    }
    0x53fdf1f8 = 0xefc7f35c {
        0x81cd26c4: file = 0x54edcce7149bd09a
    }
    0x5b262d91 = SpellObject {
        mScriptName: string = "UltBook_AkaliR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 2
            mAlternateName: string = "AkaliR"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "PositiveEffect_MoveBlock"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        60
                        60
                        120
                        180
                        240
                        175
                        175
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {
                    value: list[f32] = {
                        120
                        120
                        100
                        80
                        80
                        80
                        80
                    }
                }
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "BaseDamage"
                    mValues: list[f32] = {
                        -60
                        80
                        220
                        360
                        500
                        640
                        780
                    }
                    mBaseP: f32 = -60
                    mFormula: string = "P + 140"
                }
                SpellDataValue {
                    mName: string = "MaxExecuteThreshold"
                    mValues: list[f32] = {
                        0
                        0.300000012
                        0.300000012
                        0.300000012
                        0.300000012
                        0.300000012
                        0.300000012
                    }
                    mFormula: string = "0.3"
                }
                SpellDataValue {
                    mName: string = "CooldownBetweenCasts"
                    mValues: list[f32] = {
                        0
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                    }
                    mFormula: string = "2.5"
                }
                SpellDataValue {
                    mName: string = "R2BaseDamage"
                    mValues: list[f32] = {
                        60
                        60
                        130
                        200
                        200
                        90
                        0
                    }
                    0x3f95426c: bool = false
                }
                SpellDataValue {
                    mName: string = "DashDistance"
                    mValues: list[f32] = {
                        715
                        715
                        715
                        715
                        715
                        715
                        715
                    }
                    mBaseP: f32 = 715
                }
            }
            0x94572284: map[hash,pointer] = {
                "Cast1Damage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "baseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.5
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.300000012
                        }
                    }
                    0xcbcac618: u8 = 6
                }
                "Cast2DamageMin" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0x18964e99
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.300000012
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.200000003
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                    }
                    0xcbcac618: u8 = 6
                }
                "Cast2DamageMax" = GameCalculationModified {
                    mModifiedGameCalculation: hash = "Cast2DamageMin"
                    mMultiplier: pointer = NumberCalculationPart {
                        mNumber: f32 = 3
                    }
                    0xcbcac618: u8 = 6
                }
            }
            mCoefficient: f32 = 0.300000012
            mCoefficient2: f32 = 0.699999988
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Akali_Square.dds"
            }
            mCastTime: f32 = 0.25
            cooldownTime: list[f32] = {
                120
                100
                80
                60
                60
                60
                60
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            mCantCancelWhileWindingUp: bool = true
            cantCastWhileRooted: bool = true
            mSpellRevealsChampion: bool = false
            mDoNotNeedToFaceTarget: bool = true
            castRange: list[f32] = {
                675
                675
                675
                675
                675
                675
                675
            }
            castRangeDisplayOverride: list[f32] = {
                675
                675
                675
                675
                675
                675
                675
            }
            castRadius: list[f32] = {
                400
                400
                400
                400
                400
                400
                400
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 10
            missileSpeed: f32 = 0
            0x63060019: link = 0x53fdf1f8
            0x92a53e77: list[hash] = {
                0xb1517da2
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_AkaliR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_AkaliR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                1
                1
                1
                1
                1
                1
                1
                1
                1
                1
                1
                1
                1
                1
                1
                1
            }
            selectionPriority: u32 = 1
            mSpellCooldownOrSealedQueueThreshold: option[f32] = {
                0.5
            }
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_AkaliR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_AkaliR_Name"
                        "keySummary" = "Spell_AkaliR_Summary"
                        "keyTooltip" = "Spell_AkaliR_Tooltip"
                        "keyCost" = "Spell_Cost_NoCost"
                        "keyTooltipExtendedBelowLine" = "Spell_AkaliR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Akali"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                    nameOverride: string = "Spell_ListType_Cooldown"
                                }
                                TooltipInstanceListElement {
                                    type: string = "BaseDamage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_AkaliR_BaseDamage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "R2BaseDamage"
                                    typeIndex: i32 = 1
                                    multiplier: f32 = 3
                                    nameOverride: string = "Spell_AkaliR_MaxDamage"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
    }
    0x701a5589 = SpellObject {
        mScriptName: string = "UltBook_AkaliRb"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "AkaliR"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "PositiveEffect_MoveBlock"
            }
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Akali_R2.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.75
            delayTotalTimePercent: f32 = -1
            mCantCancelWhileWindingUp: bool = true
            cantCastWhileRooted: bool = true
            mSpellRevealsChampion: bool = false
            mDisableCastBar: bool = true
            mMinimapIconDisplayFlag: u16 = 0
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRangeDisplayOverride: list[f32] = {
                575
                575
                575
                575
                575
                575
                575
            }
            castRadius: list[f32] = {
                400
                400
                400
                400
                400
                400
                400
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 10
            missileSpeed: f32 = 0
            0x92a53e77: list[hash] = {
                0xb1517da2
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Area {}
            mSpellCooldownOrSealedQueueThreshold: option[f32] = {
                0.300000012
            }
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                0x375656dd: hash = 0x5b262d91
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        hideWithLineIndicator: bool = true
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                750
                                750
                                750
                                750
                                750
                                750
                            }
                            mValueType: u32 = 1
                        }
                    }
                    TargeterDefinitionLine {
                        startLocator: embed = DrawablePositionLocator {
                            orientationType: u32 = 2
                        }
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                            orientationType: u32 = 2
                        }
                        lineStopsAtEndPosition: option[bool] = {
                            false
                        }
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                90
                                90
                                90
                                90
                                90
                                90
                            }
                            mValueType: u32 = 1
                        }
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                750
                                750
                                750
                                750
                                750
                                750
                            }
                            mValueType: u32 = 1
                        }
                    }
                }
            }
        }
    }
    0x93827608 = AbilityObject {
        mRootSpell: link = 0x6720b13b
        mChildSpells: list[link] = {
            0x6720b13b
            0x9f090e16
        }
        mName: string = "UltBook_SeraphineR"
    }
    0x5db436b9 = 0xefc7f35c {
        0x81cd26c4: file = 0x96b7f1e380c14833
    }
    0x6720b13b = SpellObject {
        mScriptName: string = "UltBook_SeraphineR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4194304
            mAffectsTypeFlags: u32 = 22539
            mAffectsStatusFlags: u32 = 32
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ImmobilizingCCSpell"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "RChannelDuration"
                    mValues: list[f32] = {
                        1
                        1.25
                        1.5
                        1.75
                        2
                        2.25
                        2.5
                    }
                    mBaseP: f32 = 1
                    mFormula: string = "P + 0.25"
                }
                SpellDataValue {
                    mName: string = "R1BaseDamage"
                    mValues: list[f32] = {
                        100
                        150
                        200
                        250
                        300
                        350
                        400
                    }
                    mBaseP: f32 = 100
                    mFormula: string = "P + 50"
                }
                SpellDataValue {
                    mName: string = "R1APRatio"
                    mValues: list[f32] = {
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                    }
                    mBaseP: f32 = 0.600000024
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "RRange"
                    mValues: list[f32] = {
                        1200
                        1200
                        1200
                        1200
                        1200
                        1200
                        1200
                    }
                    mBaseP: f32 = 1200
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "RMinSlow"
                    mValues: list[f32] = {
                        -0.400000006
                        -0.400000006
                        -0.400000006
                        -0.400000006
                        -0.400000006
                        -0.400000006
                        -0.400000006
                    }
                    mBaseP: f32 = -0.400000006
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "RMaxSlow"
                    mValues: list[f32] = {
                        -0.99000001
                        -0.99000001
                        -0.99000001
                        -0.99000001
                        -0.99000001
                        -0.99000001
                        -0.99000001
                    }
                    mBaseP: f32 = -0.99000001
                    mFormula: string = "P + 0"
                }
            }
            0x94572284: map[hash,pointer] = {
                0xf5e6b66b = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0x9ee6a934
                        }
                        StatByNamedDataValueCalculationPart {
                            mDataValue: hash = 0xa3015204
                        }
                    }
                }
            }
            mAnimationName: string = "Spell4_start"
            mImgIconName: list[string] = {
                "UltBook_Seraphine_Square.EllipsisMage.dds"
            }
            mCastTime: f32 = 0.5
            cooldownTime: list[f32] = {
                160
                160
                130
                100
                100
                100
                100
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            0x3d746f1f: u8 = 2
            mCantCancelWhileWindingUp: bool = true
            0x7e3432a0: bool = true
            alwaysSnapFacing: bool = true
            useAnimatorFramerate: bool = true
            mTurnSpeedScalar: f32 = 5
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRadius: list[f32] = {
                500
                500
                500
                500
                500
                500
                500
            }
            luaOnMissileUpdateDistanceInterval: f32 = 50.0009995
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 160
                movementComponent: pointer = FixedSpeedMovement {
                    mProjectTargetToCastRange: bool = true
                    mSpeed: f32 = 1600
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "C_Buffbone_Glb_Layout_Loc"
                }
                heightSolver: pointer = GravityHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            0x63060019: link = 0x5db436b9
            0x92a53e77: list[hash] = {
                0x0f707b3b
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_SeraphineR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_SeraphineR_SFX_events.bnk"
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = LocationClamped {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_SeraphineR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_SeraphineR_Name"
                        "keyTooltip" = "Spell_SeraphineR_Tooltip"
                        "keySummary" = "Spell_SeraphineR_Summary"
                        "keyPickChoiceName" = "game_character_displayname_Seraphine"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                                TooltipInstanceListElement {
                                    type: string = "RChannelDuration"
                                    nameOverride: string = "Spell_ListType_CharmDuration"
                                }
                                TooltipInstanceListElement {
                                    type: string = "R1BaseDamage"
                                    nameOverride: string = "Spell_ListType_InitialDamage"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                            orientationType: u32 = 3
                        }
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                160
                                160
                                160
                                160
                                160
                                160
                            }
                            mValueType: u32 = 1
                        }
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                1300
                                1300
                                1300
                                1300
                                1300
                                1300
                            }
                            mValueType: u32 = 1
                        }
                    }
                    TargeterDefinitionRange {
                        hideWithLineIndicator: bool = true
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                1200
                                1200
                                1200
                                1200
                                1200
                                1200
                            }
                            mValueType: u32 = 1
                        }
                    }
                }
            }
        }
    }
    0x9f090e16 = SpellObject {
        mScriptName: string = "UltBook_SeraphineRPostCast"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 8192
            mAnimationName: string = "Spell4_cast"
            mCastTime: f32 = 0.5
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            mCantCancelWhileWindingUp: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            mTargetingTypeData: pointer = Self {}
            mClientData: embed = SpellDataResourceClient {
                0x375656dd: hash = 0x6720b13b
                0x7d4a0e6e: hash = 0x6720b13b
            }
        }
    }
    0xd9c7b2d7 = AbilityObject {
        mRootSpell: link = 0x6fa3dbad
        mChildSpells: list[link] = {
            0x5df2bb4d
            0x6fa3dbad
        }
        0x86ddaddb: bool = true
        mName: string = "UltBook_NocturneR"
        mType: u8 = 2
    }
    0x5df2bb4d = SpellObject {
        mScriptName: string = "UltBook_NocturneR2"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 4106
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mSpellTags: list[string] = {
                "PositiveEffect_MoveBlock"
                "Trait_Ultimate"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        250
                        250
                        250
                        250
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        1750
                        2500
                        3250
                        4000
                        0
                        0
                        750
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        150
                        150
                        275
                        400
                        0
                        0
                        100
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {
                    value: list[f32] = {
                        6
                        6
                        6
                        6
                        6
                        6
                        6
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 1
            mAnimationName: string = "Idle1"
            mAnimationLoopName: string = "Spell4"
            mAnimationWinddownName: string = "Spell4"
            mImgIconName: list[string] = {
                "Nocturne_Square.dds"
            }
            cooldownTime: list[f32] = {
                150
                150
                125
                100
                75
                75
                75
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            mCantCancelWhileChanneling: bool = true
            cantCastWhileRooted: bool = true
            mUseMinimapTargeting: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                1750
                2500
                3250
                4000
                2500
                2500
                3250
            }
            castRadius: list[f32] = {
                1500
                1500
                1500
                1500
                1500
                1500
                1500
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 7.5
            missileSpeed: f32 = 20
            0x92a53e77: list[hash] = {
                0x40fe753e
            }
            mFloatVarsDecimals: list[i32] = {
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            selectionPriority: u32 = 2
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                0x375656dd: hash = "Characters/Nocturne/Spells/NocturneParanoiaAbility/NocturneParanoia"
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionMinimap {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
    }
    0x6fa3dbad = SpellObject {
        mScriptName: string = "UltBook_NocturneR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 9221
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "NocturneParanoia"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ChannelSpell"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "ParanoiaDuration"
                    mValues: list[f32] = {
                        6
                        6
                        6
                        6
                        6
                        6
                        6
                    }
                    mBaseP: f32 = 6
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "TrackDistance"
                    mValues: list[f32] = {
                        3500
                        3500
                        4250
                        5000
                        5750
                        6500
                        7250
                    }
                    mBaseP: f32 = 3500
                    mFormula: string = "(N-1)*750+3500"
                }
                SpellDataValue {
                    mName: string = "BaseDamage"
                    mValues: list[f32] = {
                        150
                        150
                        275
                        400
                        525
                        650
                        775
                    }
                    mBaseP: f32 = 150
                    mFormula: string = "(N-1)*125+150"
                }
                SpellDataValue {
                    mName: string = "DashSpeed"
                    mValues: list[f32] = {
                        1800
                        1800
                        1800
                        1800
                        1800
                        1800
                        1800
                    }
                    mBaseP: f32 = 1800
                }
            }
            0x94572284: map[hash,pointer] = {
                "Damage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "baseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 1.20000005
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                    }
                }
            }
            mAnimationName: string = "Channel"
            mAnimationLoopName: string = "Channel"
            mAnimationWinddownName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Nocturne_Square.dds"
            }
            cooldownTime: list[f32] = {
                140
                140
                115
                90
                90
                90
                90
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            mCantCancelWhileChanneling: bool = true
            mUseMinimapTargeting: bool = true
            useAnimatorFramerate: bool = true
            bIsToggleSpell: bool = true
            castRange: list[f32] = {
                2500
                2500
                3250
                4000
                2500
                2500
                2500
            }
            castRadius: list[f32] = {
                1500
                1500
                1500
                1500
                1500
                1500
                1500
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 7.5
            missileSpeed: f32 = 20
            0x63060019: link = 0x918516fc
            0x92a53e77: list[hash] = {
                0x40fe753e
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_NoctureR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_NoctureR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            selectionPriority: u32 = 2
            mTargetingTypeData: pointer = SelfAoe {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_NocturneR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_NocturneR_Name"
                        "keySummary" = "Spell_NocturneR_Summary"
                        "keyTooltip" = "Spell_NocturneR_Tooltip"
                        "keyTooltipSimple" = "Spell_NocturneR_TooltipSimple"
                        "keyPickChoiceName" = "game_character_displayname_Nocturne"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "BaseDamage"
                                    typeIndex: i32 = 3
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "CastRange"
                                    typeIndex: i32 = 2
                                    nameOverride: string = "Spell_ListType_Range"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionMinimap {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_NocturneParanoia"
        }
    }
    0x7f624497 = SpellObject {
        mScriptName: string = "UltBook_NocturneParanoiaTarget"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_NocturneParanoiaTarget"
        }
    }
    0x918516fc = 0xefc7f35c {
        0x81cd26c4: file = 0xb3bff173c140962e
    }
    0x64cf7484 = AbilityObject {
        mRootSpell: link = 0x5fc800dd
        mChildSpells: list[link] = {
            0x5fc800dd
            0xb0efc09f
        }
        mName: string = "UltBook_AsheR"
    }
    0x5fc800dd = SpellObject {
        mScriptName: string = "UltBook_AsheR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 4106
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "EnchantedCrystalArrow"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ImmobilizingCCSpell"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "RBaseDamage"
                    mValues: list[f32] = {
                        0
                        200
                        400
                        600
                        800
                        1000
                        1200
                    }
                    mFormula: string = "P + 200"
                }
                SpellDataValue {
                    mName: string = "MinStunDuration"
                    mValues: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                    mBaseP: f32 = 1
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "MaxStunDuration"
                    mValues: list[f32] = {
                        3.5
                        3.5
                        3.5
                        3.5
                        3.5
                        3.5
                        3.5
                    }
                    mBaseP: f32 = 3.5
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "SlowRadius"
                    mValues: list[f32] = {
                        400
                        400
                        400
                        400
                        400
                        400
                        400
                    }
                    mBaseP: f32 = 400
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "AoECoefficient"
                    mValues: list[f32] = {
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                    }
                    mBaseP: f32 = 0.5
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "APRatio"
                    mValues: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                    mBaseP: f32 = 1
                }
            }
            0x94572284: map[hash,pointer] = {
                "RMainDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "RBaseDamage"
                        }
                        StatByNamedDataValueCalculationPart {
                            mDataValue: hash = "APRatio"
                        }
                    }
                }
                0x6b932875 = GameCalculationModified {
                    mModifiedGameCalculation: hash = "RMainDamage"
                    mMultiplier: pointer = NamedDataValueCalculationPart {
                        mDataValue: hash = "AoeCoefficient"
                    }
                }
                "SlowAmount" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        ByCharLevelInterpolationCalculationPart {
                            mStartValue: f32 = 0.200000003
                            mEndValue: f32 = 0.300000012
                        }
                    }
                    0xcbcac618: u8 = 6
                }
            }
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Ashe_Square.dds"
            }
            mMinimapIconName: string = "ASSETS/Characters/Ashe/HUD/Icons2D/Bowmaster_EnchantedArrow_Circle.dds"
            cooldownTime: list[f32] = {
                100
                100
                80
                60
                60
                60
                60
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            mUseMinimapTargeting: bool = true
            mMinimapIconRotation: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRadius: list[f32] = {
                100
                100
                100
                100
                100
                100
                100
            }
            castConeDistance: f32 = 100
            luaOnMissileUpdateDistanceInterval: f32 = 10
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 130
                movementComponent: pointer = FixedSpeedMovement {
                    mProjectTargetToCastRange: bool = true
                    mSpeed: f32 = 1600
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                    mTargetHeightAugment: f32 = 100
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "R_hand"
                }
                visibilityComponent: pointer = Defaultvisibility {
                    mPerceptionBubbleRadius: f32 = 750
                }
                heightSolver: pointer = FollowTerrainHeightSolver {
                    mHeightOffset: f32 = 100
                }
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 7.5
            missileSpeed: f32 = 1600
            mMissileEffectKey: hash = 0xa389f446
            mLineWidth: f32 = 130
            0x63060019: link = 0xb519eced
            0x92a53e77: list[hash] = {
                0xf8b4c097
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_AsheR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_AsheR_SFX_events.bnk"
            }
            mTargetingTypeData: pointer = Location {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_AsheR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_EnchantedCrystalArrow_Name"
                        "keySummary" = "Spell_EnchantedCrystalArrow_Summary"
                        "keyTooltip" = "Spell_EnchantedCrystalArrow_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_EnchantedCrystalArrow_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Ashe"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "RBaseDamage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        hideWithLineIndicator: bool = true
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionMinimap {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        useGlobalLineIndicator: bool = true
                        lineStopsAtEndPosition: option[bool] = {
                            false
                        }
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                130
                                130
                                130
                                130
                                130
                                130
                            }
                            mValueType: u32 = 2
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_EnchantedCrystalArrow"
        }
    }
    0xb0efc09f = SpellObject {
        mScriptName: string = "UltBook_AshePassiveSlow"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_AshePassiveSlow"
        }
    }
    0xb519eced = 0xefc7f35c {
        0x81cd26c4: file = 0x0c651a67fdb76f78
    }
    0xb01fb598 = AbilityObject {
        mRootSpell: link = 0x890f5e35
        mChildSpells: list[link] = {
            0x890f5e35
            0x63e1a0ab
        }
        mName: string = "UltBook_TwitchR"
    }
    0x63e1a0ab = SpellObject {
        mScriptName: string = "UltBook_TwitchSprayandPrayAttack"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6826
            mAlternateName: string = "TwitchFullAutomatic"
            mSpellTags: list[string] = {
                "Trait_MultiTargetAttack"
            }
            mAnimationName: string = "Channel"
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.222200006
            delayTotalTimePercent: f32 = -0.333299994
            canCastWhileDisabled: bool = true
            bHaveHitEffect: bool = true
            castRange: list[f32] = {
                5000
                5000
                5000
                5000
                5000
                5000
                5000
            }
            castRadius: list[f32] = {
                210
                210
                210
                210
                210
                210
                210
            }
            castConeDistance: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 60
                movementComponent: pointer = FixedSpeedMovement {
                    mProjectTargetToCastRange: bool = true
                    mSpeed: f32 = 4000
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                    mStartBoneName: string = "weapon"
                }
                heightSolver: pointer = BlendedLinearHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 7.5
            missileSpeed: f32 = 4000
            mMissileEffectKey: hash = 0x4686b1cc
            mLineWidth: f32 = 60
            mHitEffectOrientType: u32 = 2
            mHitEffectKey: hash = 0x23670388
            bHaveHitBone: bool = true
            mHitBoneName: string = "C_BUFFBONE_GLB_CHEST_LOC"
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
    }
    0x80f2f6e9 = 0xefc7f35c {
        0x81cd26c4: file = 0xafc075353bdd6c17
    }
    0x890f5e35 = SpellObject {
        mScriptName: string = "UltBook_TwitchR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 6154
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_SylasSpecialAttackOverride"
                "Trait_MultiTargetAttack"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        25
                        40
                        55
                        70
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        6
                        6
                        6
                        6
                        6
                        6
                        6
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        10
                        10
                        10
                        10
                        10
                        10
                        10
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        60
                        60
                        60
                        60
                        60
                        60
                        60
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        300
                        300
                        300
                        300
                        300
                        300
                        300
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "BonusRange"
                    mValues: list[f32] = {
                        250
                        250
                        250
                        250
                        250
                        250
                        250
                    }
                    mBaseP: f32 = 250
                }
                SpellDataValue {
                    mName: string = "FallOffDamage"
                    mValues: list[f32] = {
                        0.100000001
                        0.100000001
                        0.100000001
                        0.100000001
                        0.100000001
                        0.100000001
                        0.100000001
                    }
                    mBaseP: f32 = 0.100000001
                }
                SpellDataValue {
                    mName: string = "MinimumFallOffDamage"
                    mValues: list[f32] = {
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                    }
                    mBaseP: f32 = 0.600000024
                }
            }
            mCoefficient: f32 = 1
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Twitch_Square.dds"
            }
            cooldownTime: list[f32] = {
                90
                90
                90
                90
                90
                90
                90
            }
            mCantCancelWhileWindingUp: bool = true
            mDoesNotConsumeMana: bool = true
            castRange: list[f32] = {
                1200
                1200
                1200
                1200
                1200
                1200
                1200
            }
            castRadius: list[f32] = {
                20
                20
                20
                20
                20
                20
                20
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 3.05999994
            0x63060019: link = 0x80f2f6e9
            0x92a53e77: list[hash] = {
                0x3460d50b
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_TwitchR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_TwitchR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Self {}
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_TwitchR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_TwitchFullAutomatic_Name"
                        "keySummary" = "Spell_TwitchFullAutomatic_Summary"
                        "keyTooltip" = "Spell_TwitchFullAutomatic_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_TwitchFullAutomatic_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Twitch"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Effect%dAmount"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_AttackDamageBonus"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionAoe {
                        overrideRadius: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                925
                                925
                                925
                                925
                                925
                                925
                            }
                            mValueType: u32 = 1
                        }
                        textureRadiusOverrideName: string = "ASSETS/Spells/Textures/CircularRangeIndicator_Dark.dds"
                    }
                }
            }
        }
    }
    0x76e285a2 = AbilityObject {
        mRootSpell: link = 0xd4d31aa3
        mChildSpells: list[link] = {
            0xd4d31aa3
            0x9952d243
            0x7f9d5300
            0x675064a6
        }
        0x86ddaddb: bool = true
        mName: string = "UltBook_VexR"
        mType: u8 = 2
    }
    0x675064a6 = SpellObject {
        mScriptName: string = "UltBook_VexRTarget"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 36
            mAffectsTypeFlags: u32 = 2
            mAnimationName: string = ""
            mImgIconName: list[string] = {
                "ASSETS/Characters/Vex/HUD/Icons2D/Icons_Vex_R02.S_Yordle.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            mCantCancelWhileWindingUp: bool = true
            cantCastWhileRooted: bool = true
            alwaysSnapFacing: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            mTargetingTypeData: pointer = Self {}
        }
        mBuff: pointer = BuffData {
            mTooltipData: pointer = TooltipInstanceBuff {
                mObjectName: string = "UltBook_VexRTarget"
                mFormat: link = "UX/Tooltips/Buff"
                mLocKeys: map[string,string] = {
                    "keyName" = "Spell_VexR_Name"
                    "keyTooltip" = "Buff_VexRDebuff_Tooltip"
                }
            }
        }
    }
    0x725d515b = 0xefc7f35c {
        0x81cd26c4: file = 0x833c223936061a76
    }
    0x7f9d5300 = SpellObject {
        mScriptName: string = "UltBook_VexRSpellPassive"
        mBuff: pointer = BuffData {}
    }
    0x9952d243 = SpellObject {
        mScriptName: string = "UltBook_VexR2"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 36
            mAffectsTypeFlags: u32 = 2
            mSpellTags: list[string] = {
                "Ultimate"
            }
            mAnimationName: string = ""
            mImgIconName: list[string] = {
                "UltBook_Vex_R02.S_Yordle.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            mCantCancelWhileWindingUp: bool = true
            cantCastWhileRooted: bool = true
            alwaysSnapFacing: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            mTargetingTypeData: pointer = Self {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_VexR2"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_VexR_Name"
                        "keySummary" = "Spell_VexR_Summary"
                        "keyTooltip" = "Spell_VexR_Tooltip"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                        }
                    }
                }
            }
        }
    }
    0xd4d31aa3 = SpellObject {
        mScriptName: string = "UltBook_VexR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "BaseDamage"
                    mValues: list[f32] = {
                        25
                        75
                        125
                        175
                        225
                        275
                        325
                    }
                    mBaseP: f32 = 25
                    mFormula: string = "P + 50"
                }
                SpellDataValue {
                    mName: string = "RecastDamage"
                    mValues: list[f32] = {
                        50
                        150
                        250
                        350
                        450
                        550
                        650
                    }
                    mBaseP: f32 = 50
                    mFormula: string = "P + 100"
                }
                SpellDataValue {
                    mName: string = "R2Duration"
                    mValues: list[f32] = {
                        4
                        4
                        4
                        4
                        4
                        4
                        4
                    }
                    mBaseP: f32 = 4
                }
                SpellDataValue {
                    mName: string = "TakedownWindow"
                    mValues: list[f32] = {
                        6
                        6
                        6
                        6
                        6
                        6
                        6
                    }
                    mBaseP: f32 = 6
                }
                SpellDataValue {
                    mName: string = "ResetWindow"
                    mValues: list[f32] = {
                        12
                        12
                        12
                        12
                        12
                        12
                        12
                    }
                    mBaseP: f32 = 12
                }
            }
            0x94572284: map[hash,pointer] = {
                "RDamageCalc" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "baseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.200000003
                        }
                    }
                }
                0x23eeb1ab = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "RecastDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.5
                        }
                    }
                }
            }
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Vex_Square_0.S_Yordle.dds"
            }
            cooldownTime: list[f32] = {
                140
                140
                120
                100
                100
                100
                100
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -1
            0x3d746f1f: u8 = 1
            mCantCancelWhileWindingUp: bool = true
            alwaysSnapFacing: bool = true
            useAnimatorFramerate: bool = true
            bHaveHitEffect: bool = true
            mTurnSpeedScalar: f32 = 2.5
            mDoesNotConsumeMana: bool = true
            castRange: list[f32] = {
                2000
                2000
                2500
                3000
                3000
                3000
                3000
            }
            luaOnMissileUpdateDistanceInterval: f32 = 51
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 130
                movementComponent: pointer = FixedSpeedMovement {
                    mSpeed: f32 = 1600
                    mStartBoneName: string = "root"
                }
                visibilityComponent: pointer = Defaultvisibility {
                    mPerceptionBubbleRadius: f32 = 650
                }
                heightSolver: pointer = BlendedLinearHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 7
            missileSpeed: f32 = 1750
            mLineWidth: f32 = 100
            0x63060019: link = 0x725d515b
            0x92a53e77: list[hash] = {
                0x5eaddbc9
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_VexR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_VexR_SFX_events.bnk"
            }
            mHitEffectKey: hash = 0xab5730f4
            bHaveHitBone: bool = true
            mHitBoneName: string = "C_Buffbone_Glb_Chest_Loc"
            mTargetingTypeData: pointer = direction {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_VexR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_VexR_Name"
                        "keySummary" = "Spell_VexR_Summary"
                        "keyTooltip" = "Spell_UltBook_VexR_Tooltip"
                        "keyPickChoiceName" = "game_character_displayname_Vex"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                    nameOverride: string = "Spell_ListType_Cooldown"
                                }
                                TooltipInstanceListElement {
                                    type: string = "BaseDamage"
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "RecastDamage"
                                    nameOverride: string = "Spell_ListType_SecondaryDamage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "CastRange"
                                    nameOverride: string = "Spell_ListType_Range"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                90
                                90
                                90
                                90
                                90
                                90
                            }
                            mValueType: u32 = 1
                        }
                    }
                    TargeterDefinitionMinimap {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionRange {}
                }
            }
        }
    }
    0x67896b19 = 0xefc7f35c {
        0x81cd26c4: file = 0x50dc97d8ff1b649e
    }
    0x9c7e1b50 = SpellObject {
        mScriptName: string = "UltBook_MissFortuneBulletEMPTY"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "MissFortuneBulletTime"
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        20
                        55
                        90
                        125
                        0
                        0
                        35
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        15
                        20
                        25
                        30
                        35
                        40
                        45
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 0.150000006
            mAnimationLoopName: string = "Spell4_Loop"
            mAnimationWinddownName: string = "Spell4_Winddown"
            mImgIconName: list[string] = {
                "ASSETS/Characters/MissFortune/HUD/Icons2D/MissFortune_BulletTime.dds"
            }
            cooldownTime: list[f32] = {
                130
                120
                110
                100
                20
                18
                18
            }
            castRange: list[f32] = {
                1500
                1500
                1500
                1500
                1500
                1500
                1500
            }
            castRadius: list[f32] = {
                210
                210
                210
                210
                210
                210
                210
            }
            castConeAngle: f32 = 23
            castConeDistance: f32 = 1500
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 100
                movementComponent: pointer = FixedSpeedMovement {
                    mProjectTargetToCastRange: bool = true
                    mSpeed: f32 = 2000
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "weapon"
                }
                heightSolver: pointer = BlendedLinearHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 7.8499999
            missileSpeed: f32 = 2000
            mMissileEffectName: string = "Empty.troy"
            mLineWidth: f32 = 100
            mTargetingTypeData: pointer = Cone {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionCone {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        coneFollowsEnd: bool = true
                        coneAngleDegrees: option[f32] = {
                            23
                        }
                        coneRange: option[f32] = {
                            1500
                        }
                    }
                }
            }
        }
    }
    0xaea150a3 = SpellObject {
        mScriptName: string = "UltBook_MissFortuneR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "MissFortuneBulletTime"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "Waves"
                    mValues: list[f32] = {
                        12
                        14
                        16
                        18
                        20
                        22
                        24
                    }
                    mBaseP: f32 = 12
                    mFormula: string = "(N-1)*2+14"
                }
                SpellDataValue {
                    mName: string = "BaseCritDamageMultiplier"
                    mValues: list[f32] = {
                        1.20000005
                        1.20000005
                        1.20000005
                        1.20000005
                        1.20000005
                        1.20000005
                        1.20000005
                    }
                    mBaseP: f32 = 1.20000005
                }
                SpellDataValue {
                    mName: string = "ChannelDuration"
                    mValues: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                    mBaseP: f32 = 3
                }
            }
            0x94572284: map[hash,pointer] = {
                "DamagePerWave" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.75
                            mStat: u8 = 2
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.200000003
                        }
                    }
                    0xcbcac618: u8 = 6
                }
                0xf2cbde43 = GameCalculationModified {
                    mModifiedGameCalculation: hash = "DamagePerWave"
                    mMultiplier: pointer = NamedDataValueCalculationPart {
                        mDataValue: hash = 0x2bf53be5
                    }
                    0xcbcac618: u8 = 6
                }
                "CritMultiplier" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0xff2cfd2e
                        }
                        ProductOfSubPartsCalculationPart {
                            mPart1: pointer = NumberCalculationPart {
                                mNumber: f32 = 0.200000003
                            }
                            mPart2: pointer = SumOfSubPartsCalculationPart {
                                mSubparts: list[pointer] = {
                                    NumberCalculationPart {
                                        mNumber: f32 = 0.25
                                    }
                                    StatByCoefficientCalculationPart {
                                        mCoefficient: f32 = 1
                                        mStat: u8 = 8
                                        mStatFormula: u8 = 2
                                    }
                                }
                            }
                        }
                    }
                    mDisplayAsPercent: bool = true
                    0xcbcac618: u8 = 6
                }
            }
            mCoefficient: f32 = 0.200000003
            mAnimationName: string = "Channel"
            mAnimationLoopName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_MissFortune_Square.dds"
            }
            mCastTime: f32 = 0.00100000005
            cooldownTime: list[f32] = {
                10
                120
                110
                100
                10
                10
                10
            }
            delayCastOffsetPercent: f32 = -0.222200006
            delayTotalTimePercent: f32 = -0.333299994
            mCantCancelWhileWindingUp: bool = true
            mApplyAttackDamage: bool = true
            useAnimatorFramerate: bool = true
            castRadius: list[f32] = {
                210
                210
                210
                210
                210
                210
                210
            }
            castConeAngle: f32 = 17
            castConeDistance: f32 = 1400
            castFrame: f32 = 7.8499999
            missileSpeed: f32 = 779.900024
            mMissileEffectKey: hash = 0x65af1ff0
            mLineWidth: f32 = 100
            0x63060019: link = 0x67896b19
            0x92a53e77: list[hash] = {
                0xff26329b
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_MissFortuneR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_MissFortuneR_SFX_events.bnk"
            }
            mHitBoneName: string = "C_BuffBone_Glb_Center_Loc"
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            mTargetingTypeData: pointer = Cone {}
            0x03f432a6: u8 = 1
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_MissFortuneR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_MissFortuneR_Name"
                        "keySummary" = "Spell_MissFortuneR_Summary"
                        "keyTooltip" = "Spell_MissFortuneR_Tooltip"
                        "keyTooltipSimple" = "Spell_MissFortuneR_TooltipSimple"
                        "keyPickChoiceName" = "game_character_displayname_MissFortune"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Waves"
                                    typeIndex: i32 = 2
                                    nameOverride: string = "Spell_MissFortuneR_BulletBarrages"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionCone {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        coneAngleDegrees: option[f32] = {
                            17
                        }
                        coneRange: option[f32] = {
                            1400
                        }
                        textureConeOverrideName: string = "ASSETS/Characters/MissFortune/HUD/Textures/MF_ConicRangeIndicator.dds"
                    }
                }
            }
        }
    }
    0xf3e00eb0 = SpellObject {
        mScriptName: string = "UltBook_MissFortuneBullets"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "MissFortuneBullets"
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        15
                        55
                        95
                        140
                        185
                        230
                        275
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 0.649999976
            mAnimationName: string = "Spell1"
            mCastTime: f32 = 0.25
            cooldownTime: list[f32] = {
                7
                7
                7
                7
                7
                7
                7
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            mCantCancelWhileWindingUp: bool = true
            mSpellRevealsChampion: bool = false
            castRange: list[f32] = {
                1450
                1450
                1450
                1450
                1450
                1450
                1450
            }
            castRadius: list[f32] = {
                299.299988
                299.299988
                299.299988
                299.299988
                299.299988
                299.299988
                299.299988
            }
            castConeDistance: f32 = 0
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 20
                movementComponent: pointer = FixedSpeedMovement {
                    mProjectTargetToCastRange: bool = true
                    mSpeed: f32 = 2000
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "R_hand"
                }
                heightSolver: pointer = BlendedLinearHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 2.8499999
            missileSpeed: f32 = 2000
            mMissileEffectKey: hash = 0x65af1ff0
            mLineWidth: f32 = 20
            0x92a53e77: list[hash] = {
                0xff26329b
            }
            bHaveHitBone: bool = true
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = direction {}
            0x03f432a6: u8 = 1
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionCone {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        coneFollowsEnd: bool = true
                        coneAngleDegrees: option[f32] = {
                            45
                        }
                    }
                }
            }
        }
    }
    0xf5576122 = SpellObject {
        mScriptName: string = "UltBook_MissFortuneBulletSound"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_MissFortuneBulletSound"
        }
    }
    0xb9c258a5 = AbilityObject {
        mRootSpell: link = 0xdb98fc89
        mChildSpells: list[link] = {
            0xdb98fc89
        }
        0x86ddaddb: bool = true
        mName: string = "UltBook_ZacR"
        mType: u8 = 2
    }
    0x6b73683e = SpellObject {
        mScriptName: string = "UltBook_ZacRKnockup"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_ZacRKnockup"
        }
    }
    0xdb98fc89 = SpellObject {
        mScriptName: string = "UltBook_ZacR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "ZacR"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ChannelSpell"
                "Trait_ImmobilizingCCSpell"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        150
                        150
                        250
                        350
                        350
                        350
                        350
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        1.10000002
                        1.10000002
                        1.10000002
                        1.10000002
                        1.10000002
                        1.10000002
                        1.10000002
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        700
                        700
                        850
                        1000
                        1000
                        1000
                        1000
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        -0.300000012
                        -0.300000012
                        -0.400000006
                        -0.5
                        -0.5
                        -0.5
                        -0.5
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        275
                        275
                        275
                        275
                        275
                        275
                        275
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        300
                        300
                        300
                        300
                        300
                        300
                        300
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0.25
                        0.25
                        0.25
                        0.25
                        0.25
                        0.25
                        0.25
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0.100000001
                        0.100000001
                        0.100000001
                        0.100000001
                        0.100000001
                        0.100000001
                        0.100000001
                    }
                }
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "Bounces"
                    mValues: list[f32] = {
                        4
                        4
                        4
                        4
                        4
                        4
                        4
                    }
                    mBaseP: f32 = 4
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "TimeBetweenBounces"
                    mValues: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                    mBaseP: f32 = 1
                }
                SpellDataValue {
                    mName: string = "KnockupDuration"
                    mValues: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                    mBaseP: f32 = 1
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "BaseDamageBounce"
                    mValues: list[f32] = {
                        70
                        140
                        210
                        280
                        350
                        420
                        490
                    }
                    mBaseP: f32 = 70
                    mFormula: string = "P + 70"
                }
                SpellDataValue {
                    mName: string = "DamageReductionBounce"
                    mValues: list[f32] = {
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                    }
                    mBaseP: f32 = 0.5
                }
                SpellDataValue {
                    mName: string = "KnockbackDistance"
                    mValues: list[f32] = {
                        250
                        250
                        250
                        250
                        250
                        250
                        250
                    }
                    mBaseP: f32 = 250
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "KnockbackRange"
                    mValues: list[f32] = {
                        300
                        300
                        300
                        300
                        300
                        300
                        300
                    }
                    mBaseP: f32 = 300
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "BeginningMS"
                    mValues: list[f32] = {
                        0.200000003
                        0.200000003
                        0.200000003
                        0.200000003
                        0.200000003
                        0.200000003
                        0.200000003
                    }
                    mBaseP: f32 = 0.200000003
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "EndingMS"
                    mValues: list[f32] = {
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                    }
                    mBaseP: f32 = 0.5
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "SlowAmount"
                    mValues: list[f32] = {
                        0.200000003
                        0.200000003
                        0.200000003
                        0.200000003
                        0.200000003
                        0.200000003
                        0.200000003
                    }
                    mBaseP: f32 = 0.200000003
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "SlowDuration"
                    mValues: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                    mBaseP: f32 = 1
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "AdditionalChunkHealing"
                    mValues: list[f32] = {
                        0
                        1
                        2
                        3
                        4
                        5
                        6
                    }
                    mFormula: string = "P +1"
                }
                SpellDataValue {
                    mName: string = "BounceAPRatioTooltip"
                    mValues: list[f32] = {
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                    }
                    mBaseP: f32 = 0.400000006
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "PassiveHealingTooltip"
                    mValues: list[f32] = {
                        5
                        6
                        7
                        8
                        9
                        10
                        11
                    }
                    mBaseP: f32 = 5
                    mFormula: string = "P +1"
                }
            }
            0x94572284: map[hash,pointer] = {
                "DamagePerBounce" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0xefacf1b1
                        }
                        StatByNamedDataValueCalculationPart {
                            mDataValue: hash = 0x9807c016
                        }
                    }
                }
                0x8800309a = GameCalculationModified {
                    mModifiedGameCalculation: hash = "DamagePerBounce"
                    mMultiplier: pointer = NamedDataValueCalculationPart {
                        mDataValue: hash = 0x403da869
                    }
                }
                "HealingTooltip" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        ProductOfSubPartsCalculationPart {
                            mPart1: pointer = StatByCoefficientCalculationPart {
                                mCoefficient: f32 = 0.00999999978
                                mStat: u8 = 11
                            }
                            mPart2: pointer = SumOfSubPartsCalculationPart {
                                mSubparts: list[pointer] = {
                                    NumberCalculationPart {
                                        mNumber: f32 = 4
                                    }
                                    NamedDataValueCalculationPart {
                                        mDataValue: hash = 0xa4948451
                                    }
                                }
                            }
                        }
                    }
                }
                "DurationTooltip" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        ProductOfSubPartsCalculationPart {
                            mPart1: pointer = NamedDataValueCalculationPart {
                                mDataValue: hash = 0xe754ec35
                            }
                            mPart2: pointer = SumOfSubPartsCalculationPart {
                                mSubparts: list[pointer] = {
                                    NamedDataValueCalculationPart {
                                        mDataValue: hash = "Bounces"
                                    }
                                    NumberCalculationPart {
                                        mNumber: f32 = -1
                                    }
                                }
                            }
                        }
                    }
                    0xcbcac618: u8 = 5
                    0x37070a8d: u8 = 5
                }
                0xf38a49c9 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NumberCalculationPart {
                            mNumber: f32 = 4
                        }
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0xa4948451
                        }
                    }
                }
                0x2c54dbef = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0xefacf1b1
                        }
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0x9807c016
                        }
                        ProductOfSubPartsCalculationPart {
                            mPart1: pointer = SumOfSubPartsCalculationPart {
                                mSubparts: list[pointer] = {
                                    ProductOfSubPartsCalculationPart {
                                        mPart1: pointer = NamedDataValueCalculationPart {
                                            mDataValue: hash = 0xefacf1b1
                                        }
                                        mPart2: pointer = NamedDataValueCalculationPart {
                                            mDataValue: hash = 0x403da869
                                        }
                                    }
                                    ProductOfSubPartsCalculationPart {
                                        mPart1: pointer = NamedDataValueCalculationPart {
                                            mDataValue: hash = 0x9807c016
                                        }
                                        mPart2: pointer = NamedDataValueCalculationPart {
                                            mDataValue: hash = 0x403da869
                                        }
                                    }
                                }
                            }
                            mPart2: pointer = SumOfSubPartsCalculationPart {
                                mSubparts: list[pointer] = {
                                    NamedDataValueCalculationPart {
                                        mDataValue: hash = "Bounces"
                                    }
                                    NumberCalculationPart {
                                        mNumber: f32 = -1
                                    }
                                }
                            }
                        }
                    }
                    0xcbcac618: u8 = 5
                    0x37070a8d: u8 = 5
                }
                0xdd970b09 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0x02ae9e03
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.00999999978
                            mStat: u8 = 11
                        }
                    }
                }
            }
            mCoefficient: f32 = 0.899999976
            mAnimationName: string = "Spell4"
            mImgIconName: list[string] = {
                "UltBook_Zac_Square.dds"
            }
            mCastTime: f32 = 0.300000012
            mChannelDuration: list[f32] = {
                1.10000002
                1.10000002
                1.10000002
                1.10000002
                1.10000002
                1.10000002
                1.10000002
            }
            cooldownTime: list[f32] = {
                130
                130
                115
                100
                100
                100
                100
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            mCastRangeGrowthMax: list[f32] = {
                700
                700
                850
                1000
                1000
                1000
                1000
            }
            mCastRangeGrowthDuration: list[f32] = {
                1.29999995
                1.29999995
                1.29999995
                1.29999995
                1.29999995
                1.29999995
                1.29999995
            }
            mCantCancelWhileWindingUp: bool = true
            mChannelIsInterruptedByAttacking: bool = false
            mSpellRevealsChampion: bool = false
            mUseChargeChanneling: bool = true
            alwaysSnapFacing: bool = true
            useAnimatorFramerate: bool = true
            mDoNotNeedToFaceTarget: bool = true
            mIgnoreRangeCheck: bool = true
            mDoesNotConsumeMana: bool = true
            castRange: list[f32] = {
                300
                300
                300
                300
                300
                300
                300
            }
            castRangeDisplayOverride: list[f32] = {
                300
                300
                300
                300
                300
                300
                300
            }
            castRadius: list[f32] = {
                300
                300
                300
                300
                300
                300
                300
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 7.5
            missileSpeed: f32 = 1800
            0x63060019: link = 0xde9be112
            0x92a53e77: list[hash] = {
                0x9ff19160
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_ZacR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_ZacR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                1
                1
                1
                1
                1
                1
                1
                0
                0
                1
                1
                1
                1
                1
                1
                1
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Area {}
            mSpellCooldownOrSealedQueueThreshold: option[f32] = {
                0.300000012
            }
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_ZacR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_ZacR_Name"
                        "keySummary" = "Spell_ZacR_Summary"
                        "keyTooltip" = "Spell_ZacR_Tooltip"
                        "keyCost" = "Spell_Cost_NoCost"
                        "keyTooltipExtendedBelowLine" = "Spell_ZacR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Zac"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "BaseDamageBounce"
                                    nameOverride: string = "Spell_ZacR_LevelUp_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "AdditionalChunkHealing"
                                    nameOverride: string = "Spell_ZacR_AdditionalChunkHealing"
                                    Style: u32 = 1
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_ZacR"
            mTooltipData: pointer = TooltipInstanceBuff {
                mObjectName: string = "UltBook_ZacR"
                mFormat: link = "UX/Tooltips/Buff"
                mLocKeys: map[string,string] = {
                    "keyName" = "Buff_ZacR_Name"
                    "keyTooltip" = "Buff_ZacR_Tooltip"
                }
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                2
                2
                2
                0
                0
                2
                2
                2
                2
                2
                2
                2
            }
        }
    }
    0xde9be112 = 0xefc7f35c {
        0x81cd26c4: file = 0x696713b58931284d
    }
    0x7050ece5 = 0xefc7f35c {
        0x81cd26c4: file = 0x013336089e58a78e
    }
    0x88917a25 = SpellObject {
        mScriptName: string = "UltBook_ViktorR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "ViktorChaosStorm"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        0
                        100
                        175
                        250
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0
                        130
                        210
                        290
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        6.5
                        6.5
                        6.5
                        6.5
                        6.5
                        6.5
                        6.5
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        400
                        400
                        400
                        400
                        400
                        400
                        400
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        200
                        200
                        200
                        200
                        200
                        200
                        200
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        300
                        300
                        300
                        300
                        300
                        300
                        300
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        900
                        900
                        900
                        900
                        900
                        900
                        900
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0.200000003
                        0.200000003
                        0.200000003
                        0.200000003
                        0.200000003
                        0.200000003
                        0.200000003
                    }
                }
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "InitialBurstBaseDamage"
                    mValues: list[f32] = {
                        100
                        100
                        175
                        250
                        325
                        400
                        475
                    }
                    mBaseP: f32 = 100
                    mFormula: string = "N*75+25"
                }
                SpellDataValue {
                    mName: string = "SubsequentBurstBaseDamage"
                    mValues: list[f32] = {
                        25
                        65
                        105
                        145
                        185
                        225
                        265
                    }
                    mBaseP: f32 = 25
                    mFormula: string = "P+40"
                }
                SpellDataValue {
                    mName: string = "StormDuration"
                    mValues: list[f32] = {
                        6.5
                        6.5
                        6.5
                        6.5
                        6.5
                        6.5
                        6.5
                    }
                    mBaseP: f32 = 6.5
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "TickCadence"
                    mValues: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                    mBaseP: f32 = 1
                }
                SpellDataValue {
                    mName: string = "MaxTicks"
                    mValues: list[f32] = {
                        6
                        6
                        6
                        6
                        6
                        6
                        6
                    }
                    mBaseP: f32 = 6
                }
                SpellDataValue {
                    mName: string = "MaxStormSpeed"
                    mValues: list[f32] = {
                        325
                        325
                        325
                        325
                        325
                        325
                        325
                    }
                    mBaseP: f32 = 325
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "MinStormSpeed"
                    mValues: list[f32] = {
                        200
                        200
                        200
                        200
                        200
                        200
                        200
                    }
                    mBaseP: f32 = 200
                }
                SpellDataValue {
                    mName: string = "MinDistance"
                    mValues: list[f32] = {
                        300
                        300
                        300
                        300
                        300
                        300
                        300
                    }
                    mBaseP: f32 = 300
                }
                SpellDataValue {
                    mName: string = "MaxDistance"
                    mValues: list[f32] = {
                        1000
                        1000
                        1000
                        1000
                        1000
                        1000
                        1000
                    }
                    mBaseP: f32 = 1000
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "AugmentBoost"
                    mValues: list[f32] = {
                        0.25
                        0.25
                        0.25
                        0.25
                        0.25
                        0.25
                        0.25
                    }
                    mBaseP: f32 = 0.25
                    mFormula: string = "P + 0"
                }
            }
            0x94572284: map[hash,pointer] = {
                0x19d777a6 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0xa133d007
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.5
                        }
                    }
                }
                0xd23696db = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0x475333c2
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.449999988
                        }
                    }
                }
            }
            mCoefficient: f32 = 0.5
            mCoefficient2: f32 = 0.449999988
            mAnimationName: string = "Spell4"
            mImgIconName: list[string] = {
                "UltBook_Viktor_Square.dds"
                "UltBook_Viktor_R_Guide.dds"
            }
            mCastTime: f32 = 0.25
            cooldownTime: list[f32] = {
                0
                120
                100
                80
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            useAnimatorFramerate: bool = true
            mDoesNotConsumeMana: bool = true
            castRange: list[f32] = {
                700
                700
                700
                700
                700
                700
                700
            }
            castRadius: list[f32] = {
                300
                300
                300
                300
                300
                300
                300
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 10
            missileSpeed: f32 = 0
            0x63060019: link = 0x7050ece5
            0x92a53e77: list[hash] = {
                0x564b2c4f
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_ViktorR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_ViktorR_SFX_events.bnk"
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Area {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_ViktorR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "game_spell_displayname_ViktorChaosStormGuide"
                        "keyTooltip" = "game_spell_tooltip_ViktorChaosStorm"
                        "keySummary" = "game_spell_description_ViktorChaosStorm"
                        "keyTooltipExtendedBelowLine" = "Spell_ViktorChaosStorm_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Viktor"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                                TooltipInstanceListElement {
                                    type: string = "InitialBurstBaseDamage"
                                    nameOverride: string = "Spell_ViktorChaosStorm_InitialBurst"
                                }
                                TooltipInstanceListElement {
                                    type: string = "SubsequentBurstBaseDamage"
                                    nameOverride: string = "Spell_ViktorChaosStorm_Ticks"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        textureRadiusOverrideName: string = "ASSETS/Spells/Textures/AOE.dds"
                    }
                }
            }
        }
    }
    0xa558f102 = SpellObject {
        mScriptName: string = "UltBook_ViktorRTimer"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_ViktorChaosStormTimer"
        }
    }
    0xd7c5a72b = SpellObject {
        mScriptName: string = "UltBook_ViktorRGuide"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 36
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "ViktorChaosStorm"
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        150
                        150
                        250
                        350
                        0
                        0
                        30
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        100
                        100
                        175
                        250
                        0
                        0
                        100
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        120
                        120
                        100
                        80
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0.5
                        0.5
                        0.5
                        0.5
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 0.550000012
            mCoefficient2: f32 = 0.200000003
            mAnimationName: string = "Spell4"
            mImgIconName: list[string] = {
                "ASSETS/Characters/Viktor/HUD/Icons2D/Viktor_R_Guide.dds"
                "ASSETS/Characters/Viktor/HUD/Icons2D/Viktor_R_Guide.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            canCastWhileDisabled: bool = true
            mCantCancelWhileWindingUp: bool = true
            mDoesntBreakChannels: bool = true
            castRange: list[f32] = {
                20000
                20000
                20000
                20000
                20000
                20000
                20000
            }
            castRadius: list[f32] = {
                300
                300
                300
                300
                300
                300
                300
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 20.7999992
            missileSpeed: f32 = 0
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Area {}
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_ViktorRGuide"
                    mFormat: link = "UX/Tooltips/InheritedSpell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_ViktorChaosStormGuide_Name"
                        "keyTooltip" = "Spell_ViktorChaosStormGuide_Tooltip"
                        "keyCost" = "Spell_Cost_Empty"
                        "keyCooldown" = "Spell_Cost_Empty"
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        textureRadiusOverrideName: string = "ASSETS/Spells/Textures/AOE.dds"
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_ViktorChaosStormGuide"
        }
    }
    0x709b264c = AbilityObject {
        mRootSpell: link = 0xf777fe87
        mChildSpells: list[link] = {
            0xf777fe87
            0xa0412612
        }
        0x86ddaddb: bool = true
        mName: string = "UltBook_LuxR"
        mType: u8 = 2
    }
    0xae89cc51 = AbilityObject {
        mRootSpell: link = 0x97c49971
        mChildSpells: list[link] = {
            0x97c49971
            0x737a864f
        }
        0x86ddaddb: bool = true
        mName: string = "UltBook_AhriR"
    }
    0x737a864f = SpellObject {
        mScriptName: string = "Ultbook_AhriRMissile"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "AhriTumble"
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        40
                        90
                        140
                        190
                        240
                        290
                        340
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 0.699999988
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "Annie_Disintegrate.dds"
            }
            cooldownTime: list[f32] = {
                11
                10
                9
                8
                7
                6
                6
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                800
                800
                800
                800
                800
                800
                800
            }
            castRadius: list[f32] = {
                710
                710
                710
                710
                710
                710
                710
            }
            castConeDistance: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                movementComponent: pointer = FixedSpeedMovement {
                    mSpeed: f32 = 1400
                    mTargetHeightAugment: f32 = 100
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "chest"
                }
                verticalFacing: pointer = VeritcalFacingMatchVelocity {}
                behaviors: list[pointer] = {
                    CastOnMovementComplete {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 1
            castFrame: f32 = 7.5
            missileSpeed: f32 = 1400
            mMissileEffectKey: hash = 0x599accfa
            0x92a53e77: list[hash] = {
                0x7b9c1dfc
            }
            bHaveHitBone: bool = true
            mHitBoneName: string = "C_BUFFBONE_GLB_CHEST_LOC"
            selectionPriority: u32 = 1
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
    }
    0x7e3b0926 = 0xefc7f35c {
        0x81cd26c4: file = 0x37290f10ff016499
    }
    0x97c49971 = SpellObject {
        mScriptName: string = "UltBook_AhriR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 36
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "AhriTumble"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "PositiveEffect_MoveBlock"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {
                    value: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "RBaseDamage"
                    mValues: list[f32] = {
                        30
                        60
                        90
                        120
                        150
                        180
                        210
                    }
                    mBaseP: f32 = 30
                    mFormula: string = "P + 30"
                }
                SpellDataValue {
                    mName: string = "RMaxTargetsPerCast"
                    mValues: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                    mBaseP: f32 = 3
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "RMaxCasts"
                    mValues: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                    mBaseP: f32 = 3
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "RDashDistance"
                    mValues: list[f32] = {
                        500
                        500
                        500
                        500
                        500
                        500
                        500
                    }
                    mBaseP: f32 = 500
                }
                SpellDataValue {
                    mName: string = "RBaseDashSpeed"
                    mValues: list[f32] = {
                        1200
                        1200
                        1200
                        1200
                        1200
                        1200
                        1200
                    }
                    mBaseP: f32 = 1200
                }
                SpellDataValue {
                    mName: string = "RRecastWindow"
                    mValues: list[f32] = {
                        10
                        10
                        10
                        10
                        10
                        10
                        10
                    }
                    mBaseP: f32 = 10
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "RAcquisitionRange"
                    mValues: list[f32] = {
                        600
                        600
                        600
                        600
                        600
                        600
                        600
                    }
                    mBaseP: f32 = 600
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "RDashCooldown"
                    mValues: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                    mBaseP: f32 = 1
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "RAPCoefficient"
                    mValues: list[f32] = {
                        0.349999994
                        0.349999994
                        0.349999994
                        0.349999994
                        0.349999994
                        0.349999994
                        0.349999994
                    }
                    mBaseP: f32 = 0.349999994
                    mFormula: string = "P + 0"
                }
            }
            0x94572284: map[hash,pointer] = {
                "RCalculatedDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "RBaseDamage"
                        }
                        StatByNamedDataValueCalculationPart {
                            mDataValue: hash = 0x409753d5
                        }
                    }
                }
            }
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Ahri_Square.dds"
            }
            cooldownTime: list[f32] = {
                130
                130
                105
                80
                80
                80
                80
            }
            mCantCancelWhileWindingUp: bool = true
            cantCastWhileRooted: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRangeDisplayOverride: list[f32] = {
                450
                450
                450
                450
                450
                450
                450
            }
            castRadius: list[f32] = {
                300
                300
                300
                300
                300
                300
                300
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 15
            missileSpeed: f32 = 2200
            mMissileEffectKey: hash = 0xa1b27883
            0x63060019: link = 0x7e3b0926
            0x92a53e77: list[hash] = {
                0x7b9c1dfc
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_AhriR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_AhriR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                1
                1
                1
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Location {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_AhriR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_AhriTumble_Name"
                        "keySummary" = "Spell_AhriTumble_Summary"
                        "keyTooltip" = "Spell_AhriTumble_Tooltip"
                        "keyTooltipSimple" = "Spell_AhriR_TooltipSimple"
                        "keyPickChoiceName" = "game_character_displayname_Ahri"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "RBaseDamage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionMinimap {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_AhriTumble"
        }
    }
    0x73d6ff6a = 0xefc7f35c {
        0x81cd26c4: file = 0x20677268266bbc64
    }
    0xb743d751 = SpellObject {
        mScriptName: string = "UltBook_ShenR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 17413
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ChannelSpell"
                "PositiveEffect_Teleport"
                "PositiveEffect_Boon"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "ArrivalPersonalSpace"
                    mValues: list[f32] = {
                        175
                        175
                        175
                        175
                        175
                        175
                        175
                    }
                    mBaseP: f32 = 175
                }
                SpellDataValue {
                    mName: string = "ArrivalCheckRadiusVisible"
                    mValues: list[f32] = {
                        2000
                        2000
                        2000
                        2000
                        2000
                        2000
                        2000
                    }
                    mBaseP: f32 = 2000
                }
                SpellDataValue {
                    mName: string = "ArrivalCheckRadiusInvisible"
                    mValues: list[f32] = {
                        600
                        600
                        600
                        600
                        600
                        600
                        600
                    }
                    mBaseP: f32 = 600
                }
                SpellDataValue {
                    mName: string = "BaseShieldAmount"
                    mValues: list[f32] = {
                        -40
                        140
                        320
                        500
                        680
                        860
                        1040
                    }
                    mBaseP: f32 = -40
                    mFormula: string = "P + 180.00000"
                }
                SpellDataValue {
                    mName: string = "BaseShieldMax_Tooltip"
                    mValues: list[f32] = {
                        -64
                        224
                        512
                        800
                        1088
                        1376
                        1664
                    }
                    mBaseP: f32 = -64
                    mFormula: string = "P + 288"
                }
                SpellDataValue {
                    mName: string = "ShieldAPRatio"
                    mValues: list[f32] = {
                        1.35000002
                        1.35000002
                        1.35000002
                        1.35000002
                        1.35000002
                        1.35000002
                        1.35000002
                    }
                    mBaseP: f32 = 1.35000002
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "MaxShieldThreshold"
                    mValues: list[f32] = {
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                    }
                    mBaseP: f32 = 0.400000006
                }
                SpellDataValue {
                    mName: string = "MaxShieldMult"
                    mValues: list[f32] = {
                        1.60000002
                        1.60000002
                        1.60000002
                        1.60000002
                        1.60000002
                        1.60000002
                        1.60000002
                    }
                    mBaseP: f32 = 1.60000002
                }
                SpellDataValue {
                    mName: string = "ShieldDuration"
                    mValues: list[f32] = {
                        5
                        5
                        5
                        5
                        5
                        5
                        5
                    }
                    mBaseP: f32 = 5
                }
                SpellDataValue {
                    mName: string = "ChannelDuration"
                    mValues: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                    mBaseP: f32 = 3
                }
            }
            0x94572284: map[hash,pointer] = {
                "Shield" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0x2f89af4d
                        }
                        StatByNamedDataValueCalculationPart {
                            mDataValue: hash = 0xf4c0c480
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.174999997
                            mStat: u8 = 11
                            mStatFormula: u8 = 2
                        }
                    }
                }
                "MaxShield" = GameCalculationModified {
                    mModifiedGameCalculation: hash = "Shield"
                    mMultiplier: pointer = NamedDataValueCalculationPart {
                        mDataValue: hash = 0xcabca0ba
                    }
                }
            }
            mCoefficient: f32 = 1.35000002
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Shen_Square.dds"
            }
            mChannelDuration: list[f32] = {
                3
                3
                3
                3
                3
                3
                3
            }
            cooldownTime: list[f32] = {
                200
                200
                180
                160
                160
                160
                160
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            cannotBeSuppressed: bool = true
            mCantCancelWhileWindingUp: bool = true
            mCantCancelWhileChanneling: bool = true
            cantCastWhileRooted: bool = true
            mUseMinimapTargeting: bool = true
            castRange: list[f32] = {
                35000
                35000
                35000
                35000
                35000
                35000
                35000
            }
            castFrame: f32 = 10
            0x63060019: link = 0x73d6ff6a
            0x92a53e77: list[hash] = {
                0x55e19c78
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_ShenR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_ShenR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_ShenR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_ShenR_Name"
                        "keySummary" = "Spell_ShenR_Summary"
                        "keyTooltip" = "Spell_ShenR_Tooltip"
                        "keyCost" = "Spell_Cost_NoCost"
                        "keyPickChoiceName" = "game_character_displayname_Shen"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "BaseShieldAmount"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_MinimumShield"
                                }
                                TooltipInstanceListElement {
                                    type: string = "BaseShieldMax_Tooltip"
                                    nameOverride: string = "Spell_ListType_MaximumShield"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    0x73e8a049 = 0xefc7f35c {
        0x81cd26c4: file = 0xad48b7ee22b42c3f
    }
    0xa0b02699 = SpellObject {
        mScriptName: string = "UltBook_JinxR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 4106
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "JinxR"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "BaseDamage"
                    mValues: list[f32] = {
                        25
                        25
                        40
                        55
                        70
                        85
                        100
                    }
                    mBaseP: f32 = 25
                    mFormula: string = "N*15+10"
                }
                SpellDataValue {
                    mName: string = "MaxDamage"
                    mValues: list[f32] = {
                        150
                        250
                        350
                        450
                        550
                        650
                        750
                    }
                    mBaseP: f32 = 150
                    mFormula: string = "P + 100"
                }
                SpellDataValue {
                    mName: string = "PercentDamage"
                    mValues: list[f32] = {
                        20
                        25
                        30
                        35
                        40
                        45
                        50
                    }
                    mBaseP: f32 = 20
                    mFormula: string = "P + 5"
                }
                SpellDataValue {
                    mName: string = "AoEDamageMult"
                    mValues: list[f32] = {
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                    }
                    mBaseP: f32 = 0.800000012
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "MonsterExecuteMax"
                    mValues: list[f32] = {
                        800
                        800
                        800
                        800
                        800
                        800
                        800
                    }
                    mBaseP: f32 = 800
                    mFormula: string = "P + 0"
                }
            }
            0x94572284: map[hash,pointer] = {
                "DamageFloor" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "baseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.150000006
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                    }
                }
                "DamageMax" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "MaxDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 1.5
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                    }
                }
            }
            mCoefficient: f32 = 0.150000006
            mCoefficient2: f32 = 1.5
            mAnimationName: string = "Spell4"
            mImgIconName: list[string] = {
                "UltBook_Jinx_Square_0.dds"
            }
            mMinimapIconName: string = "ASSETS/Characters/Jinx/HUD/Textures/Icon_Jinx_Main_Ability_R1_Minimap1.dds"
            mCastTime: f32 = 0.600000024
            cooldownTime: list[f32] = {
                10
                90
                75
                60
                10
                10
                10
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            mSpellRevealsChampion: bool = false
            mUseMinimapTargeting: bool = true
            mMinimapIconRotation: bool = true
            alwaysSnapFacing: bool = true
            useAnimatorFramerate: bool = true
            mDoesNotConsumeMana: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRadius: list[f32] = {
                100
                100
                100
                100
                100
                100
                100
            }
            castConeDistance: f32 = 100
            luaOnMissileUpdateDistanceInterval: f32 = 1350
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 140
                movementComponent: pointer = FixedSpeedMovement {
                    mProjectTargetToCastRange: bool = true
                    mSpeed: f32 = 1700
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                    mStartBoneName: string = "Rocket_Launcher_Mouth_Top"
                }
                visibilityComponent: pointer = Defaultvisibility {
                    mPerceptionBubbleRadius: f32 = 1000
                }
                heightSolver: pointer = FollowTerrainHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 7.5
            missileSpeed: f32 = 1700
            mMissileEffectKey: hash = 0x99345230
            mLineWidth: f32 = 140
            0x63060019: link = 0x73e8a049
            0x92a53e77: list[hash] = {
                0x5be5f86b
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_JinxR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_JinxR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            mTargetingTypeData: pointer = Location {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_JinxR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_JinxR_Name"
                        "keySummary" = "Spell_JinxR_Summary"
                        "keyTooltip" = "Spell_JinxR_Tooltip"
                        "keyPickChoiceName" = "game_character_displayname_Jinx"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "BaseDamage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_MinimumDamage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "MaxDamage"
                                    typeIndex: i32 = 2
                                    nameOverride: string = "Spell_ListType_MaximumDamage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "PercentDamage"
                                    typeIndex: i32 = 3
                                    nameOverride: string = "Spell_ListType_PercentMissingHealthDamage"
                                    Style: u32 = 1
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionLine {
                        startLocator: embed = DrawablePositionLocator {
                            orientationType: u32 = 1
                        }
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        fallbackDirection: u32 = 3
                        useGlobalLineIndicator: bool = true
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                140
                                140
                                140
                                140
                                140
                                140
                            }
                            mValueType: u32 = 2
                        }
                        textureBaseOverrideName: string = "ASSETS/Characters/Jinx/HUD/Textures/Skillshot_Jinx_base_02.dds"
                        textureTargetOverrideName: string = "ASSETS/Characters/Jinx/HUD/Textures/Skillshot_Jinx_arrow_02.dds"
                    }
                }
            }
        }
    }
    0xa036774a = AbilityObject {
        mRootSpell: link = 0x79bf6425
        mChildSpells: list[link] = {
            0x79bf6425
            0xa8193546
            0x97b4b168
            0x74fbb263
        }
        mName: string = "UltBook_FizzR"
        mType: u8 = 2
    }
    0x74fbb263 = SpellObject {
        mScriptName: string = "UltBook_FizzRMissile"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 4106
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "FizzMarinerDoom"
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        30
                        90
                        150
                        245
                        315
                        440
                        565
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        2.25
                        2.5
                        2.75
                        3
                        3.25
                        3.5
                        3.75
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        40
                        80
                        120
                        160
                        0
                        0
                        40
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 1.20000005
            mImgIconName: list[string] = {
                "ASSETS/Characters/Fizz/HUD/Icons2D/Fizz_R.dds"
            }
            mCastTime: f32 = 0.250999987
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            mProjectTargetToCastRange: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                10000
                10000
                10000
                10000
                10000
                10000
                10000
            }
            castRangeDisplayOverride: list[f32] = {
                1175
                1175
                1175
                1175
                1175
                1175
                1175
            }
            castRadius: list[f32] = {
                100
                100
                100
                100
                100
                100
                100
            }
            castConeDistance: f32 = 100
            luaOnMissileUpdateDistanceInterval: f32 = 50.0099983
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 80
                movementComponent: pointer = FixedSpeedMovement {
                    mSpeed: f32 = 1300
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "L_hand"
                }
                heightSolver: pointer = BlendedLinearHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            castFrame: f32 = 7.53000021
            missileSpeed: f32 = 1300
            mMissileEffectKey: hash = 0x36e9c472
            mLineWidth: f32 = 80
            bHaveHitBone: bool = true
            mHitBoneName: string = "root"
            selectionPriority: u32 = 2
            mTargetingTypeData: pointer = Location {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        hideWithLineIndicator: bool = true
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        lineStopsAtEndPosition: option[bool] = {
                            true
                        }
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                100
                                100
                                100
                                100
                                100
                                100
                            }
                            mValueType: u32 = 1
                        }
                    }
                }
            }
        }
    }
    0x79bf6425 = SpellObject {
        mScriptName: string = "UltBook_FizzR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 8192
            mAlternateName: string = "FizzR"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ImmobilizingCCSpell"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "SmallDamage"
                    mValues: list[f32] = {
                        50
                        150
                        250
                        350
                        450
                        550
                        650
                    }
                    mBaseP: f32 = 50
                    mFormula: string = "P + 100"
                }
                SpellDataValue {
                    mName: string = "MidDamage"
                    mValues: list[f32] = {
                        125
                        225
                        325
                        425
                        525
                        625
                        725
                    }
                    mBaseP: f32 = 125
                    mFormula: string = "P + 100"
                }
                SpellDataValue {
                    mName: string = "BigDamage"
                    mValues: list[f32] = {
                        200
                        300
                        400
                        500
                        600
                        700
                        800
                    }
                    mBaseP: f32 = 200
                    mFormula: string = "P + 100"
                }
                SpellDataValue {
                    mName: string = "SmallFishSize"
                    mValues: list[f32] = {
                        200
                        200
                        200
                        200
                        200
                        200
                        200
                    }
                    mBaseP: f32 = 200
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "MidFishSize"
                    mValues: list[f32] = {
                        325
                        325
                        325
                        325
                        325
                        325
                        325
                    }
                    mBaseP: f32 = 325
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "BigFishSize"
                    mValues: list[f32] = {
                        450
                        450
                        450
                        450
                        450
                        450
                        450
                    }
                    mBaseP: f32 = 450
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "MissileWidthTiers"
                    mValues: list[f32] = {
                        40
                        80
                        120
                        160
                        200
                        240
                        280
                    }
                    mBaseP: f32 = 40
                    mFormula: string = "P + 40"
                }
                SpellDataValue {
                    mName: string = "MaxDistance"
                    mValues: list[f32] = {
                        1300
                        1300
                        1300
                        1300
                        1300
                        1300
                        1300
                    }
                    mBaseP: f32 = 1300
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "DetonationTime"
                    mValues: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                    mBaseP: f32 = 2
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "SlowDuration"
                    mValues: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                    mBaseP: f32 = 2
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "SlowAmount"
                    mValues: list[f32] = {
                        60
                        60
                        60
                        60
                        60
                        60
                        60
                    }
                    mBaseP: f32 = 60
                    mFormula: string = "P"
                }
            }
            0x94572284: map[hash,pointer] = {
                0x8592e8a4 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "SmallDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.800000012
                        }
                    }
                }
                0x262c3c02 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "MidDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 1
                        }
                    }
                }
                "BigSharkDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0xb07a8b34
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 1.20000005
                        }
                    }
                }
            }
            mCoefficient: f32 = 0.800000012
            mCoefficient2: f32 = 1.20000005
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Fizz_Square_0.dds"
                "UltBook_Fizz_Square_0.dds"
            }
            mCastTime: f32 = 0.25
            cooldownTime: list[f32] = {
                100
                100
                85
                70
                70
                70
                40
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            mProjectTargetToCastRange: bool = true
            useAnimatorFramerate: bool = true
            mDoesNotConsumeMana: bool = true
            castRange: list[f32] = {
                10000
                10000
                10000
                10000
                10000
                10000
                10000
            }
            castRangeDisplayOverride: list[f32] = {
                1300
                1300
                1300
                1300
                1300
                1300
                1300
            }
            castRadius: list[f32] = {
                300
                300
                300
                300
                300
                300
                300
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 7.5
            missileSpeed: f32 = 1300
            mLineWidth: f32 = 150
            0x63060019: link = 0xbf9e8473
            0x92a53e77: list[hash] = {
                0x305bfda1
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_FizzR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_FizzR_SFX_events.bnk"
            }
            mHitBoneName: string = "head"
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Area {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_FizzR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_FizzR_Name"
                        "keyTooltip" = "Spell_FizzR_Tooltip"
                        "keySummary" = "Spell_FizzR_Summary"
                        "keyPickChoiceName" = "game_character_displayname_Fizz"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                    nameOverride: string = "Spell_ListType_Cooldown"
                                }
                                TooltipInstanceListElement {
                                    type: string = "SmallDamage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_FizzR_SmallFishDamage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "MidDamage"
                                    typeIndex: i32 = 2
                                    nameOverride: string = "Spell_FizzR_MediumFishDamage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "BigDamage"
                                    typeIndex: i32 = 3
                                    nameOverride: string = "Spell_FizzR_LargeFishDamage"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                        textureOverrideName: string = "ASSETS/Spells/Textures/CircularRangeIndicator_Dark.dds"
                    }
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        lineStopsAtEndPosition: option[bool] = {
                            true
                        }
                        minimumDisplayedRange: f32 = 100
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                90
                                90
                                90
                                90
                                90
                                90
                            }
                            mValueType: u32 = 1
                        }
                    }
                    TargeterDefinitionAoe {
                        overrideRadius: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                455
                                455
                                455
                                455
                                455
                                455
                            }
                            mValueType: u32 = 1
                        }
                        textureRadiusOverrideName: string = "ASSETS/Spells/Textures/CircularRangeIndicator_Dark.dds"
                    }
                    TargeterDefinitionAoe {
                        overrideRadius: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                910
                                910
                                910
                                910
                                910
                                910
                            }
                            mValueType: u32 = 1
                        }
                        textureRadiusOverrideName: string = "ASSETS/Spells/Textures/CircularRangeIndicator_Dark.dds"
                    }
                }
            }
        }
    }
    0x97b4b168 = SpellObject {
        mScriptName: string = "UltBook_FizzRHop"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 4106
            mAffectsStatusFlags: u32 = 32
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "FizzMarinerDoom"
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        30
                        90
                        150
                        245
                        315
                        440
                        565
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        2.25
                        2.5
                        2.75
                        3
                        3.25
                        3.5
                        3.75
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        40
                        80
                        120
                        160
                        0
                        0
                        40
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 1.20000005
            mImgIconName: list[string] = {
                "ASSETS/Characters/Fizz/HUD/Icons2D/Fizz_R.dds"
            }
            mCastTime: f32 = 0.250999987
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                10000
                10000
                10000
                10000
                10000
                10000
                10000
            }
            castRangeDisplayOverride: list[f32] = {
                1175
                1175
                1175
                1175
                1175
                1175
                1175
            }
            castRadius: list[f32] = {
                100
                100
                100
                100
                100
                100
                100
            }
            castConeDistance: f32 = 100
            luaOnMissileUpdateDistanceInterval: f32 = 50.0099983
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 80
                movementComponent: pointer = AcceleratingMovement {
                    mAcceleration: f32 = 3000
                    mMinSpeed: f32 = 1200
                    mMaxSpeed: f32 = 10000
                    mInitialSpeed: f32 = 1200
                    mTargetHeightAugment: f32 = 15
                    mOffsetInitialTargetHeight: f32 = 15
                    mStartBoneName: string = "L_hand"
                }
                heightSolver: pointer = GravityHeightSolver {
                    mGravity: f32 = 5000
                }
                verticalFacing: pointer = VeritcalFacingMatchVelocity {}
                behaviors: list[pointer] = {
                    CastOnMovementComplete {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 1
            castFrame: f32 = 7.53000021
            missileSpeed: f32 = 1200
            mMissileEffectKey: hash = 0x36e9c472
            mLineWidth: f32 = 80
            bHaveHitBone: bool = true
            mHitBoneName: string = "root"
            selectionPriority: u32 = 1
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        hideWithLineIndicator: bool = true
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        lineStopsAtEndPosition: option[bool] = {
                            true
                        }
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                100
                                100
                                100
                                100
                                100
                                100
                            }
                            mValueType: u32 = 1
                        }
                    }
                }
            }
        }
    }
    0xa8193546 = SpellObject {
        mScriptName: string = "UltBook_FizzRCling"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_FizzRCling"
        }
    }
    0xbf9e8473 = 0xefc7f35c {
        0x81cd26c4: file = 0x8fe96fd7a4f64fa7
    }
    0x759cc82b = SpellObject {
        mScriptName: string = "UltBook_MorganaR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mCastRequirementsCaster: list[pointer] = {
                HasNNearbyUnitsRequirement {
                    mUnitsRequirements: list[pointer] = {
                        HasTypeAndStatusFlags {
                            mAffectsTypeFlags: u32 = 2
                        }
                    }
                    mUnitsRequired: u32 = 1
                    mRange: f32 = 575
                    mDistanceType: u32 = 1
                }
            }
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ImmobilizingCCSpell"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "Damage"
                    mValues: list[f32] = {
                        75
                        150
                        225
                        300
                        375
                        450
                        525
                    }
                    mBaseP: f32 = 75
                    mFormula: string = "P + 75"
                }
                SpellDataValue {
                    mName: string = "ChainDuration"
                    mValues: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                    mBaseP: f32 = 3
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "StunDuration"
                    mValues: list[f32] = {
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                        1.5
                    }
                    mBaseP: f32 = 1.5
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "SlowPercent"
                    mValues: list[f32] = {
                        20
                        20
                        20
                        20
                        20
                        20
                        20
                    }
                    mBaseP: f32 = 20
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "HastePercent"
                    mValues: list[f32] = {
                        -20
                        5
                        30
                        55
                        80
                        105
                        130
                    }
                    mBaseP: f32 = -20
                    mFormula: string = "P + 25"
                }
            }
            0x94572284: map[hash,pointer] = {
                "TotalDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "Damage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.699999988
                        }
                    }
                    0xcbcac618: u8 = 6
                }
            }
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Morgana_Square.dds"
            }
            cooldownTime: list[f32] = {
                10
                120
                110
                100
                10
                10
                10
            }
            delayCastOffsetPercent: f32 = -0.300000012
            delayTotalTimePercent: f32 = -0.300000012
            mCantCancelWhileWindingUp: bool = true
            useAnimatorFramerate: bool = true
            mPingableWhileDisabled: bool = true
            castRange: list[f32] = {
                625
                625
                625
                625
                625
                625
                625
            }
            castRadius: list[f32] = {
                625
                625
                625
                625
                625
                625
                625
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 28
            missileSpeed: f32 = 20
            0x63060019: link = 0xa3918d47
            0x92a53e77: list[hash] = {
                0x9639535d
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_MorganaR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_MorganaR_SFX_events.bnk"
            }
            bHaveHitBone: bool = true
            mHitBoneName: string = "head"
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = SelfAoe {}
            mSpellCooldownOrSealedQueueThreshold: option[f32] = {
                0.5
            }
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_MorganaR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_MorganaR_Name"
                        "keySummary" = "Spell_MorganaR_Summary"
                        "keyTooltip" = "Spell_MorganaR_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_MorganaR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Morgana"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Damage"
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "HastePercent"
                                    nameOverride: string = "Spell_ListType_MovementSpeed"
                                    Style: u32 = 1
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                }
            }
        }
        mBuff: pointer = BuffData {
            mTooltipData: pointer = TooltipInstanceBuff {
                mObjectName: string = "UltBook_MorganaR"
                mFormat: link = "UX/Tooltips/Buff"
                mLocKeys: map[string,string] = {
                    "keyName" = "Buff_MorganaR_Name"
                    "keyTooltip" = "Buff_MorganaR_Tooltip"
                }
            }
        }
    }
    0xa0cea989 = SpellObject {
        mScriptName: string = "UltBook_MorganaRDebuff"
        mBuff: pointer = BuffData {
            mTooltipData: pointer = TooltipInstanceBuff {
                mObjectName: string = "UltBook_MorganaRDebuff"
                mFormat: link = "UX/Tooltips/Buff"
                mLocKeys: map[string,string] = {
                    "keyName" = "Buff_MorganaRDebuff_Name"
                    "keyTooltip" = "Buff_MorganaRDebuff_Tooltip"
                }
            }
        }
    }
    0xa3918d47 = 0xefc7f35c {
        0x81cd26c4: file = 0xbadc83eb2d9ed2a2
    }
    0xc7ab42dc = SpellObject {
        mScriptName: string = "UltBook_MorganaRVFXMis"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 4106
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mImgIconName: list[string] = {
                ""
                ""
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            canCastWhileDisabled: bool = true
            mIsDisabledWhileDead: bool = false
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRadius: list[f32] = {
                20
                20
                20
                20
                20
                20
                20
            }
            castConeDistance: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                movementComponent: pointer = FixedTimeMovement {
                    mTravelTime: f32 = 0.5
                    mTargetHeightAugment: f32 = 100
                    mOffsetInitialTargetHeight: f32 = 100
                }
                heightSolver: pointer = GravityHeightSolver {}
                verticalFacing: pointer = VeritcalFacingMatchVelocity {}
                behaviors: list[pointer] = {
                    CastOnMovementComplete {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 1
            castFrame: f32 = 7.5
            missileSpeed: f32 = 600
            mMissileEffectKey: hash = 0x97024e9b
            0x92a53e77: list[hash] = {
                0x9639535d
            }
            selectionPriority: u32 = 1
        }
    }
    0x76086e59 = AbilityObject {
        mRootSpell: link = 0xea9bc0d1
        mChildSpells: list[link] = {
            0xea9bc0d1
            0xd905f5cf
        }
        0x86ddaddb: bool = true
        mName: string = "UltBook_LucianR"
        mType: u8 = 2
    }
    0x7f965e6a = ResourceResolver {}
    0xca5cc9e6 = AbilityObject {
        mRootSpell: link = 0x8e60c1b3
        mChildSpells: list[link] = {
            0x8e60c1b3
        }
        mName: string = "UltBook_KaisaR"
    }
    0x8e60c1b3 = SpellObject {
        mScriptName: string = "UltBook_KaisaR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 6154
            mSpellTags: list[string] = {
                "PositiveEffect_MoveBlock"
                "Trait_Ultimate"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "RBaseValue"
                    mValues: list[f32] = {
                        50
                        75
                        100
                        125
                        150
                        175
                        200
                    }
                    mBaseP: f32 = 50
                    mFormula: string = "P + 25"
                }
                SpellDataValue {
                    mName: string = "RRange"
                    mValues: list[f32] = {
                        750
                        1500
                        2250
                        3000
                        3750
                        4500
                        5250
                    }
                    mBaseP: f32 = 750
                    mFormula: string = "P + 750"
                }
                SpellDataValue {
                    mName: string = "RShieldDuration"
                    mValues: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                    mBaseP: f32 = 2
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "RTotalADRatio"
                    mValues: list[f32] = {
                        0.5
                        1
                        1.5
                        2
                        2.5
                        3
                        3.5
                    }
                    mBaseP: f32 = 0.5
                    mFormula: string = "P + 0.5"
                }
                SpellDataValue {
                    mName: string = "RAPRatio"
                    mValues: list[f32] = {
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                    }
                    mBaseP: f32 = 0.75
                }
            }
            0x94572284: map[hash,pointer] = {
                "RCalculatedShieldValue" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0x093c34b9
                        }
                        StatByNamedDataValueCalculationPart {
                            mDataValue: hash = 0x06304373
                            mStat: u8 = 2
                        }
                        StatByNamedDataValueCalculationPart {
                            mDataValue: hash = 0x51ed68ef
                        }
                    }
                }
            }
            mCoefficient: f32 = 1
            mCoefficient2: f32 = 0.5
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "ASSETS/Characters/Kaisa/HUD/Icons2D/Kaisa_R.dds"
            }
            cooldownTime: list[f32] = {
                110
                110
                90
                70
                70
                70
                70
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            canCastOrQueueWhileCasting: bool = true
            mCantCancelWhileWindingUp: bool = true
            cantCastWhileRooted: bool = true
            mUseMinimapTargeting: bool = true
            mDoesNotConsumeMana: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRangeDisplayOverride: list[f32] = {
                750
                1500
                2250
                3000
                3750
                4500
                5250
            }
            castRadius: list[f32] = {
                525
                525
                525
                525
                525
                525
                525
            }
            castConeDistance: f32 = 100
            castTargetAdditionalUnitsRadius: f32 = 250
            castFrame: f32 = 6
            missileSpeed: f32 = 0
            0x63060019: link = 0xa9799637
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_KaisaR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_KaisaR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
            }
            mana: list[f32] = {
                100
                100
                100
                100
                100
                100
            }
            selectionPriority: u32 = 2
            mTargetingTypeData: pointer = Location {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_KaisaR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_KaisaR_Name"
                        "keySummary" = "Spell_KaisaR_Summary"
                        "keyTooltip" = "Spell_KaisaR_Tooltip"
                        "keyPickChoiceName" = "game_character_displayname_Kaisa"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "RRange"
                                    typeIndex: i32 = 2
                                    nameOverride: string = "Spell_ListType_Range"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                                TooltipInstanceListElement {
                                    type: string = "RBaseValue"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_ShieldAmount"
                                }
                                TooltipInstanceListElement {
                                    type: string = "RTotalADRatio"
                                    typeIndex: i32 = 4
                                    multiplier: f32 = 100
                                    nameOverride: string = "SpellListType_AttackDamageRatio"
                                    Style: u32 = 1
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                    TargeterDefinitionMinimap {}
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_KaisaE"
        }
    }
    0xa9799637 = 0xefc7f35c {
        0x81cd26c4: file = 0x3e5b2f07d468a978
    }
    0xd15aaa5c = AbilityObject {
        mRootSpell: link = 0xe5f42d99
        mChildSpells: list[link] = {
            0xe5f42d99
            0xb69d87cd
        }
        mName: string = "UltBook_CassiopeiaR"
    }
    0x9197ccf5 = 0xefc7f35c {
        0x81cd26c4: file = 0x53acebe5ab1e184b
    }
    0xb69d87cd = SpellObject {
        mScriptName: string = "UltBook_CassiopeiaRStun"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4194304
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "CassiopeiaR"
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        75
                        200
                        325
                        450
                        0
                        0
                        125
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        60
                        60
                        60
                        60
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 0.600000024
            mAnimationName: string = "Spell4"
            mImgIconName: list[string] = {
                "ASSETS/Characters/Cassiopeia/HUD/Icons2D/Cassiopeia_R.dds"
            }
            cooldownTime: list[f32] = {
                140
                130
                120
                110
                10
                10
                10
            }
            delayTotalTimePercent: f32 = -0.75
            mCantCancelWhileWindingUp: bool = true
            mCantCancelWhileChanneling: bool = true
            castRange: list[f32] = {
                750
                750
                750
                750
                750
                750
                750
            }
            castRadius: list[f32] = {
                210
                210
                210
                210
                210
                210
                210
            }
            castConeAngle: f32 = 40
            castConeDistance: f32 = 750
            castFrame: f32 = 15
            missileSpeed: f32 = 0
            0x92a53e77: list[hash] = {
                0xe9eb82ff
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Cone {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionCone {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        coneAngleDegrees: option[f32] = {
                            40
                        }
                        coneRange: option[f32] = {
                            750
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_CassiopeiaRStun"
        }
    }
    0xe5f42d99 = SpellObject {
        mScriptName: string = "UltBook_CassiopeiaR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4194304
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "CassiopeiaR"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ImmobilizingCCSpell"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "RCCDuration"
                    mValues: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                    mBaseP: f32 = 2
                }
                SpellDataValue {
                    mName: string = "RSlowPercent"
                    mValues: list[f32] = {
                        40
                        40
                        40
                        40
                        40
                        40
                        40
                    }
                    mBaseP: f32 = 40
                }
                SpellDataValue {
                    mName: string = "RBaseDamage"
                    mValues: list[f32] = {
                        50
                        150
                        250
                        350
                        450
                        550
                        650
                    }
                    mBaseP: f32 = 50
                    mFormula: string = "P + 100"
                }
            }
            0x94572284: map[hash,pointer] = {
                "RDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "RBaseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.5
                        }
                    }
                }
            }
            mCoefficient: f32 = 0.5
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Cassiopeia_Square_0.dds"
            }
            cooldownTime: list[f32] = {
                120
                120
                100
                80
                10
                10
                10
            }
            delayTotalTimePercent: f32 = -0.75
            mCantCancelWhileWindingUp: bool = true
            mCantCancelWhileChanneling: bool = true
            castRange: list[f32] = {
                825
                825
                825
                825
                825
                825
                700
            }
            castRadius: list[f32] = {
                210
                210
                210
                210
                210
                210
                210
            }
            castConeAngle: f32 = 40
            castConeDistance: f32 = 825
            castFrame: f32 = 15
            missileSpeed: f32 = 0
            0x63060019: link = 0x9197ccf5
            0x92a53e77: list[hash] = {
                0xe9eb82ff
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_CassiopeiaR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_CassiopeiaR_SFX_events.bnk"
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Cone {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_CassiopeiaR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_CassiopeiaR_Name"
                        "keySummary" = "Spell_CassiopeiaR_Summary"
                        "keyTooltip" = "Spell_CassiopeiaR_Tooltip"
                        "keyPickChoiceName" = "game_character_displayname_Cassiopeia"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "RBaseDamage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionCone {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        coneAngleDegrees: option[f32] = {
                            40
                        }
                        coneRange: option[f32] = {
                            825
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_CassiopeiaR"
        }
    }
    0xbf9a8b07 = AbilityObject {
        mRootSpell: link = 0xf1b8d025
        mChildSpells: list[link] = {
            0xf1b8d025
        }
        mName: string = "UltBook_SingedR"
    }
    0x94d3394c = 0xefc7f35c {
        0x81cd26c4: file = 0xa75cce9de0598e75
    }
    0xf1b8d025 = SpellObject {
        mScriptName: string = "UltBook_SingedR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 9221
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "InsanityPotion"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "StatAmount"
                    mValues: list[f32] = {
                        0
                        30
                        60
                        90
                        120
                        150
                        180
                    }
                    mFormula: string = "P + 30"
                }
                SpellDataValue {
                    mName: string = "Duration"
                    mValues: list[f32] = {
                        25
                        25
                        25
                        25
                        25
                        25
                        25
                    }
                    mBaseP: f32 = 25
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "GrievousAmount"
                    mValues: list[f32] = {
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                    }
                    mBaseP: f32 = 0.400000006
                }
                SpellDataValue {
                    mName: string = "GrievousDuration"
                    mValues: list[f32] = {
                        1
                        1
                        1
                        1
                        1
                        1
                        1
                    }
                    mBaseP: f32 = 1
                }
            }
            mCoefficient: f32 = 1
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Singed_Square_0.dds"
            }
            cooldownTime: list[f32] = {
                120
                120
                110
                100
                100
                100
                100
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            castRange: list[f32] = {
                20
                20
                20
                20
                20
                20
                20
            }
            castRadius: list[f32] = {
                210
                210
                210
                210
                210
                210
                210
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 18.2000008
            missileSpeed: f32 = 1450
            0x63060019: link = 0x94d3394c
            0x92a53e77: list[hash] = {
                0x02ccc62e
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_SingedR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_SingedR_SFX_events.bnk"
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Self {}
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_SingedR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_InsanityPotion_Name"
                        "keySummary" = "Spell_InsanityPotion_Summary"
                        "keyTooltip" = "Spell_InsanityPotion_Tooltip"
                        "keyPickChoiceName" = "game_character_displayname_Singed"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                                TooltipInstanceListElement {
                                    type: string = "StatAmount"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_SingedBonusStats"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    0x957f6c2f = SpellObject {
        mScriptName: string = "UltBook_LucianRMissile"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "LucianR"
            mAnimationName: string = ""
            mImgIconName: list[string] = {
                "ASSETS/Characters/Lucian/HUD/Icons2D/Lucian_R.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            mDoNotNeedToFaceTarget: bool = true
            castRange: list[f32] = {
                1200
                1200
                1200
                1200
                1200
                1200
                1200
            }
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 110
                movementComponent: pointer = FixedSpeedMovement {
                    mProjectTargetToCastRange: bool = true
                    mSpeed: f32 = 2800
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                    mTargetHeightAugment: f32 = -50
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "R_Pinky2"
                }
                heightSolver: pointer = BlendedLinearHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            missileSpeed: f32 = 2800
            mMissileEffectKey: hash = 0xa72f2de7
            mLineWidth: f32 = 110
            0x92a53e77: list[hash] = {
                0x01489914
            }
            mTargetingTypeData: pointer = direction {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        hideWithLineIndicator: bool = true
                    }
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                110
                                110
                                110
                                110
                                110
                                110
                            }
                            mValueType: u32 = 2
                        }
                    }
                }
            }
        }
    }
    0xb3d9a9fd = SpellObject {
        mScriptName: string = "UltBook_LucianRMissileOffhand"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "LucianR"
            mAnimationName: string = ""
            mImgIconName: list[string] = {
                "ASSETS/Characters/Lucian/HUD/Icons2D/Lucian_R.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            mDoNotNeedToFaceTarget: bool = true
            castRange: list[f32] = {
                1200
                1200
                1200
                1200
                1200
                1200
                1200
            }
            mMissileSpec: pointer = MissileSpecification {
                mMissileWidth: f32 = 110
                movementComponent: pointer = FixedSpeedMovement {
                    mProjectTargetToCastRange: bool = true
                    mSpeed: f32 = 2800
                    mUseHeightOffsetAtEnd: bool = true
                    mTracksTarget: bool = false
                    mTargetHeightAugment: f32 = -50
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "L_Pinky2"
                }
                heightSolver: pointer = BlendedLinearHeightSolver {}
                verticalFacing: pointer = VerticalFacingFaceTarget {}
                behaviors: list[pointer] = {
                    CastOnHit {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 3
            missileSpeed: f32 = 2800
            mMissileEffectKey: hash = 0xa72f2de7
            mLineWidth: f32 = 110
            0x92a53e77: list[hash] = {
                0x01489914
            }
            mTargetingTypeData: pointer = direction {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        hideWithLineIndicator: bool = true
                    }
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                110
                                110
                                110
                                110
                                110
                                110
                            }
                            mValueType: u32 = 2
                        }
                    }
                }
            }
        }
    }
    0xd905f5cf = SpellObject {
        mScriptName: string = "UltBook_LucianRDisable"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 9221
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "LucianR"
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        3
                        3
                        3
                        3
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0
                        20
                        40
                        60
                        0
                        0
                        15
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        2
                        2.5
                        3
                        3.5
                        0
                        0
                        0.5
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {
                    value: list[f32] = {
                        200
                        200
                        200
                        200
                        200
                        200
                        200
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 0.100000001
            mCoefficient2: f32 = 0.25
            mImgIconName: list[string] = {
                "UltBook_Lucian_Square.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                10
                10
                0
            }
            mCantCancelWhileWindingUp: bool = true
            bIsToggleSpell: bool = true
            castRange: list[f32] = {
                10000
                10000
                10000
                10000
                10000
                10000
                10000
            }
            castRangeDisplayOverride: list[f32] = {
                1200
                1200
                1200
                1200
                1200
                1200
                1200
            }
            castFrame: f32 = 9.42500019
            mLineWidth: f32 = 60
            0x92a53e77: list[hash] = {
                0x01489914
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            mTargetingTypeData: pointer = Self {}
            mClientData: embed = SpellDataResourceClient {
                0x375656dd: hash = "Characters/Lucian/Spells/LucianRAbility/LucianR"
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_LucianR"
        }
    }
    0xea9bc0d1 = SpellObject {
        mScriptName: string = "UltBook_LucianR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 9221
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "Duration"
                    mValues: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                    mBaseP: f32 = 3
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "NumShots"
                    mValues: list[f32] = {
                        22
                        22
                        22
                        22
                        22
                        22
                        22
                    }
                    mBaseP: f32 = 22
                    mFormula: string = "P+0"
                }
                SpellDataValue {
                    mName: string = "RecastLockout"
                    mValues: list[f32] = {
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                    }
                    mBaseP: f32 = 0.75
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "RangeCheck"
                    mValues: list[f32] = {
                        1050
                        1050
                        1050
                        1050
                        1050
                        1050
                        1050
                    }
                    mBaseP: f32 = 1050
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "PercentDamageAmpToMinions"
                    mValues: list[f32] = {
                        200
                        200
                        200
                        200
                        200
                        200
                        200
                    }
                    mBaseP: f32 = 200
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "BaseDamage"
                    mValues: list[f32] = {
                        15
                        15
                        30
                        45
                        45
                        45
                        45
                    }
                    0x3f95426c: bool = false
                    mFormula: string = "P + 20"
                }
                SpellDataValue {
                    mName: string = "CritRatio"
                    mValues: list[f32] = {
                        0.25
                        0.25
                        0.25
                        0.25
                        0.25
                        0.25
                        0.25
                    }
                    mBaseP: f32 = 0.25
                }
                SpellDataValue {
                    mName: string = "DamageADRatio"
                    mValues: list[f32] = {
                        0.25
                        0.25
                        0.25
                        0.25
                        0.25
                        0.25
                        0.25
                    }
                    mBaseP: f32 = 0.25
                }
            }
            0x94572284: map[hash,pointer] = {
                "DamagePerBullet" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "baseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.150000006
                        }
                        StatByNamedDataValueCalculationPart {
                            mDataValue: hash = 0x1cbbed54
                            mStat: u8 = 2
                        }
                    }
                }
                "TotalDamage" = GameCalculationModified {
                    mModifiedGameCalculation: hash = "DamagePerBullet"
                    mMultiplier: pointer = NamedDataValueCalculationPart {
                        mDataValue: hash = "NumShots"
                    }
                }
                0x40645c38 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        SumOfSubPartsCalculationPart {
                            mSubparts: list[pointer] = {
                                ProductOfSubPartsCalculationPart {
                                    mPart1: pointer = StatByNamedDataValueCalculationPart {
                                        mDataValue: hash = "CritRatio"
                                        mStat: u8 = 7
                                    }
                                    mPart2: pointer = NumberCalculationPart {
                                        mNumber: f32 = 100
                                    }
                                }
                                NamedDataValueCalculationPart {
                                    mDataValue: hash = "NumShots"
                                }
                            }
                        }
                    }
                }
            }
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Lucian_Square.dds"
            }
            mCastTime: f32 = 0.00999999978
            cooldownTime: list[f32] = {
                110
                110
                100
                90
                10
                10
                10
            }
            mCantCancelWhileWindingUp: bool = true
            mCantCancelWhileChanneling: bool = true
            mCanMoveWhileChanneling: bool = true
            bIsToggleSpell: bool = true
            mDoNotNeedToFaceTarget: bool = true
            castRange: list[f32] = {
                10000
                10000
                10000
                10000
                10000
                10000
                10000
            }
            castRangeDisplayOverride: list[f32] = {
                1400
                1400
                1400
                1400
                1400
                1400
                1400
            }
            mLineWidth: f32 = 60
            mLookAtPolicy: u32 = 1
            0x63060019: link = 0xfa36fe1e
            0x92a53e77: list[hash] = {
                0x01489914
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_LucianR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_LucianR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            mTargetingTypeData: pointer = direction {}
            0x03f432a6: u8 = 1
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_LucianR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_LucianR_Name"
                        "keySummary" = "Spell_LucianR_Summary"
                        "keyTooltip" = "Spell_LucianR_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_LucianR_TooltipExtendedBelowLine"
                        "keyPickChoiceName" = "game_character_displayname_Lucian"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "BaseDamage"
                                    typeIndex: i32 = 2
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "NumShots"
                                    typeIndex: i32 = 5
                                    nameOverride: string = "Spell_ListType_LucianNumberofShots"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                            distanceOffset: f32 = 100
                            orientationType: u32 = 3
                        }
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                110
                                110
                                110
                                110
                                110
                                110
                            }
                            mValueType: u32 = 2
                        }
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                1200
                                1200
                                1200
                                1200
                                1200
                                1200
                            }
                            mValueType: u32 = 2
                        }
                        textureBaseOverrideName: string = "ASSETS/Spells/Textures/Reticle_Gradient_Base_Q_01.dds"
                        textureTargetOverrideName: string = "ASSETS/Spells/Textures/Reticle_Gradient_Base_Q_02.dds"
                    }
                    TargeterDefinitionRange {
                        hideWithLineIndicator: bool = true
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_LucianR"
        }
    }
    0xfa36fe1e = 0xefc7f35c {
        0x81cd26c4: file = 0x499af60984bec71c
    }
    0x97761b7a = 0xefc7f35c {
        0x81cd26c4: file = 0xbf1c56e8f26fc66c
    }
    0xa52c32b5 = SpellObject {
        mScriptName: string = "UltBook_OriannaRStun"
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_OrianaStun"
        }
    }
    0xb5914311 = SpellObject {
        mScriptName: string = "UltBook_OriannaR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 13327
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mAlternateName: string = "OrianaDetonateCommand"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ImmobilizingCCSpell"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "Damage"
                    mValues: list[f32] = {
                        125
                        200
                        275
                        350
                        425
                        500
                        575
                    }
                    mBaseP: f32 = 125
                    mFormula: string = "P + 75"
                }
                SpellDataValue {
                    mName: string = "AoERadius"
                    mValues: list[f32] = {
                        415
                        415
                        415
                        415
                        415
                        415
                        415
                    }
                    mBaseP: f32 = 415
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "StunDuration"
                    mValues: list[f32] = {
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                    }
                    mBaseP: f32 = 0.75
                    mFormula: string = "P"
                }
            }
            0x94572284: map[hash,pointer] = {
                "TotalDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "Damage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.800000012
                        }
                    }
                    0xcbcac618: u8 = 6
                }
            }
            mCoefficient: f32 = 0.699999988
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Orianna_Square.dds"
            }
            mCastTime: f32 = 0.5
            cooldownTime: list[f32] = {
                110
                110
                95
                80
                80
                80
                80
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                410
                10000
                10000
                10000
                10000
                10000
                10000
            }
            castRangeDisplayOverride: list[f32] = {
                410
                410
                410
                410
                410
                410
                410
            }
            castRadius: list[f32] = {
                20
                20
                20
                20
                20
                20
                20
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 12
            missileSpeed: f32 = 1200
            mLineWidth: f32 = 80
            0x63060019: link = 0x97761b7a
            0x92a53e77: list[hash] = {
                0xe9b7fee8
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_OriannaR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_OriannaR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            selectionPriority: u32 = 2
            mTargetingTypeData: pointer = Self {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_OriannaR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_OrianaDetonateCommand_Name"
                        "keySummary" = "Spell_OrianaDetonateCommand_Summary"
                        "keyTooltip" = "Spell_OrianaDetonateCommand_Tooltip"
                        "keyPickChoiceName" = "game_character_displayname_Orianna"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Damage"
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 1
                        }
                        overrideRadius: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                410
                                410
                                410
                                410
                                410
                                410
                            }
                            mValueType: u32 = 2
                        }
                    }
                }
            }
        }
    }
    0xa0412612 = SpellObject {
        mScriptName: string = "UltBook_LuxRMis"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4194304
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "LuxMaliceCannon"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        200
                        350
                        500
                        650
                        0
                        0
                        150
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "Lux_Square.dds"
            }
            cooldownTime: list[f32] = {
                60
                60
                60
                60
                10
                10
                10
            }
            delayCastOffsetPercent: f32 = 1
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                3500
                3500
                3500
                3500
                3500
                3500
                3500
            }
            castRadius: list[f32] = {
                299.299988
                299.299988
                299.299988
                299.299988
                299.299988
                299.299988
                299.299988
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 80
            missileSpeed: f32 = 3000
            mLineWidth: f32 = 250
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = direction {}
            mClientData: embed = SpellDataResourceClient {
                0x375656dd: hash = 0xf777fe87
            }
        }
    }
    0xdc172485 = 0xefc7f35c {
        0x81cd26c4: file = 0xcbc639b2bcef047c
    }
    0xf777fe87 = SpellObject {
        mScriptName: string = "UltBook_LuxR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4194308
            mAffectsTypeFlags: u32 = 6154
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "Damage"
                    mValues: list[f32] = {
                        200
                        300
                        400
                        500
                        600
                        700
                        800
                    }
                    mBaseP: f32 = 200
                    mFormula: string = "P +  100"
                }
                SpellDataValue {
                    mName: string = "ResetPercent"
                    mValues: list[f32] = {
                        0.200000003
                        0.300000012
                        0.400000006
                        0.5
                        0.600000024
                        0.699999988
                        0.800000012
                    }
                    mBaseP: f32 = 0.200000003
                    mFormula: string = "P + 0.1"
                }
                SpellDataValue {
                    mName: string = "ResetAssistWindow"
                    mValues: list[f32] = {
                        1.75
                        1.75
                        1.75
                        1.75
                        1.75
                        1.75
                        1.75
                    }
                    mBaseP: f32 = 1.75
                    mFormula: string = "P"
                }
            }
            0x94572284: map[hash,pointer] = {
                "TotalDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "Damage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 1
                        }
                    }
                    0xcbcac618: u8 = 6
                }
            }
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Lux_Square.dds"
            }
            mCastTime: f32 = 0.899999976
            cooldownTime: list[f32] = {
                60
                60
                50
                40
                40
                40
                30
            }
            delayCastOffsetPercent: f32 = 1.75
            mCantCancelWhileWindingUp: bool = true
            mCantCancelWhileChanneling: bool = true
            useAnimatorFramerate: bool = true
            mDoesNotConsumeMana: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRangeDisplayOverride: list[f32] = {
                3340
                3340
                3340
                3340
                3340
                3340
                3340
            }
            castRadius: list[f32] = {
                250
                250
                250
                250
                250
                250
                250
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 74
            missileSpeed: f32 = 3000
            mLineWidth: f32 = 190
            0x63060019: link = 0xdc172485
            0x92a53e77: list[hash] = {
                0x6c46186f
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_LuxR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_LuxR_SFX_events.bnk"
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Location {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_LuxR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_LuxR_Name"
                        "keySummary" = "Spell_LuxR_Summary"
                        "keyTooltip" = "Spell_LuxR_Tooltip"
                        "keyTooltipSimple" = "Spell_LuxR_TooltipSimple"
                        "keyPickChoiceName" = "game_character_displayname_Lux"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Damage"
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                3410
                                3410
                                3410
                                3410
                                3410
                                3410
                            }
                            mValueType: u32 = 2
                        }
                    }
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                165
                                165
                                165
                                165
                                165
                                165
                            }
                            mValueType: u32 = 2
                        }
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                3410
                                3410
                                3410
                                3410
                                3410
                                3410
                            }
                            mValueType: u32 = 2
                        }
                        textureBaseOverrideName: string = "ASSETS/Spells/Textures/skillshot_Rectangle_Base_r01_v01.dds"
                        textureTargetOverrideName: string = "ASSETS/Spells/Textures/skillshot_Rectangle_tip_r01_v01.dds"
                    }
                    TargeterDefinitionMinimap {
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                3340
                                3340
                                3340
                                3340
                                3340
                                3340
                            }
                            mValueType: u32 = 2
                        }
                    }
                }
            }
        }
    }
    0xe11b055b = AbilityObject {
        mRootSpell: link = 0xe3830219
        mChildSpells: list[link] = {
            0xe3830219
        }
        mName: string = "UltBook_KayleR"
    }
    0xb97ba2c8 = 0xefc7f35c {
        0x81cd26c4: file = 0x62b285dc31b5478d
    }
    0xe3830219 = SpellObject {
        mScriptName: string = "UltBook_KayleR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 9221
            mAffectsStatusFlags: u32 = 32
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mCastRequirementsTarget: list[pointer] = {
                HasBuffCastRequirement {
                    mBuffName: hash = 0xb4ae536b
                    mFromAnyone: bool = true
                    mInvertResult: bool = true
                }
            }
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "PositiveEffect_Boon"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "Damage"
                    mValues: list[f32] = {
                        50
                        200
                        350
                        500
                        650
                        800
                        950
                    }
                    mBaseP: f32 = 50
                    mFormula: string = "P + 150"
                }
                SpellDataValue {
                    mName: string = "InvulnDuration"
                    mValues: list[f32] = {
                        1.5
                        2
                        2.5
                        3
                        3.5
                        4
                        4.5
                    }
                    mBaseP: f32 = 1.5
                    mFormula: string = "P + .5"
                }
            }
            0x94572284: map[hash,pointer] = {
                "TotalDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "Damage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.800000012
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 1
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                    }
                }
            }
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Kayle_Square.dds"
            }
            mCastTime: f32 = 1.5
            cooldownTime: list[f32] = {
                160
                160
                120
                80
                80
                80
                80
            }
            delayCastOffsetPercent: f32 = -1
            delayTotalTimePercent: f32 = -1
            mCantCancelWhileWindingUp: bool = true
            mChannelIsInterruptedByDisables: bool = false
            mChannelIsInterruptedByAttacking: bool = false
            mCanMoveWhileChanneling: bool = true
            mShowChannelBar: bool = false
            useAnimatorFramerate: bool = true
            mDoNotNeedToFaceTarget: bool = true
            mUpdateRotationWhenCasting: bool = true
            mDoesNotConsumeCooldown: bool = true
            castRange: list[f32] = {
                900
                900
                900
                900
                900
                900
                900
            }
            castRadius: list[f32] = {
                500
                500
                500
                500
                500
                500
                500
            }
            castConeAngle: f32 = 0
            castConeDistance: f32 = 0
            castFrame: f32 = 30
            missileSpeed: f32 = 0
            0x63060019: link = 0xb97ba2c8
            0x92a53e77: list[hash] = {
                0x1ec77b52
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_KayleR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_KayleR_SFX_events.bnk"
            }
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
            }
            selectionPriority: u32 = 2
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_KayleR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_KayleR_Name"
                        "keySummary" = "Spell_KayleR_Summary"
                        "keyTooltip" = "Spell_KayleR_Tooltip"
                        "keyPickChoiceName" = "game_character_displayname_Kayle"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Damage"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "InvulnDuration"
                                    typeIndex: i32 = 4
                                    nameOverride: string = "Spell_KayleR_ImmunityDuration"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cost"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 2
                        }
                        overrideRadius: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                500
                                500
                                500
                                500
                                500
                                500
                            }
                            mValueType: u32 = 1
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mTooltipData: pointer = TooltipInstanceBuff {
                mObjectName: string = "UltBook_KayleR"
                mFormat: link = "UX/Tooltips/Buff"
                mLocKeys: map[string,string] = {
                    "keyName" = "Buff_KayleR_Name"
                    "keyTooltip" = "Buff_KayleR_Tooltip"
                }
            }
        }
    }
    0xe2f7d100 = AbilityObject {
        mRootSpell: link = 0xc19679f7
        mChildSpells: list[link] = {
            0xc19679f7
            0xc02a146e
            0xf311830b
        }
        mName: string = "UltBook_KindredR"
    }
    0xc02a146e = SpellObject {
        mScriptName: string = "UltBook_KindredFakeCastTimeSpell"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 14346
            mAlternateName: string = "KindredR"
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        25
                        30
                        35
                        40
                        45
                        50
                        55
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        20
                        60
                        100
                        140
                        180
                        220
                        260
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        30
                        30
                        30
                        30
                        30
                        30
                        30
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        6
                        6
                        6
                        6
                        6
                        6
                        6
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mAnimationName: string = "Spell4"
            mCastTime: f32 = 0.25
            cooldownTime: list[f32] = {
                1
                1
                1
                1
                1
                1
                1
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            mSpellRevealsChampion: bool = false
            useAnimatorFramerate: bool = true
            bHaveHitEffect: bool = true
            bIsToggleSpell: bool = true
            castRadius: list[f32] = {
                400
                400
                400
                400
                400
                400
                400
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 7.5
            missileSpeed: f32 = 0
            0x92a53e77: list[hash] = {
                0x4c9dbee3
            }
            mHitEffectName: string = "globalhit_orange_tar.troy"
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            mTargetingTypeData: pointer = SelfAoe {}
            mClientData: embed = SpellDataResourceClient {
                0x375656dd: hash = "Characters/Kindred/Spells/KindredR"
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
    }
    0xc19679f7 = SpellObject {
        mScriptName: string = "UltBook_KindredR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 8192
            mAffectsStatusFlags: u32 = 3
            mAlternateName: string = "KindredR"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "PositiveEffect_Boon"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        250
                        250
                        325
                        400
                        400
                        400
                        400
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        4
                        4
                        4
                        4
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        530
                        530
                        530
                        530
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        400
                        400
                        600
                        800
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 0.219999999
            mCoefficient2: f32 = 0.330000013
            mAnimationName: string = "Channel"
            mImgIconName: list[string] = {
                "UltBook_Kindred_Square.dds"
            }
            cooldownTime: list[f32] = {
                180
                180
                150
                120
                120
                120
                120
            }
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            mDoesNotConsumeMana: bool = true
            castRange: list[f32] = {
                500
                500
                500
                500
                500
                500
                500
            }
            castRangeDisplayOverride: list[f32] = {
                500
                500
                500
                500
                500
                500
                500
            }
            castRadius: list[f32] = {
                1200
                1200
                1200
                1200
                1200
                1200
                1200
            }
            castRadiusSecondary: list[f32] = {
                530
                530
                530
                530
                530
                530
                530
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 20.1599998
            missileSpeed: f32 = 20
            0x63060019: link = 0xcc68c981
            0x92a53e77: list[hash] = {
                0x4c9dbee3
            }
            0x3b182105: list[string] = {
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_KindredR_SFX_audio.bnk"
                "ASSETS/Sounds/Wwise2016/SFX/Shared/MODE_UltBook_KindredR_SFX_events.bnk"
            }
            manaUiOverride: list[f32] = {
                0
                0
                0
                0
                0
                0
            }
            selectionPriority: u32 = 2
            mTargetingTypeData: pointer = SelfAoe {}
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "UltBook_KindredR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_KindredR_Name"
                        "keySummary" = "Spell_KindredR_Summary"
                        "keyTooltip" = "Spell_KindredR_Tooltip"
                        "keyPickChoiceName" = "game_character_displayname_Kindred"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Effect%dAmount"
                                    typeIndex: i32 = 1
                                    nameOverride: string = "Spell_ListType_Healing"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mLeftClickSpellAction: u32 = 2
            }
        }
    }
    0xcc68c981 = 0xefc7f35c {
        0x81cd26c4: file = 0x3bb71879e08eca45
    }
    0xf311830b = SpellObject {
        mScriptName: string = "UltBook_KindredRNoDeathBuff"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mSpellTags: list[string] = {
                "PositiveEffect_Boon"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        5
                        12
                        19
                        26
                        0
                        0
                        7
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        0.5
                        0.5
                        0.5
                        0.5
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        10
                        24
                        38
                        52
                        0
                        0
                        14
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        15
                        36
                        57
                        78
                        0
                        0
                        21
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 0.219999999
            mCoefficient2: f32 = 0.330000013
            mAnimationName: string = "Spell2"
            delayCastOffsetPercent: f32 = -0.5
            delayTotalTimePercent: f32 = -0.5
            mCantCancelWhileWindingUp: bool = true
            castRange: list[f32] = {
                900
                900
                900
                900
                900
                900
                900
            }
            castRadius: list[f32] = {
                280
                280
                280
                280
                280
                280
                280
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 20.1599998
            missileSpeed: f32 = 20
            0x92a53e77: list[hash] = {
                0x4c9dbee3
            }
            mana: list[f32] = {
                70
                85
                100
                0
                0
                15
            }
            selectionPriority: u32 = 2
            mTargetingTypeData: pointer = Area {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {}
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_KindredRNoDeathBuff"
        }
    }
    0xb7717499 = VfxSystemDefinitionData {
        complexEmitterDefinitionData: list[pointer] = {
            VfxEmitterDefinitionData {
                rate: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 6
                }
                lifetime: option[f32] = {
                    1
                }
                isSingleParticle: flag = true
                childParticleSetDefinition: embed = VfxChildParticleSetDefinitionData {
                    childrenIdentifiers: list[embed] = {
                        VfxChildIdentifier {
                            effectKey: hash = 0xb165edfd
                        }
                    }
                    childEmitOnDeath: bool = true
                }
                emitterName: string = "mesh_glow1"
                primitive: pointer = VfxPrimitiveMesh {
                    mMesh: embed = VfxMeshDefinitionData {
                        mSimpleMeshName: string = "ASSETS/Characters/Camille/skins/base/Particles/Camille_Base_R_Border_glow.scb"
                    }
                }
                blendMode: u8 = 4
                birthColor: embed = ValueColor {
                    constantValue: vec4 = { 0.847058892, 0.670588255, 1, 0.501960814 }
                }
                pass: i16 = 98
                disableBackfaceCull: bool = true
                miscRenderFlags: u8 = 1
                isGroundLayer: flag = true
                isLocalOrientation: flag = false
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 4, 4, 4 }
                }
                texture: string = "ASSETS/Characters/Camille/skins/base/Particles/Camille_Base_R_mesh_glow_enemy.dds"
                textureMult: string = "ASSETS/Characters/Camille/skins/base/Particles/Camille_Base_Z_Tech_Mult.dds"
                birthUvScrollRateMult: embed = ValueVector2 {
                    constantValue: vec2 = { -0.0500000007, 0.5 }
                }
                birthUVOffsetMult: embed = ValueVector2 {
                    constantValue: vec2 = { 1, 1 }
                    dynamics: pointer = VfxAnimatedVector2fVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    0
                                    1
                                }
                            }
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    0
                                    1
                                }
                            }
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[vec2] = {
                            { 1, 1 }
                        }
                    }
                }
            }
            VfxEmitterDefinitionData {
                rate: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 6
                }
                lifetime: option[f32] = {
                    1
                }
                isSingleParticle: flag = true
                emitterName: string = "mesh_hex_add"
                primitive: pointer = VfxPrimitiveMesh {
                    mMesh: embed = VfxMeshDefinitionData {
                        mSimpleMeshName: string = "ASSETS/Characters/Camille/skins/base/Particles/Camille_Base_R_Border.scb"
                    }
                }
                blendMode: u8 = 4
                color: embed = ValueColor {
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            0.00999999978
                            0.0199999996
                            0.0299999993
                            0.0599999987
                            0.5
                            1
                        }
                        values: list[vec4] = {
                            { 0.239216, 0.0470589995, 0.0509800017, 1 }
                            { 0.909803987, 0.788235009, 0.792156994, 1 }
                            { 0.0156859998, 0.0156859998, 0.152941003, 1 }
                            { 0.976471007, 0.647059023, 0.654901981, 1 }
                            { 0.819607973, 0.223528996, 0.313724995, 1 }
                            { 0.666666985, 0.227450997, 0.235293999, 1 }
                            { 0.0509800017, 0.0235290006, 0.0980390012, 1 }
                        }
                    }
                }
                pass: i16 = 100
                miscRenderFlags: u8 = 1
                isGroundLayer: flag = true
                useNavmeshMask: flag = true
                isLocalOrientation: flag = false
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 4, 4, 4 }
                }
                texture: string = "ASSETS/Characters/Camille/skins/base/Particles/Camille_Base_R_edge_single_enemy.dds"
                textureMult: string = "ASSETS/Characters/Camille/skins/base/Particles/Camille_Base_Z_Tech_Mult.dds"
                birthUvScrollRateMult: embed = ValueVector2 {
                    constantValue: vec2 = { -0.0700000003, -0.25 }
                }
                birthUVOffsetMult: embed = ValueVector2 {
                    constantValue: vec2 = { 0.5, 0.5 }
                }
            }
            VfxEmitterDefinitionData {
                rate: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 6
                }
                lifetime: option[f32] = {
                    1
                }
                isSingleParticle: flag = true
                emitterName: string = "mesh_hexagon"
                primitive: pointer = VfxPrimitiveMesh {
                    mMesh: embed = VfxMeshDefinitionData {
                        mSimpleMeshName: string = "ASSETS/Characters/Camille/skins/base/Particles/Camille_Base_R_Border.scb"
                    }
                }
                blendMode: u8 = 1
                pass: i16 = 99
                miscRenderFlags: u8 = 1
                isGroundLayer: flag = true
                useNavmeshMask: flag = true
                isLocalOrientation: flag = false
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 4, 4, 4 }
                }
                texture: string = "ASSETS/Characters/Camille/skins/base/Particles/Camille_Base_R_edge_single_enemy.dds"
                textureMult: string = "ASSETS/Characters/Camille/skins/base/Particles/Camille_Base_Z_Tech_Mult.dds"
                birthUvScrollRateMult: embed = ValueVector2 {
                    constantValue: vec2 = { -0.0500000007, 0.125 }
                }
            }
            VfxEmitterDefinitionData {
                rate: embed = ValueFloat {
                    constantValue: f32 = 12
                }
                particleLifetime: embed = ValueFloat {
                    constantValue: f32 = 0.5
                }
                lifetime: option[f32] = {
                    5
                }
                emitterName: string = "hex_circuit_bits"
                bindWeight: embed = ValueFloat {
                    constantValue: f32 = 1
                }
                primitive: pointer = VfxPrimitiveMesh {
                    mMesh: embed = VfxMeshDefinitionData {
                        mSimpleMeshName: string = "ASSETS/Characters/Camille/skins/base/Particles/Camille_Base_R_Circuits.scb"
                    }
                }
                blendMode: u8 = 1
                color: embed = ValueColor {
                    dynamics: pointer = VfxAnimatedColorVariableData {
                        times: list[f32] = {
                            0
                            0.5
                            1
                        }
                        values: list[vec4] = {
                            { 0.819607973, 0.560783982, 1, 0 }
                            { 0.925490022, 0.776471019, 1, 0.749004006 }
                            { 0.435294002, 0.462745011, 1, 0 }
                        }
                    }
                }
                pass: i16 = 1
                disableBackfaceCull: bool = true
                miscRenderFlags: u8 = 1
                uvScrollClamp: flag = true
                isGroundLayer: flag = true
                birthRotation0: embed = ValueVector3 {
                    constantValue: vec3 = { 0, 1, 0 }
                    dynamics: pointer = VfxAnimatedVector3fVariableData {
                        probabilityTables: list[pointer] = {
                            VfxProbabilityTableData {}
                            VfxProbabilityTableData {
                                keyTimes: list[f32] = {
                                    0
                                    1
                                }
                                keyValues: list[f32] = {
                                    0
                                    360
                                }
                            }
                            VfxProbabilityTableData {}
                        }
                        times: list[f32] = {
                            0
                        }
                        values: list[vec3] = {
                            { 0, 1, 0 }
                        }
                    }
                }
                isLocalOrientation: flag = false
                birthScale0: embed = ValueVector3 {
                    constantValue: vec3 = { 4, 2.25, 4 }
                }
                texture: string = "ASSETS/Characters/Camille/skins/base/Particles/Camille_Base_W_heal_Circuits.dds"
                birthUvScrollRate: embed = ValueVector2 {
                    constantValue: vec2 = { -1, 0 }
                }
                birthUVOffset: embed = ValueVector2 {
                    constantValue: vec2 = { 1, 0 }
                }
                texAddressModeBase: u8 = 2
            }
        }
        particleName: string = "UltBook_Camille_R_Indicator_Edge_enemy"
        particlePath: string = "Maps/Particles/Maps/ModeSpecificData/ULTBOOK/UltBook_CamilleR/Particles/UltBook_Camille_R_Indicator_Edge_enemy"
    }
    "Characters/Shaco/Spells/HallucinateFullAbility/Hallucinate" = SpellObject {
        mScriptName: string = "Hallucinate"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 9221
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        100
                        200
                        300
                        400
                        0
                        0
                        100
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        50
                        50
                        50
                        50
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        105
                        90
                        75
                        60
                        0
                        0
                        0
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {
                    value: list[f32] = {
                        75
                        75
                        75
                        75
                        75
                        75
                        75
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mCoefficient: f32 = 1
            mAnimationName: string = "Spell2"
            mImgIconName: list[string] = {
                "ASSETS/Characters/Shaco/HUD/Icons2D/Jester_HallucinogenBomb.dds"
            }
            cooldownTime: list[f32] = {
                110
                100
                90
                80
                10
                10
                10
            }
            mCantCancelWhileWindingUp: bool = true
            castRange: list[f32] = {
                500
                500
                500
                500
                500
                500
                500
            }
            castRadius: list[f32] = {
                100
                100
                100
                100
                100
                100
                100
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 0.660000026
            missileSpeed: f32 = 0
            bHaveHitBone: bool = true
            mHitBoneName: string = "R_hand"
            mana: list[f32] = {
                75
                75
                75
                75
                75
                75
            }
            selectionPriority: u32 = 2
            mTargetingTypeData: pointer = Self {}
        }
    }
    "Characters/Pyke/Spells/PykeRSpellPassive" = SpellObject {
        mScriptName: string = "PykeRSpellPassive"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 4
            mAffectsTypeFlags: u32 = 16384
            mImgIconName: list[string] = {
                "ASSETS/Characters/Pyke/HUD/Icons2D/PykeR.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            delayCastOffsetPercent: f32 = -0.134599999
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRadius: list[f32] = {
                100
                100
                100
                100
                100
                100
                100
            }
            castConeDistance: f32 = 100
            mMissileSpec: pointer = MissileSpecification {
                movementComponent: pointer = FixedSpeedMovement {
                    mSpeed: f32 = 3000
                    mTargetHeightAugment: f32 = 100
                    mOffsetInitialTargetHeight: f32 = 100
                    mStartBoneName: string = "R_hand"
                }
                heightSolver: pointer = FollowTerrainHeightSolver {
                    mHeightOffset: f32 = 100
                }
                verticalFacing: pointer = VeritcalFacingMatchVelocity {}
                behaviors: list[pointer] = {
                    CastOnMovementComplete {}
                    DestroyOnMovementComplete {}
                }
            }
            mCastType: u32 = 1
            castFrame: f32 = 9.5
            missileSpeed: f32 = 3000
            mMissileEffectKey: hash = "Pyke_R_Trail"
            mHitEffectOrientType: u32 = 2
            bHaveHitBone: bool = true
            mHitBoneName: string = "C_BUFFBONE_GLB_CHEST_LOC"
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Location {}
            mClientData: embed = SpellDataResourceClient {
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        useCasterBoundingBox: option[bool] = {
                            false
                        }
                    }
                }
            }
        }
    }
    0x261acac5 = SpellObject {
        mScriptName: string = "BardR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 7375
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "Trait_ImmobilizingCCSpell"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "RStasisDuration"
                    mValues: list[f32] = {
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                        2.5
                    }
                    mBaseP: f32 = 2.5
                }
            }
            mCoefficient: f32 = 0.5
            mAnimationName: string = "Spell4"
            mImgIconName: list[string] = {
                "ASSETS/Characters/Bard/HUD/Icons2D/Bard_R.dds"
            }
            mCastTime: f32 = 0.5
            cooldownTime: list[f32] = {
                10
                110
                95
                80
                10
                10
                10
            }
            mCantCancelWhileWindingUp: bool = true
            mCantCancelWhileChanneling: bool = true
            mUseMinimapTargeting: bool = true
            useAnimatorFramerate: bool = true
            castRange: list[f32] = {
                3400
                3400
                3400
                3400
                3400
                3400
                3400
            }
            castRadius: list[f32] = {
                350
                350
                350
                350
                350
                350
                350
            }
            castFrame: f32 = 10
            mana: list[f32] = {
                100
                100
                100
                0
                0
                0
            }
            mTargetingTypeData: pointer = Location {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "BardR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_BardR_Name"
                        "keySummary" = "Spell_BardR_Summary"
                        "keyTooltip" = "Spell_BardR_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_BardR_TooltipExtendedBelowLine"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionRange {
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                3600
                                3600
                                3600
                                3600
                                3600
                                3600
                            }
                            mValueType: u32 = 2
                        }
                    }
                    TargeterDefinitionMinimap {}
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                    }
                }
            }
        }
    }
    0x5d054b54 = SpellObject {
        mScriptName: string = "KhazixRPassiveEvoTracker"
    }
    "Characters/Khazix/Spells/KhazixRAbility/KhazixR" = SpellObject {
        mScriptName: string = "KhazixR"
        mSpell: pointer = SpellDataResource {
            flags: u32 = 36
            mAffectsTypeFlags: u32 = 6154
            mAlternateName: string = "KhazixR"
            mSpellTags: list[string] = {
                "Trait_Ultimate"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "StealthDuration"
                    mValues: list[f32] = {
                        1.25
                        1.25
                        1.25
                        1.25
                        1.25
                        1.25
                        1.25
                    }
                    mBaseP: f32 = 1.25
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "RecastWindow"
                    mValues: list[f32] = {
                        10
                        10
                        10
                        10
                        10
                        10
                        10
                    }
                    mBaseP: f32 = 10
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "BonusMovementSpeedPercent"
                    mValues: list[f32] = {
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                    }
                    mBaseP: f32 = 0.400000006
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "EvolutionsAvailable"
                    mValues: list[f32] = {
                        0
                        1
                        2
                        3
                        3
                        3
                        3
                    }
                    0x3f95426c: bool = false
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "EvolvedStealthDuration"
                    mValues: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                    mBaseP: f32 = 2
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "RecastCD"
                    mValues: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                    mBaseP: f32 = 2
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "NumberOfCasts"
                    mValues: list[f32] = {
                        2
                        2
                        2
                        2
                        2
                        2
                        2
                    }
                    mBaseP: f32 = 2
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "EvolvedNumberOfCasts"
                    mValues: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                    mBaseP: f32 = 3
                    mFormula: string = "P"
                }
            }
            0x94572284: map[hash,pointer] = {
                0xba2719ef = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NumberCalculationPart {
                            mNumber: f32 = 1
                        }
                    }
                    0x37070a8d: u8 = 5
                    tooltipOnly: bool = true
                }
                0x8b6fe763 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NumberCalculationPart {}
                    }
                    0x37070a8d: u8 = 5
                    tooltipOnly: bool = true
                }
                0x2001728c = GameCalculationConditional {
                    0x011436b4: hash = 0x8b6fe763
                    0x006fde67: hash = 0xba2719ef
                    0xc0482365: pointer = HasBuffCastRequirement {
                        mBuffName: hash = 0x7bcf22fa
                    }
                    0x37070a8d: u8 = 6
                    tooltipOnly: bool = true
                }
            }
            mAnimationName: string = "Spell4"
            mImgIconName: list[string] = {
                "ASSETS/Characters/KhaZix/HUD/Icons2D/Khazix_R.dds"
                "ASSETS/Characters/KhaZix/HUD/Icons2D/Khazix_R_red.dds"
                "ASSETS/Characters/KhaZix/HUD/Icons2D/Khazix_R_red.dds"
            }
            cooldownTime: list[f32] = {
                100
                100
                85
                70
                70
                70
                70
            }
            mCantCancelWhileWindingUp: bool = true
            mUseMinimapTargeting: bool = true
            useAnimatorFramerate: bool = true
            bIsToggleSpell: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRadius: list[f32] = {
                300
                300
                300
                300
                300
                300
                300
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 7.5
            missileSpeed: f32 = 2200
            mFloatVarsDecimals: list[i32] = {
                2
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            mana: list[f32] = {
                100
                100
                100
                100
                100
                100
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = Self {}
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "KhazixR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_KhazixR_Name"
                        "keySummary" = "Spell_KhazixR_Summary"
                        "keyTooltip" = "Spell_KhazixR_Tooltip"
                        "keyTooltipExtended" = "Spell_KhazixR_TooltipExtended"
                        "keyTooltipExtendedBelowLine" = "Spell_KhazixR_TooltipExtendedBelowLine"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "EvolutionsAvailable"
                                    typeIndex: i32 = 4
                                    nameOverride: string = "Spell_ListType_KhaZixREvolutionsAvailable"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_KhazixR"
        }
    }
    "Characters/Ekko/Spells/EkkoR" = SpellObject {
        mScriptName: string = "EkkoR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 1029
            mRequiredUnitTags: embed = ObjectTags {
                mTagList: string = "Champion"
            }
            mPlatformSpellInfo: embed = PlatformSpellInfo {
                mPlatformEnabled: bool = true
            }
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "PositiveEffect_Teleport"
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "Damage"
                    mValues: list[f32] = {
                        0
                        150
                        300
                        450
                        600
                        750
                        900
                    }
                    mFormula: string = "P + 150"
                }
                SpellDataValue {
                    mName: string = "FlatHeal"
                    mValues: list[f32] = {
                        50
                        100
                        150
                        200
                        250
                        300
                        350
                    }
                    mBaseP: f32 = 50
                    mFormula: string = "P + 50"
                }
                SpellDataValue {
                    mName: string = "AoERadius"
                    mValues: list[f32] = {
                        375
                        375
                        375
                        375
                        375
                        375
                        375
                    }
                    mBaseP: f32 = 375
                    mFormula: string = "P"
                }
                SpellDataValue {
                    mName: string = "PercentHealAmpPerPercentMissingHealth"
                    mValues: list[f32] = {
                        3
                        3
                        3
                        3
                        3
                        3
                        3
                    }
                    mBaseP: f32 = 3
                    mFormula: string = "P "
                }
            }
            0x94572284: map[hash,pointer] = {
                "TotalDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "Damage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 1.5
                        }
                    }
                }
                "TotalBaseHeal" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "FlatHeal"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.600000024
                        }
                    }
                }
            }
            mAnimationName: string = "Spell4"
            mImgIconName: list[string] = {
                "ASSETS/Characters/Ekko/HUD/Icons2D/Ekko_R.dds"
            }
            mCastTime: f32 = 0.25
            cooldownTime: list[f32] = {
                110
                110
                80
                50
                50
                50
                50
            }
            mCantCancelWhileWindingUp: bool = true
            cantCastWhileRooted: bool = true
            castRange: list[f32] = {
                25000
                25000
                25000
                25000
                25000
                25000
                25000
            }
            castRangeDisplayOverride: list[f32] = {
                850
                850
                850
                850
                850
                850
                850
            }
            castConeDistance: f32 = 100
            castFrame: f32 = 10
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
                2
            }
            mana: list[f32] = {
                100
                100
                100
                0
                0
                0
            }
            mTargetingTypeData: pointer = Self {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "EkkoR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_EkkoR_Name"
                        "keySummary" = "Spell_EkkoR_Summary"
                        "keyTooltip" = "Spell_EkkoR_Tooltip"
                        "keyTooltipExtendedBelowLine" = "Spell_EkkoR_TooltipExtendedBelowLine"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "Damage"
                                    nameOverride: string = "Spell_ListType_Damage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "FlatHeal"
                                    nameOverride: string = "Spell_ListType_Healing"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionAoe {
                        centerLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 1
                        }
                        overrideRadius: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                375
                                375
                                375
                                375
                                375
                                375
                            }
                            mValueType: u32 = 2
                        }
                    }
                }
            }
        }
        mBuff: pointer = BuffData {
            mDescription: string = "game_buff_tooltip_EkkoR"
        }
    }
    0xc3218eaf = SpellObject {
        mScriptName: string = "EkkoRHeal"
    }
    "Characters/Yone/Spells/YoneRAbility/YoneR" = SpellObject {
        mScriptName: string = "YoneR"
        mSpell: pointer = SpellDataResource {
            mAffectsTypeFlags: u32 = 6154
            mSpellTags: list[string] = {
                "Trait_Ultimate"
                "PositiveEffect_MoveBlock"
                "Trait_ImmobilizingCCSpell"
            }
            mEffectAmount: list[embed] = {
                SpellEffectAmount {
                    value: list[f32] = {
                        10
                        10
                        20
                        30
                        40
                        50
                        60
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        450
                        450
                        450
                        450
                        450
                        450
                        450
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        1300
                        1300
                        1300
                        1300
                        1300
                        1300
                        1300
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        8
                        8
                        8
                        8
                        8
                        8
                        8
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        120
                        120
                        120
                        120
                        120
                        120
                        120
                    }
                }
                SpellEffectAmount {
                    value: list[f32] = {
                        260
                        260
                        260
                        260
                        260
                        260
                        260
                    }
                }
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
                SpellEffectAmount {}
            }
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "BaseDamage"
                    mValues: list[f32] = {
                        0
                        200
                        400
                        600
                        800
                        1000
                        1200
                    }
                    mFormula: string = "P + 200"
                }
                SpellDataValue {
                    mName: string = "TADRatio"
                    mValues: list[f32] = {
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                        0.600000024
                    }
                    mBaseP: f32 = 0.600000024
                    mFormula: string = "P + 0"
                }
                SpellDataValue {
                    mName: string = "BlinkDistanceBehindTarget"
                    mValues: list[f32] = {
                        200
                        200
                        200
                        200
                        200
                        200
                        200
                    }
                    mBaseP: f32 = 200
                }
                SpellDataValue {
                    mName: string = "Width"
                    mValues: list[f32] = {
                        225
                        225
                        225
                        225
                        225
                        225
                        225
                    }
                    mBaseP: f32 = 225
                }
                SpellDataValue {
                    mName: string = "RKnockupHeight"
                    mValues: list[f32] = {
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                        0.5
                    }
                    mBaseP: f32 = 0.5
                }
                SpellDataValue {
                    mName: string = "RKnockupDuration"
                    mValues: list[f32] = {
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                        0.75
                    }
                    mBaseP: f32 = 0.75
                }
                SpellDataValue {
                    mName: string = "RKnockTowardsSpeed"
                    mValues: list[f32] = {
                        3000
                        3000
                        3000
                        3000
                        3000
                        3000
                        3000
                    }
                    mBaseP: f32 = 3000
                }
                SpellDataValue {
                    mName: string = "RKnockTowardsDampener"
                    mValues: list[f32] = {
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                        0.800000012
                    }
                    mBaseP: f32 = 0.800000012
                }
                SpellDataValue {
                    mName: string = "TooltipBaseDamage"
                    mValues: list[f32] = {
                        0
                        100
                        200
                        300
                        400
                        500
                        600
                    }
                    mFormula: string = "P + 100"
                }
            }
            0x94572284: map[hash,pointer] = {
                "Damage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = "baseDamage"
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.800000012
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                    }
                    0xcbcac618: u8 = 6
                    0x37070a8d: u8 = 0
                }
                "TooltipDamage" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NamedDataValueCalculationPart {
                            mDataValue: hash = 0xc0359ed0
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.400000006
                            mStat: u8 = 2
                            mStatFormula: u8 = 2
                        }
                    }
                    0xcbcac618: u8 = 6
                    0x37070a8d: u8 = 0
                }
            }
            mCoefficient: f32 = 1
            mAnimationName: string = "Spell4"
            mImgIconName: list[string] = {
                "ASSETS/Characters/Yone/HUD/Icons2D/YoneR.Yone.dds"
            }
            mCastTime: f32 = 0.75
            cooldownTime: list[f32] = {
                120
                120
                100
                80
                10
                10
                10
            }
            delayCastOffsetPercent: f32 = -0.75
            delayTotalTimePercent: f32 = -1
            mCantCancelWhileWindingUp: bool = true
            cantCastWhileRooted: bool = true
            alwaysSnapFacing: bool = true
            mDoesNotConsumeCooldown: bool = true
            castRange: list[f32] = {
                1000
                1000
                1000
                1000
                1000
                1000
                1000
            }
            castRangeDisplayOverride: list[f32] = {
                1000
                1000
                1000
                1000
                1000
                1000
                1000
            }
            castRadius: list[f32] = {
                1000
                1000
                1000
                1000
                1000
                1000
                1000
            }
            castConeDistance: f32 = 450
            castFrame: f32 = 50
            missileSpeed: f32 = 1500
            mLineWidth: f32 = 225
            mFloatVarsDecimals: list[i32] = {
                -1
                -1
                -1
                -1
                -1
                -1
                -1
                -1
                -1
                -1
                -1
                -1
                -1
                -1
                -1
                -1
            }
            selectionPriority: u32 = 1
            mTargetingTypeData: pointer = LocationClamped {}
            0x00f7e5bc: bool = true
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "YoneR"
                    mFormat: link = "UX/Tooltips/Spell"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_YoneR_Name"
                        "keySummary" = "Spell_YoneR_Summary"
                        "keyTooltip" = "Spell_YoneR_Tooltip"
                        "keyCost" = "Spell_Cost_NoCost"
                        "keyTooltipExtendedBelowLine" = "Spell_YoneR_TooltipExtendedBelowLine"
                    }
                    mLists: map[string,embed] = {
                        "LevelUp" = TooltipInstanceList {
                            levelCount: u32 = 3
                            elements: list[embed] = {
                                TooltipInstanceListElement {
                                    type: string = "BaseDamage"
                                    nameOverride: string = "Spell_ListType_BaseDamage"
                                }
                                TooltipInstanceListElement {
                                    type: string = "Cooldown"
                                    nameOverride: string = "Spell_ListType_Cooldown"
                                }
                            }
                        }
                    }
                }
                mTargeterDefinitions: list[pointer] = {
                    TargeterDefinitionLine {
                        endLocator: embed = DrawablePositionLocator {
                            basePosition: u32 = 3
                        }
                        lineStopsAtEndPosition: option[bool] = {
                            false
                        }
                        arrowSize: f32 = 500
                        lineWidth: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                180
                                180
                                180
                                180
                                180
                                180
                            }
                            mValueType: u32 = 2
                        }
                        overrideBaseRange: embed = FloatPerSpellLevel {
                            mPerLevelValues: list[f32] = {
                                1000
                                1000
                                1000
                                1000
                                1000
                                1000
                            }
                            mValueType: u32 = 2
                        }
                        textureBaseOverrideName: string = "ASSETS/Spells/Textures/skillshot_Rectangle_Base_r01_v01.dds"
                        textureTargetOverrideName: string = "ASSETS/Spells/Textures/skillshot_Rectangle_tip_r01_v01.dds"
                    }
                    TargeterDefinitionRange {
                        hideWithLineIndicator: bool = true
                    }
                }
            }
        }
    }
    0xc33db2bf = SpellObject {
        mScriptName: string = "GwenP"
        mSpell: pointer = SpellDataResource {
            mDataValues: list[embed] = {
                SpellDataValue {
                    mName: string = "ExecuteThreshold"
                    mValues: list[f32] = {
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                        0.400000006
                    }
                    mBaseP: f32 = 0.400000006
                    mFormula: string = "P + 0"
                }
            }
            0x94572284: map[hash,pointer] = {
                "HealingPercent" = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NumberCalculationPart {
                            mNumber: f32 = 0.699999988
                        }
                    }
                    mDisplayAsPercent: bool = true
                    0xcbcac618: u8 = 5
                    0x37070a8d: u8 = 5
                    0xe6eebb2f: u8 = 5
                }
                0x540bce84 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NumberCalculationPart {
                            mNumber: f32 = 1
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.00800000038
                        }
                    }
                    mDisplayAsPercent: bool = true
                }
                0x2e2d4a01 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        ByCharLevelInterpolationCalculationPart {
                            mStartValue: f32 = 12
                            mEndValue: f32 = 30
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.0700000003
                        }
                    }
                }
                0x545ec9b9 = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        ByCharLevelInterpolationCalculationPart {
                            mStartValue: f32 = 8
                            mEndValue: f32 = 30
                        }
                    }
                }
                0xa5e6df7c = GameCalculationModified {
                    mModifiedGameCalculation: hash = 0x540bce84
                    mMultiplier: pointer = NumberCalculationPart {
                        mNumber: f32 = 0.00999999978
                    }
                }
                0x8809e19c = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        NumberCalculationPart {
                            mNumber: f32 = 10
                        }
                        StatByCoefficientCalculationPart {
                            mCoefficient: f32 = 0.25
                        }
                    }
                }
                0x4cf085f2 = GameCalculationModified {
                    mModifiedGameCalculation: hash = 0x540bce84
                    mMultiplier: pointer = NumberCalculationPart {
                        mNumber: f32 = 0.0599999987
                    }
                    0x37070a8d: u8 = 6
                }
                0x8277cced = GameCalculationModified {
                    mModifiedGameCalculation: hash = 0x540bce84
                    mMultiplier: pointer = NumberCalculationPart {
                        mNumber: f32 = 0.0900000036
                    }
                    0x37070a8d: u8 = 6
                }
                0x4197830d = GameCalculationModified {
                    mModifiedGameCalculation: hash = 0x540bce84
                    mMultiplier: pointer = NumberCalculationPart {
                        mNumber: f32 = 0.0299999993
                    }
                }
                0x4097817a = GameCalculationModified {
                    mModifiedGameCalculation: hash = 0x540bce84
                    mMultiplier: pointer = NumberCalculationPart {
                        mNumber: f32 = 0.0500000007
                    }
                }
                0x5bade13c = GameCalculation {
                    mFormulaParts: list[pointer] = {
                        BuffCounterByCoefficientCalculationPart {
                            mCoefficient: f32 = 1
                            mBuffName: hash = 0x9d0c98ec
                        }
                    }
                }
            }
            mAnimationName: string = ""
            mImgIconName: list[string] = {
                "ASSETS/Characters/Gwen/HUD/Icons2D/Gwen_Passive.Gwen.dds"
            }
            cooldownTime: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            cannotBeSuppressed: bool = true
            canCastWhileDisabled: bool = true
            castRange: list[f32] = {
                0
                0
                0
                0
                0
                0
                0
            }
            castConeAngle: f32 = 0
            castConeDistance: f32 = 0
            mFloatVarsDecimals: list[i32] = {
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
                0
            }
            mClientData: embed = SpellDataResourceClient {
                mTooltipData: pointer = TooltipInstanceSpell {
                    mObjectName: string = "GwenP"
                    mFormat: link = "UX/Tooltips/Passive"
                    mLocKeys: map[string,string] = {
                        "keyName" = "Spell_GwenP_Name"
                        "keyTooltip" = "Spell_GwenP_Tooltip"
                        "keySummary" = "Spell_GwenP_Summary"
                        "keyTooltipExtended" = "Spell_GwenP_TooltipExtended"
                    }
                }
            }
        }
    }
    "Characters/Kaisa/Spells/KaisaRSpellPassive" = SpellObject {
        mScriptName: string = "KaisaRSpellPassive"
    }
    "UX/Tooltips/Buff" = TooltipFormat {
        mObjectName: string = "Buff"
        mInputLocKeysWithDefaults: map[string,string] = {
            "keyName" = ""
            "keyTooltip" = ""
            "keyTooltipSimple" = ""
            "keyCooldown" = ""
        }
        mOutputStrings: map[string,string] = {
            "Tooltip" = "Template_Buff_Tooltip"
            "TooltipSimple" = "Template_Buff_TooltipSimple"
            "TooltipWithExtendedBehaviorHint" = "Template_Buff_TooltipWithExtendedBehaviorHint"
        }
    }
    "UX/Tooltips/Spell" = TooltipFormat {
        mObjectName: string = "Spell"
        mInputLocKeysWithDefaults: map[string,string] = {
            "keyName" = ""
            "keySummary" = ""
            "keyTooltip" = ""
            "keyCost" = "Spell_Default_Cost"
            "keyCooldown" = "Spell_Default_Cooldown"
            "keyTooltipExtended" = "Spell_Default_TooltipExtended"
            "keyTooltipExtendedBelowLine" = "Spell_Default_ExtendedBelowLine"
            "keyTooltipSimple" = "Spell_Default_TooltipSimple"
            "keyNameUnformatted" = "Spell_Default_NameUnformatted"
            "keyHotkey" = "Spell_Default_Hotkey"
            "keyPickChoiceName" = "Spell_Default_PickChoiceName"
        }
        mListNames: list[string] = {
            "LevelUp"
        }
        mListTypeChoices: map[string,string] = {
            "Cooldown" = "Spell_ListType_Cooldown"
            "Cost" = "Spell_ListType_Cost"
            "Effect%dAmount" = ""
            "CastRange" = "Spell_ListType_Range"
            "CastRangeDisplayOverride" = "Spell_ListType_Range"
            "AmmoRechargeTime" = "Spell_ListType_RechargeTime"
            "BaseCost" = "Spell_ListType_Cost"
        }
        mListStyles: map[u32,string] = {
            0 = "Spell_ListStyle_Default"
            1 = "Spell_ListType_Percent"
        }
        mUsesListValues: bool = true
        mListValueSeparator: string = "Template_Spell_ValueSeparator"
        mListGridPrefix: string = "Template_Spell_GridPrefix"
        mListGridPostfix: string = "Template_Spell_GridPostfix"
        mListGridSeparator: string = "Template_Spell_GridSeparator"
        mOutputStrings: map[string,string] = {
            "Description" = "Template_Spell_Description"
            "DisplayName" = "Template_Spell_DisplayName"
            "Tooltip" = "Template_Spell_Tooltip"
            "TooltipSimple" = "Template_Spell_TooltipSimple"
            "TooltipExtended" = "Template_Spell_TooltipExtended"
            "TooltipLevelUp" = "Template_Spell_TooltipLevelUp"
            "TooltipLevelUpUnlearned" = "Template_Spell_TooltipLevelUpUnlearned"
            "TooltipWithExtendedBehaviorHint" = "Template_Spell_TooltipWithExtendedBehaviorHint"
            "TooltipContent" = "Template_Spell_TooltipContent"
            "TooltipContentExtended" = "Template_Spell_TooltipContentExtended"
            "TooltipLevelUpList" = "Template_Spell_TooltipLevelUpList"
            "TooltipLevelUpGrid" = "Template_Spell_TooltipLevelUpGrid"
            "PickChoiceName" = "Template_Spell_PickChoiceName"
        }
    }
    "UX/Tooltips/Passive" = TooltipFormat {
        mObjectName: string = "Passive"
        mInputLocKeysWithDefaults: map[string,string] = {
            "keyName" = ""
            "keyTooltip" = ""
            "keyTooltipSimple" = ""
            "keyTooltipExtended" = "BuffNoSource_Default_TooltipExtended"
            "keyCooldown" = ""
            "keySummary" = ""
        }
        mOutputStrings: map[string,string] = {
            "Tooltip" = "Template_BuffNoSource_Tooltip"
            "TooltipSimple" = "Template_BuffNoSource_TooltipSimple"
            "TooltipExtended" = "Template_BuffNoSource_TooltipExtended"
            "TooltipWithExtendedBehaviorHint" = "Template_BuffNoSource_TooltipWithExtendedBehaviorHint"
            "DisplayName" = "Template_BuffNoSource_DisplayName"
            "Description" = "Template_BuffNoSource_Description"
        }
    }
    "UX/Tooltips/InheritedSpell" = TooltipFormat {
        mObjectName: string = "InheritedSpell"
        mInputLocKeysWithDefaults: map[string,string] = {
            "keyName" = "InheritedSpell_Default_Name"
            "keySummary" = ""
            "keyTooltip" = "InheritedSpell_Default_Tooltip"
            "keyCost" = "Spell_Default_Cost"
            "keyCooldown" = "Spell_Default_Cooldown"
            "keyTooltipExtended" = "InheritedSpell_Default_TooltipExtended"
            "keyTooltipExtendedBelowLine" = "Spell_Default_ExtendedBelowLine"
            "keyTooltipSimple" = "Spell_Default_TooltipSimple"
            "keyNameUnformatted" = "Spell_Default_NameUnformatted"
            "keyHotkey" = "Spell_Default_Hotkey"
            "keyPickChoiceName" = "Spell_Default_PickChoiceName"
        }
        mListNames: list[string] = {
            "LevelUp"
        }
        mListTypeChoices: map[string,string] = {
            "Cooldown" = "Spell_ListType_Cooldown"
            "Cost" = "Spell_ListType_Cost"
            "Effect%dAmount" = ""
            "CastRange" = "Spell_ListType_Range"
            "CastRangeDisplayOverride" = "Spell_ListType_Range"
            "AmmoRechargeTime" = "Spell_ListType_RechargeTime"
            "BaseCost" = "Spell_ListType_Cost"
        }
        mListStyles: map[u32,string] = {
            0 = "Spell_ListStyle_Default"
            1 = "Spell_ListType_Percent"
        }
        mUsesListValues: bool = true
        mListValueSeparator: string = "Template_Spell_ValueSeparator"
        mListGridPrefix: string = "Template_Spell_GridPrefix"
        mListGridPostfix: string = "Template_Spell_GridPostfix"
        mListGridSeparator: string = "Template_Spell_GridSeparator"
        mOutputStrings: map[string,string] = {
            "Description" = "Template_Spell_Description"
            "DisplayName" = "Template_Spell_DisplayName"
            "Tooltip" = "Template_InheritedSpell_Tooltip"
            "TooltipSimple" = "Template_Spell_TooltipSimple"
            "TooltipExtended" = "Template_InheritedSpell_TooltipExtended"
            "TooltipLevelUp" = "Template_InheritedSpell_TooltipLevelUp"
            "TooltipLevelUpUnlearned" = "Template_InheritedSpell_TooltipLevelUpUnlearned"
            "TooltipWithExtendedBehaviorHint" = "Template_InheritedSpell_TooltipWithExtendedBehaviorHint"
            "TooltipContent" = "Template_Spell_TooltipContent"
            "TooltipContentExtended" = "Template_Spell_TooltipContentExtended"
            "TooltipLevelUpList" = "Template_Spell_TooltipLevelUpList"
            "TooltipLevelUpGrid" = "Template_Spell_TooltipLevelUpGrid"
            "PickChoiceName" = "Template_Spell_PickChoiceName"
        }
    }
    "UX/Tooltips/SpellKayn" = TooltipFormat {
        mObjectName: string = "SpellKayn"
        mInputLocKeysWithDefaults: map[string,string] = {
            "keyName" = ""
            "keySummary" = ""
            "keyTooltip" = ""
            "keyCost" = "Spell_Default_Cost"
            "keyCooldown" = "Spell_Default_Cooldown"
            "keyTooltipExtended" = "Spell_Default_TooltipExtended"
            "keyTooltipExtendedBelowLine" = "Spell_Default_ExtendedBelowLine"
            "keyTooltipSimple" = "Spell_Default_TooltipSimple"
            "keyNameUnformatted" = "Spell_Default_NameUnformatted"
            "keyHotkey" = "Spell_Default_Hotkey"
            "keyPickChoiceName" = "Spell_Default_PickChoiceName"
            "keyKaynHackType" = ""
            "keyKaynHackValue" = ""
        }
        mListNames: list[string] = {
            "LevelUp"
        }
        mListTypeChoices: map[string,string] = {
            "Cooldown" = "Spell_ListType_Cooldown"
            "Cost" = "Spell_ListType_Cost"
            "Effect%dAmount" = ""
            "CastRange" = "Spell_ListType_Range"
            "CastRangeDisplayOverride" = "Spell_ListType_Range"
            "AmmoRechargeTime" = "Spell_ListType_RechargeTime"
            "BaseCost" = "Spell_ListType_Cost"
        }
        mListStyles: map[u32,string] = {
            0 = "Spell_ListStyle_Default"
            1 = "Spell_ListType_Percent"
        }
        mUsesListValues: bool = true
        mListValueSeparator: string = "Template_Spell_ValueSeparator"
        mListGridPrefix: string = "Template_Spell_GridPrefix"
        mListGridPostfix: string = "Template_Spell_GridPostfix"
        mListGridSeparator: string = "Template_Spell_GridSeparator"
        mOutputStrings: map[string,string] = {
            "Description" = "Template_Spell_Description"
            "DisplayName" = "Template_Spell_DisplayName"
            "Tooltip" = "Template_Spell_Tooltip"
            "TooltipSimple" = "Template_Spell_TooltipSimple"
            "TooltipExtended" = "Template_Spell_TooltipExtended"
            "TooltipLevelUp" = "Template_SpellKayn_TooltipLevelUp"
            "TooltipLevelUpUnlearned" = "Template_Spell_TooltipLevelUpUnlearned"
            "TooltipWithExtendedBehaviorHint" = "Template_Spell_TooltipWithExtendedBehaviorHint"
            "TooltipContent" = "Template_Spell_TooltipContent"
            "TooltipContentExtended" = "Template_Spell_TooltipContentExtended"
            "TooltipLevelUpList" = "Template_Spell_TooltipLevelUpList"
            "TooltipLevelUpGrid" = "Template_Spell_TooltipLevelUpGrid"
            "PickChoiceName" = "Template_Spell_PickChoiceName"
        }
    }
    0xab8e40ff = StaticMaterialDef {
        name: string = "Shared/Materials/UltBook_Clone_inst"
        defaultTechnique: string = "normal"
        samplerValues: list[embed] = {
            StaticMaterialShaderSamplerDef {
                samplerName: string = "Diffuse_Texture"
                textureName: string = "ASSETS/Shared/Materials/black.dds"
                addressU: u32 = 1
                addressV: u32 = 1
                addressW: u32 = 1
            }
            StaticMaterialShaderSamplerDef {
                samplerName: string = "Gradient_Texture"
                textureName: string = "ASSETS/Characters/Sylas/Skins/Base/Particles/Sylas_Base_R_gradient.dds"
            }
        }
        paramValues: list[embed] = {
            StaticMaterialShaderParamDef {
                name: string = "Fresnel_Color"
                value: vec4 = { 1, 0, 0, 0 }
            }
            StaticMaterialShaderParamDef {
                name: string = "FresnelColor_Size"
                value: vec4 = { 4, 0, 0, 0 }
            }
            StaticMaterialShaderParamDef {
                name: string = "FresnelColor_Bias"
            }
            StaticMaterialShaderParamDef {
                name: string = "Diffuse_Alpha"
                value: vec4 = { 1, 0, 0, 0 }
            }
            StaticMaterialShaderParamDef {
                name: string = "Diffuse_Color"
                value: vec4 = { 0.110002287, 0.0500038154, 0.250003815, 0.489997715 }
            }
            StaticMaterialShaderParamDef {
                name: string = "Inner_Color"
                value: vec4 = { 0.0500038154, 0.0500038154, 0.179995418, 0.200000003 }
            }
            StaticMaterialShaderParamDef {
                name: string = "Fresnel_Alpha"
                value: vec4 = { 1, 0, 0, 0 }
            }
        }
        shaderMacros: map[string,string] = {
            "NUM_BLEND_WEIGHTS" = "4"
        }
        techniques: list[embed] = {
            StaticMaterialTechniqueDef {
                name: string = "normal"
                passes: list[embed] = {
                    StaticMaterialPassDef {
                        shader: link = "Shaders/SkinnedMesh/Sylas_R_Clone"
                        blendEnable: bool = true
                        srcColorBlendFactor: u32 = 6
                        srcAlphaBlendFactor: u32 = 6
                        dstColorBlendFactor: u32 = 7
                        dstAlphaBlendFactor: u32 = 7
                    }
                }
            }
        }
        childTechniques: list[embed] = {
            StaticMaterialChildTechniqueDef {
                name: string = "transition"
                parentName: string = "normal"
                shaderMacros: map[string,string] = {
                    "TRANSITION" = "1"
                }
            }
        }
        dynamicMaterial: pointer = DynamicMaterialDef {}
    }
}
